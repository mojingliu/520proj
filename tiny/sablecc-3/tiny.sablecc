Package tiny;

Helpers
  tab   = 9;
  cr    = 13;
  lf    = 10;
  digit = ['0'..'9'];
  lowercase = ['a'..'z'];
  uppercase = ['A'..'Z'];
  letter  = lowercase | uppercase;
  idletter = letter | '_';
  idchar  = letter | '_' | digit;

Tokens
  eol   = cr | lf | cr lf;
  blank = ' ' | tab;
  star  = '*';
  slash = '/';
  mod   = '%';
  abs   = 'a' 'b' 's';
  pow   = '*' '*';
  plus  = '+';
  minus = '-';
  l_par = '(';
  r_par = ')';
  number  = '0'| [digit-'0'] digit*;
  id    = idletter idchar*;

Ignored Tokens
  blank, eol;

Productions
cst_exp {-> exp} = 
  {cst_plus}    cst_exp plus factor 
                {-> New exp.plus(cst_exp.exp,factor.exp)}
| {cst_minus}   cst_exp minus factor 
	              {-> New exp.minus(cst_exp.exp,factor.exp)} 
| {factor}      factor {-> factor.exp};

factor {-> exp} =
  {cst_mult}    factor star power 
                {-> New exp.mult(factor.exp,power.exp)}
| {cst_divd}    factor slash power 
                {-> New exp.divd(factor.exp,power.exp)}
| {cst_mod}     factor mod power
                {-> New exp.mod(factor.exp,power.exp)}
| {power}       power {-> power.exp};

power {-> exp } =
  {cst_pow}     term pow power 
                {-> New exp.pow(term.exp, power.exp)}
| {uminus}      uminus
                {-> uminus.exp };

uminus {-> exp } =
  {cst_uminus}  minus term
                {-> New exp.uminus(term.exp)}
| {term}        term
                {-> term.exp };   

term {-> exp} =
  {paren}       l_par cst_exp r_par 
                {-> cst_exp.exp}
| {cst_abs}     abs l_par cst_exp r_par
                {-> New exp.abs(cst_exp.exp)}
| {cst_id}      id
                {-> New exp.id(id)}
| {cst_number}  number 
                {-> New exp.number(number)};

Abstract Syntax Tree
exp = 
  {plus}     [l]:exp [r]:exp 
| {minus}    [l]:exp [r]:exp
| {mult}     [l]:exp [r]:exp 
| {divd}     [l]:exp [r]:exp 
| {mod}      [l]:exp [r]:exp
| {pow}      [l]:exp [r]:exp
| {abs}      exp
| {uminus}   exp
| {id}       id 
| {number}   number;
