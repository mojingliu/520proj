/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class ADeclFirstStm extends PStm
{
    private PType _type_;
    private final LinkedList _identifiers_ = new TypedLinkedList(new Identifiers_Cast());

    public ADeclFirstStm()
    {
    }

    public ADeclFirstStm(
        PType _type_,
        List _identifiers_)
    {
        setType(_type_);

        {
            this._identifiers_.clear();
            this._identifiers_.addAll(_identifiers_);
        }

    }
    public Object clone()
    {
        return new ADeclFirstStm(
            (PType) cloneNode(_type_),
            cloneList(_identifiers_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclFirstStm(this);
    }

    public PType getType()
    {
        return _type_;
    }

    public void setType(PType node)
    {
        if(_type_ != null)
        {
            _type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _type_ = node;
    }

    public LinkedList getIdentifiers()
    {
        return _identifiers_;
    }

    public void setIdentifiers(List list)
    {
        _identifiers_.clear();
        _identifiers_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_type_)
            + toString(_identifiers_);
    }

    void removeChild(Node child)
    {
        if(_type_ == child)
        {
            _type_ = null;
            return;
        }

        if(_identifiers_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        for(ListIterator i = _identifiers_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Identifiers_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TIdentifier node = (TIdentifier) o;

            if((node.parent() != null) &&
                (node.parent() != ADeclFirstStm.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ADeclFirstStm.this))
            {
                node.parent(ADeclFirstStm.this);
            }

            return node;
        }
    }
}
