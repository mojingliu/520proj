/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class AClass extends PClass
{
    private PClassmods _classmods_;
    private TIdentifier _identifier_;
    private PExtension _extension_;
    private final LinkedList _fields_ = new TypedLinkedList(new Fields_Cast());
    private final LinkedList _constructors_ = new TypedLinkedList(new Constructors_Cast());
    private final LinkedList _methods_ = new TypedLinkedList(new Methods_Cast());

    public AClass()
    {
    }

    public AClass(
        PClassmods _classmods_,
        TIdentifier _identifier_,
        PExtension _extension_,
        List _fields_,
        List _constructors_,
        List _methods_)
    {
        setClassmods(_classmods_);

        setIdentifier(_identifier_);

        setExtension(_extension_);

        {
            this._fields_.clear();
            this._fields_.addAll(_fields_);
        }

        {
            this._constructors_.clear();
            this._constructors_.addAll(_constructors_);
        }

        {
            this._methods_.clear();
            this._methods_.addAll(_methods_);
        }

    }
    public Object clone()
    {
        return new AClass(
            (PClassmods) cloneNode(_classmods_),
            (TIdentifier) cloneNode(_identifier_),
            (PExtension) cloneNode(_extension_),
            cloneList(_fields_),
            cloneList(_constructors_),
            cloneList(_methods_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClass(this);
    }

    public PClassmods getClassmods()
    {
        return _classmods_;
    }

    public void setClassmods(PClassmods node)
    {
        if(_classmods_ != null)
        {
            _classmods_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _classmods_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PExtension getExtension()
    {
        return _extension_;
    }

    public void setExtension(PExtension node)
    {
        if(_extension_ != null)
        {
            _extension_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _extension_ = node;
    }

    public LinkedList getFields()
    {
        return _fields_;
    }

    public void setFields(List list)
    {
        _fields_.clear();
        _fields_.addAll(list);
    }

    public LinkedList getConstructors()
    {
        return _constructors_;
    }

    public void setConstructors(List list)
    {
        _constructors_.clear();
        _constructors_.addAll(list);
    }

    public LinkedList getMethods()
    {
        return _methods_;
    }

    public void setMethods(List list)
    {
        _methods_.clear();
        _methods_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_classmods_)
            + toString(_identifier_)
            + toString(_extension_)
            + toString(_fields_)
            + toString(_constructors_)
            + toString(_methods_);
    }

    void removeChild(Node child)
    {
        if(_classmods_ == child)
        {
            _classmods_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_extension_ == child)
        {
            _extension_ = null;
            return;
        }

        if(_fields_.remove(child))
        {
            return;
        }

        if(_constructors_.remove(child))
        {
            return;
        }

        if(_methods_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_classmods_ == oldChild)
        {
            setClassmods((PClassmods) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_extension_ == oldChild)
        {
            setExtension((PExtension) newChild);
            return;
        }

        for(ListIterator i = _fields_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _constructors_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator i = _methods_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Fields_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PField node = (PField) o;

            if((node.parent() != null) &&
                (node.parent() != AClass.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AClass.this))
            {
                node.parent(AClass.this);
            }

            return node;
        }
    }

    private class Constructors_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PConstructor node = (PConstructor) o;

            if((node.parent() != null) &&
                (node.parent() != AClass.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AClass.this))
            {
                node.parent(AClass.this);
            }

            return node;
        }
    }

    private class Methods_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PMethod node = (PMethod) o;

            if((node.parent() != null) &&
                (node.parent() != AClass.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AClass.this))
            {
                node.parent(AClass.this);
            }

            return node;
        }
    }
}
