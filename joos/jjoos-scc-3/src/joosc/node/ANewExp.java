/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class ANewExp extends PExp
{
    private TIdentifier _identifier_;
    private final LinkedList _args_ = new TypedLinkedList(new Args_Cast());

    public ANewExp()
    {
    }

    public ANewExp(
        TIdentifier _identifier_,
        List _args_)
    {
        setIdentifier(_identifier_);

        {
            this._args_.clear();
            this._args_.addAll(_args_);
        }

    }
    public Object clone()
    {
        return new ANewExp(
            (TIdentifier) cloneNode(_identifier_),
            cloneList(_args_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANewExp(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public LinkedList getArgs()
    {
        return _args_;
    }

    public void setArgs(List list)
    {
        _args_.clear();
        _args_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_args_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_args_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator i = _args_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Args_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.parent() != null) &&
                (node.parent() != ANewExp.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ANewExp.this))
            {
                node.parent(ANewExp.this);
            }

            return node;
        }
    }
}
