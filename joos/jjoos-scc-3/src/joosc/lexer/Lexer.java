/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.lexer;

import java.io.*;
import java.util.*;
import joosc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TAbstract(line, pos); }
    Token new1(int line, int pos) { return new TBoolean(line, pos); }
    Token new2(int line, int pos) { return new TBreak(line, pos); }
    Token new3(int line, int pos) { return new TByte(line, pos); }
    Token new4(int line, int pos) { return new TCase(line, pos); }
    Token new5(int line, int pos) { return new TCatch(line, pos); }
    Token new6(int line, int pos) { return new TChar(line, pos); }
    Token new7(int line, int pos) { return new TClass(line, pos); }
    Token new8(int line, int pos) { return new TConst(line, pos); }
    Token new9(int line, int pos) { return new TContinue(line, pos); }
    Token new10(int line, int pos) { return new TDefault(line, pos); }
    Token new11(int line, int pos) { return new TDo(line, pos); }
    Token new12(int line, int pos) { return new TDouble(line, pos); }
    Token new13(int line, int pos) { return new TElse(line, pos); }
    Token new14(int line, int pos) { return new TExtends(line, pos); }
    Token new15(int line, int pos) { return new TExtern(line, pos); }
    Token new16(int line, int pos) { return new TFinal(line, pos); }
    Token new17(int line, int pos) { return new TFinally(line, pos); }
    Token new18(int line, int pos) { return new TFloat(line, pos); }
    Token new19(int line, int pos) { return new TFor(line, pos); }
    Token new20(int line, int pos) { return new TGoto(line, pos); }
    Token new21(int line, int pos) { return new TIf(line, pos); }
    Token new22(int line, int pos) { return new TImplements(line, pos); }
    Token new23(int line, int pos) { return new TImport(line, pos); }
    Token new24(int line, int pos) { return new TIn(line, pos); }
    Token new25(int line, int pos) { return new TInstanceof(line, pos); }
    Token new26(int line, int pos) { return new TInt(line, pos); }
    Token new27(int line, int pos) { return new TInterface(line, pos); }
    Token new28(int line, int pos) { return new TLong(line, pos); }
    Token new29(int line, int pos) { return new TMain(line, pos); }
    Token new30(int line, int pos) { return new TNative(line, pos); }
    Token new31(int line, int pos) { return new TNew(line, pos); }
    Token new32(int line, int pos) { return new TPackage(line, pos); }
    Token new33(int line, int pos) { return new TPrivate(line, pos); }
    Token new34(int line, int pos) { return new TProtected(line, pos); }
    Token new35(int line, int pos) { return new TPublic(line, pos); }
    Token new36(int line, int pos) { return new TReturn(line, pos); }
    Token new37(int line, int pos) { return new TShort(line, pos); }
    Token new38(int line, int pos) { return new TStatic(line, pos); }
    Token new39(int line, int pos) { return new TSuper(line, pos); }
    Token new40(int line, int pos) { return new TSwitch(line, pos); }
    Token new41(int line, int pos) { return new TSynchronized(line, pos); }
    Token new42(int line, int pos) { return new TThis(line, pos); }
    Token new43(int line, int pos) { return new TThrow(line, pos); }
    Token new44(int line, int pos) { return new TThrows(line, pos); }
    Token new45(int line, int pos) { return new TTransient(line, pos); }
    Token new46(int line, int pos) { return new TTry(line, pos); }
    Token new47(int line, int pos) { return new TVoid(line, pos); }
    Token new48(int line, int pos) { return new TVolatile(line, pos); }
    Token new49(int line, int pos) { return new TWhile(line, pos); }
    Token new50(int line, int pos) { return new TAssign(line, pos); }
    Token new51(int line, int pos) { return new TGt(line, pos); }
    Token new52(int line, int pos) { return new TLt(line, pos); }
    Token new53(int line, int pos) { return new TNot(line, pos); }
    Token new54(int line, int pos) { return new TEq(line, pos); }
    Token new55(int line, int pos) { return new TLeq(line, pos); }
    Token new56(int line, int pos) { return new TGeq(line, pos); }
    Token new57(int line, int pos) { return new TNeq(line, pos); }
    Token new58(int line, int pos) { return new TAnd(line, pos); }
    Token new59(int line, int pos) { return new TOr(line, pos); }
    Token new60(int line, int pos) { return new TPlus(line, pos); }
    Token new61(int line, int pos) { return new TMinus(line, pos); }
    Token new62(int line, int pos) { return new TMult(line, pos); }
    Token new63(int line, int pos) { return new TDiv(line, pos); }
    Token new64(int line, int pos) { return new TMod(line, pos); }
    Token new65(int line, int pos) { return new TLBrace(line, pos); }
    Token new66(int line, int pos) { return new TRBrace(line, pos); }
    Token new67(int line, int pos) { return new TSemicolon(line, pos); }
    Token new68(int line, int pos) { return new TLPar(line, pos); }
    Token new69(int line, int pos) { return new TRPar(line, pos); }
    Token new70(int line, int pos) { return new TLBracket(line, pos); }
    Token new71(int line, int pos) { return new TRBracket(line, pos); }
    Token new72(int line, int pos) { return new TComma(line, pos); }
    Token new73(int line, int pos) { return new TDot(line, pos); }
    Token new74(int line, int pos) { return new TInc(line, pos); }
    Token new75(int line, int pos) { return new TNull(line, pos); }
    Token new76(int line, int pos) { return new TTrue(line, pos); }
    Token new77(int line, int pos) { return new TFalse(line, pos); }
    Token new78(String text, int line, int pos) { return new TCharconst(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TIntconst(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TStringconst(text, line, pos); }
    Token new81(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new82(String text, int line, int pos) { return new TImportpath(text, line, pos); }
    Token new83(String text, int line, int pos) { return new TBlanks(text, line, pos); }
    Token new84(String text, int line, int pos) { return new TEolComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {32, 32, 3}, {33, 33, 4}, {34, 34, 5}, {37, 37, 6}, {38, 38, 7}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 48, 17}, {49, 57, 18}, {59, 59, 19}, {60, 60, 20}, {61, 61, 21}, {62, 62, 22}, {65, 90, 23}, {91, 91, 24}, {93, 93, 25}, {95, 95, 26}, {97, 97, 27}, {98, 98, 28}, {99, 99, 29}, {100, 100, 30}, {101, 101, 31}, {102, 102, 32}, {103, 103, 33}, {104, 104, 23}, {105, 105, 34}, {106, 107, 23}, {108, 108, 35}, {109, 109, 36}, {110, 110, 37}, {111, 111, 23}, {112, 112, 38}, {113, 113, 23}, {114, 114, 39}, {115, 115, 40}, {116, 116, 41}, {117, 117, 23}, {118, 118, 42}, {119, 119, 43}, {120, 122, 23}, {123, 123, 44}, {124, 124, 45}, {125, 125, 46}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{61, 61, 47}, },
            {{0, 33, 48}, {34, 34, 49}, {35, 65535, 48}, },
            {},
            {{38, 38, 50}, },
            {{0, 9, 51}, {11, 38, 51}, {40, 91, 51}, {92, 92, 52}, {93, 65535, 51}, },
            {},
            {},
            {},
            {{43, 43, 53}, },
            {},
            {},
            {},
            {{47, 47, 54}, },
            {},
            {{48, 57, 55}, },
            {},
            {{61, 61, 56}, },
            {{61, 61, 57}, },
            {{61, 61, 58}, },
            {{48, 57, 59}, {65, 90, 60}, {95, 95, 61}, {97, 122, 60}, },
            {},
            {},
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 97, 60}, {98, 98, 62}, {99, 122, 60}, },
            {{48, 95, -25}, {97, 110, 60}, {111, 111, 63}, {112, 113, 60}, {114, 114, 64}, {115, 120, 60}, {121, 121, 65}, {122, 122, 60}, },
            {{48, 95, -25}, {97, 97, 66}, {98, 103, 60}, {104, 104, 67}, {105, 107, 60}, {108, 108, 68}, {109, 110, 60}, {111, 111, 69}, {112, 122, 60}, },
            {{48, 95, -25}, {97, 100, 60}, {101, 101, 70}, {102, 110, 60}, {111, 111, 71}, {112, 122, 60}, },
            {{48, 95, -25}, {97, 107, 60}, {108, 108, 72}, {109, 119, 60}, {120, 120, 73}, {121, 122, 60}, },
            {{48, 95, -25}, {97, 97, 74}, {98, 104, 60}, {105, 105, 75}, {106, 107, 60}, {108, 108, 76}, {109, 110, 60}, {111, 111, 77}, {112, 122, 60}, },
            {{48, 110, -30}, {111, 111, 78}, {112, 122, 60}, },
            {{48, 95, -25}, {97, 101, 60}, {102, 102, 79}, {103, 108, 60}, {109, 109, 80}, {110, 110, 81}, {111, 122, 60}, },
            {{48, 110, -30}, {111, 111, 82}, {112, 122, 60}, },
            {{48, 95, -25}, {97, 97, 83}, {98, 122, 60}, },
            {{48, 95, -25}, {97, 97, 84}, {98, 100, 60}, {101, 101, 85}, {102, 116, 60}, {117, 117, 86}, {118, 122, 60}, },
            {{48, 95, -25}, {97, 97, 87}, {98, 113, 60}, {114, 114, 88}, {115, 116, 60}, {117, 117, 89}, {118, 122, 60}, },
            {{48, 100, -32}, {101, 101, 90}, {102, 122, 60}, },
            {{48, 95, -25}, {97, 103, 60}, {104, 104, 91}, {105, 115, 60}, {116, 116, 92}, {117, 117, 93}, {118, 118, 60}, {119, 119, 94}, {120, 120, 60}, {121, 121, 95}, {122, 122, 60}, },
            {{48, 103, -42}, {104, 104, 96}, {105, 113, 60}, {114, 114, 97}, {115, 122, 60}, },
            {{48, 110, -30}, {111, 111, 98}, {112, 122, 60}, },
            {{48, 103, -42}, {104, 104, 99}, {105, 122, 60}, },
            {},
            {{124, 124, 100}, },
            {},
            {},
            {{0, 65535, -7}, },
            {},
            {},
            {{39, 39, 101}, },
            {{34, 34, 102}, {39, 39, 103}, {48, 55, 104}, {92, 92, 105}, {98, 98, 106}, {102, 102, 107}, {110, 110, 108}, {114, 114, 109}, {116, 116, 110}, },
            {},
            {{0, 9, 111}, {10, 10, 112}, {11, 65535, 111}, },
            {{48, 57, 55}, },
            {},
            {},
            {},
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 114, 60}, {115, 115, 113}, {116, 122, 60}, },
            {{48, 110, -30}, {111, 111, 114}, {112, 122, 60}, },
            {{48, 100, -32}, {101, 101, 115}, {102, 122, 60}, },
            {{48, 95, -25}, {97, 115, 60}, {116, 116, 116}, {117, 122, 60}, },
            {{48, 114, -64}, {115, 115, 117}, {116, 116, 118}, {117, 122, 60}, },
            {{48, 95, -25}, {97, 97, 119}, {98, 122, 60}, },
            {{48, 95, -25}, {97, 97, 120}, {98, 122, 60}, },
            {{48, 95, -25}, {97, 109, 60}, {110, 110, 121}, {111, 122, 60}, },
            {{48, 101, -36}, {102, 102, 122}, {103, 122, 60}, },
            {{48, 95, -25}, {97, 116, 60}, {117, 117, 123}, {118, 122, 60}, },
            {{48, 114, -64}, {115, 115, 124}, {116, 122, 60}, },
            {{48, 115, -67}, {116, 116, 125}, {117, 122, 60}, },
            {{48, 107, -33}, {108, 108, 126}, {109, 122, 60}, },
            {{48, 109, -71}, {110, 110, 127}, {111, 122, 60}, },
            {{48, 110, -30}, {111, 111, 128}, {112, 122, 60}, },
            {{48, 95, -25}, {97, 113, 60}, {114, 114, 129}, {115, 122, 60}, },
            {{48, 115, -67}, {116, 116, 130}, {117, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 111, 60}, {112, 112, 131}, {113, 122, 60}, },
            {{48, 114, -64}, {115, 115, 132}, {116, 116, 133}, {117, 122, 60}, },
            {{48, 109, -71}, {110, 110, 134}, {111, 122, 60}, },
            {{48, 95, -25}, {97, 104, 60}, {105, 105, 135}, {106, 122, 60}, },
            {{48, 115, -67}, {116, 116, 136}, {117, 122, 60}, },
            {{48, 95, -25}, {97, 118, 60}, {119, 119, 137}, {120, 122, 60}, },
            {{48, 107, -33}, {108, 108, 138}, {109, 122, 60}, },
            {{48, 95, -25}, {97, 98, 60}, {99, 99, 139}, {100, 122, 60}, },
            {{48, 104, -85}, {105, 105, 140}, {106, 110, 60}, {111, 111, 141}, {112, 122, 60}, },
            {{48, 97, -29}, {98, 98, 142}, {99, 122, 60}, },
            {{48, 115, -67}, {116, 116, 143}, {117, 122, 60}, },
            {{48, 110, -30}, {111, 111, 144}, {112, 122, 60}, },
            {{48, 95, -25}, {97, 97, 145}, {98, 122, 60}, },
            {{48, 111, -82}, {112, 112, 146}, {113, 122, 60}, },
            {{48, 104, -85}, {105, 105, 147}, {106, 122, 60}, },
            {{48, 109, -71}, {110, 110, 148}, {111, 122, 60}, },
            {{48, 104, -85}, {105, 105, 149}, {106, 113, 60}, {114, 114, 150}, {115, 122, 60}, },
            {{48, 95, -25}, {97, 97, 151}, {98, 116, 60}, {117, 117, 152}, {118, 120, 60}, {121, 121, 153}, {122, 122, 60}, },
            {{48, 104, -85}, {105, 105, 154}, {106, 107, 60}, {108, 108, 155}, {109, 122, 60}, },
            {{48, 104, -85}, {105, 105, 156}, {106, 122, 60}, },
            {},
            {},
            {{39, 39, 101}, },
            {{39, 39, 101}, },
            {{48, 55, 157}, },
            {{39, 39, 101}, },
            {{39, 39, 101}, },
            {{39, 39, 101}, },
            {{39, 39, 101}, },
            {{39, 39, 101}, },
            {{39, 39, 101}, },
            {{0, 65535, -56}, },
            {},
            {{48, 115, -67}, {116, 116, 158}, {117, 122, 60}, },
            {{48, 107, -33}, {108, 108, 159}, {109, 122, 60}, },
            {{48, 95, -25}, {97, 97, 160}, {98, 122, 60}, },
            {{48, 100, -32}, {101, 101, 161}, {102, 122, 60}, },
            {{48, 100, -32}, {101, 101, 162}, {102, 122, 60}, },
            {{48, 98, -89}, {99, 99, 163}, {100, 122, 60}, },
            {{48, 113, -79}, {114, 114, 164}, {115, 122, 60}, },
            {{48, 114, -64}, {115, 115, 165}, {116, 122, 60}, },
            {{48, 114, -64}, {115, 115, 166}, {116, 116, 167}, {117, 122, 60}, },
            {{48, 95, -25}, {97, 97, 168}, {98, 122, 60}, },
            {{48, 97, -29}, {98, 98, 169}, {99, 122, 60}, },
            {{48, 100, -32}, {101, 101, 170}, {102, 122, 60}, },
            {{48, 100, -32}, {101, 101, 171}, {102, 122, 60}, },
            {{48, 114, -64}, {115, 115, 172}, {116, 122, 60}, },
            {{48, 95, -25}, {97, 97, 173}, {98, 122, 60}, },
            {{48, 95, -25}, {97, 97, 174}, {98, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 110, -30}, {111, 111, 175}, {112, 122, 60}, },
            {{48, 107, -33}, {108, 108, 176}, {109, 110, 60}, {111, 111, 177}, {112, 122, 60}, },
            {{48, 115, -67}, {116, 116, 178}, {117, 122, 60}, },
            {{48, 100, -32}, {101, 101, 179}, {102, 122, 60}, },
            {{48, 95, -25}, {97, 102, 60}, {103, 103, 180}, {104, 122, 60}, },
            {{48, 109, -71}, {110, 110, 181}, {111, 122, 60}, },
            {{48, 104, -85}, {105, 105, 182}, {106, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 107, -33}, {108, 108, 183}, {109, 122, 60}, },
            {{48, 95, -25}, {97, 106, 60}, {107, 107, 184}, {108, 122, 60}, },
            {{48, 95, -25}, {97, 117, 60}, {118, 118, 185}, {119, 122, 60}, },
            {{48, 115, -67}, {116, 116, 186}, {117, 122, 60}, },
            {{48, 107, -33}, {108, 108, 187}, {109, 122, 60}, },
            {{48, 116, -73}, {117, 117, 188}, {118, 122, 60}, },
            {{48, 113, -79}, {114, 114, 189}, {115, 122, 60}, },
            {{48, 115, -67}, {116, 116, 190}, {117, 122, 60}, },
            {{48, 100, -32}, {101, 101, 191}, {102, 122, 60}, },
            {{48, 115, -67}, {116, 116, 192}, {117, 122, 60}, },
            {{48, 98, -89}, {99, 99, 193}, {100, 122, 60}, },
            {{48, 114, -64}, {115, 115, 194}, {116, 122, 60}, },
            {{48, 110, -30}, {111, 111, 195}, {112, 122, 60}, },
            {{48, 109, -71}, {110, 110, 196}, {111, 122, 60}, },
            {{48, 100, -32}, {101, 101, 197}, {102, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 99, 60}, {100, 100, 198}, {101, 122, 60}, },
            {{48, 95, -25}, {97, 97, 199}, {98, 122, 60}, },
            {{48, 107, -33}, {108, 108, 200}, {109, 122, 60}, },
            {{48, 55, 201}, },
            {{48, 113, -79}, {114, 114, 202}, {115, 122, 60}, },
            {{48, 100, -32}, {101, 101, 203}, {102, 122, 60}, },
            {{48, 106, -141}, {107, 107, 204}, {108, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 103, -42}, {104, 104, 205}, {105, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 114, -64}, {115, 115, 206}, {116, 122, 60}, },
            {{48, 115, -67}, {116, 116, 207}, {117, 122, 60}, },
            {{48, 104, -85}, {105, 105, 208}, {106, 122, 60}, },
            {{48, 116, -73}, {117, 117, 209}, {118, 122, 60}, },
            {{48, 107, -33}, {108, 108, 210}, {109, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 109, -71}, {110, 110, 211}, {111, 113, 60}, {114, 114, 212}, {115, 122, 60}, },
            {{48, 100, -32}, {101, 101, 213}, {102, 122, 60}, },
            {{48, 107, -33}, {108, 108, 214}, {109, 122, 60}, },
            {{48, 115, -67}, {116, 116, 215}, {117, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 216}, {102, 122, 60}, },
            {{48, 113, -79}, {114, 114, 217}, {115, 122, 60}, },
            {{48, 95, -25}, {97, 97, 218}, {98, 122, 60}, },
            {{48, 113, -79}, {114, 114, 219}, {115, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 117, -142}, {118, 118, 220}, {119, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 97, 221}, {98, 122, 60}, },
            {{48, 95, -25}, {97, 97, 222}, {98, 122, 60}, },
            {{48, 100, -32}, {101, 101, 223}, {102, 122, 60}, },
            {{48, 104, -85}, {105, 105, 224}, {106, 122, 60}, },
            {{48, 113, -79}, {114, 114, 225}, {115, 122, 60}, },
            {{48, 115, -67}, {116, 116, 226}, {117, 122, 60}, },
            {{48, 104, -85}, {105, 105, 227}, {106, 122, 60}, },
            {{48, 113, -79}, {114, 114, 228}, {115, 122, 60}, },
            {{48, 98, -89}, {99, 99, 229}, {100, 122, 60}, },
            {{48, 103, -42}, {104, 104, 230}, {105, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 118, -87}, {119, 119, 231}, {120, 122, 60}, },
            {{48, 114, -64}, {115, 115, 232}, {116, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 115, -67}, {116, 116, 233}, {117, 122, 60}, },
            {{48, 100, -32}, {101, 101, 234}, {102, 122, 60}, },
            {{39, 39, 101}, },
            {{48, 95, -25}, {97, 97, 235}, {98, 122, 60}, },
            {{48, 95, -25}, {97, 97, 236}, {98, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 109, -71}, {110, 110, 237}, {111, 122, 60}, },
            {{48, 107, -33}, {108, 108, 238}, {109, 122, 60}, },
            {{48, 100, -32}, {101, 101, 239}, {102, 122, 60}, },
            {{48, 99, -156}, {100, 100, 240}, {101, 122, 60}, },
            {{48, 109, -71}, {110, 110, 241}, {111, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 107, -33}, {108, 108, 242}, {109, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 108, 60}, {109, 109, 243}, {110, 122, 60}, },
            {{48, 115, -67}, {116, 116, 244}, {117, 122, 60}, },
            {{48, 109, -71}, {110, 110, 245}, {111, 122, 60}, },
            {{48, 101, -36}, {102, 102, 246}, {103, 122, 60}, },
            {{48, 100, -32}, {101, 101, 247}, {102, 122, 60}, },
            {{48, 102, -136}, {103, 103, 248}, {104, 122, 60}, },
            {{48, 115, -67}, {116, 116, 249}, {117, 122, 60}, },
            {{48, 98, -89}, {99, 99, 250}, {100, 122, 60}, },
            {{48, 98, -89}, {99, 99, 251}, {100, 122, 60}, },
            {{48, 109, -71}, {110, 110, 252}, {111, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 98, -89}, {99, 99, 253}, {100, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 103, -42}, {104, 104, 254}, {105, 122, 60}, },
            {{48, 113, -79}, {114, 114, 255}, {115, 122, 60}, },
            {{48, 114, -64}, {115, 115, 256}, {116, 122, 60}, },
            {{48, 104, -85}, {105, 105, 257}, {106, 122, 60}, },
            {{48, 104, -85}, {105, 105, 258}, {106, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 98, -89}, {99, 99, 259}, {100, 122, 60}, },
            {{48, 109, -71}, {110, 110, 260}, {111, 122, 60}, },
            {{48, 116, -73}, {117, 117, 261}, {118, 122, 60}, },
            {{48, 115, -67}, {116, 116, 262}, {117, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 114, -64}, {115, 115, 263}, {116, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 120, 60}, {121, 121, 264}, {122, 122, 60}, },
            {{48, 100, -32}, {101, 101, 265}, {102, 122, 60}, },
            {{32, 32, 266}, {48, 122, -25}, },
            {{48, 98, -89}, {99, 99, 267}, {100, 122, 60}, },
            {{48, 95, -25}, {97, 97, 268}, {98, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 269}, {102, 122, 60}, },
            {{48, 100, -32}, {101, 101, 270}, {102, 122, 60}, },
            {{48, 115, -67}, {116, 116, 271}, {117, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 110, -30}, {111, 111, 272}, {112, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 273}, {102, 122, 60}, },
            {{48, 107, -33}, {108, 108, 274}, {109, 122, 60}, },
            {{48, 115, -67}, {116, 116, 275}, {117, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 276}, {102, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 109, -71}, {110, 110, 277}, {111, 122, 60}, },
            {{42, 42, 278}, {65, 90, 279}, {95, 95, 280}, {97, 122, 279}, },
            {{48, 100, -32}, {101, 101, 281}, {102, 122, 60}, },
            {{48, 98, -89}, {99, 99, 282}, {100, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 283}, {102, 122, 60}, },
            {{48, 109, -71}, {110, 110, 284}, {111, 122, 60}, },
            {{48, 109, -71}, {110, 110, 285}, {111, 122, 60}, },
            {{48, 100, -32}, {101, 101, 286}, {102, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 115, -67}, {116, 116, 287}, {117, 122, 60}, },
            {{59, 59, 288}, },
            {{46, 46, 289}, {48, 57, 290}, {59, 59, 288}, {65, 90, 291}, {95, 95, 292}, {97, 122, 291}, },
            {{46, 122, -281}, },
            {{48, 110, -30}, {111, 111, 293}, {112, 122, 60}, },
            {{48, 100, -32}, {101, 101, 294}, {102, 122, 60}, },
            {{48, 99, -156}, {100, 100, 295}, {101, 122, 60}, },
            {{48, 104, -85}, {105, 105, 296}, {106, 122, 60}, },
            {{48, 115, -67}, {116, 116, 297}, {117, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 114, -64}, {115, 115, 298}, {116, 122, 60}, },
            {},
            {{42, 122, -268}, },
            {{46, 122, -281}, },
            {{46, 122, -281}, },
            {{46, 122, -281}, },
            {{48, 101, -36}, {102, 102, 299}, {103, 122, 60}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 121, 60}, {122, 122, 300}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 301}, {102, 122, 60}, },
            {{48, 99, -156}, {100, 100, 302}, {101, 122, 60}, },
            {{48, 122, -25}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 83, 83, 83, 53, -1, 64, -1, -1, 68, 69, 62, 60, 72, 61, 73, 63, 79, 79, 67, 52, 50, 51, 81, 70, 71, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 65, -1, 66, 57, -1, 80, 58, -1, -1, 74, -1, 79, 55, 54, 56, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 11, 81, 81, 81, 81, 81, 81, 81, 21, 81, 24, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 59, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 19, 81, 81, 81, 26, 81, 81, 81, 31, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 46, 81, 81, 81, -1, 81, 81, 81, 3, 4, 81, 6, 81, 81, 81, 81, 81, 13, 81, 81, 81, 81, 20, 81, 81, 81, 81, 28, 29, 81, 75, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 42, 81, 81, 76, 47, 81, 81, -1, 81, 81, 2, 5, 7, 8, 81, 81, 81, 81, 81, 77, 16, 18, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 37, 81, 39, 81, 81, 43, 81, 81, 49, 81, 81, 81, 81, 12, 81, 15, 81, 81, 23, 81, 81, 30, 81, 81, 81, 35, 36, 38, 40, 81, 44, 81, 81, 81, 1, 81, 10, 14, 17, 81, -1, 81, 81, 32, 33, 81, 81, 81, 81, 0, 9, 81, -1, -1, -1, 81, 81, 81, 81, 81, 48, 81, 82, -1, -1, -1, -1, 81, 27, 34, 81, 45, 22, 25, 81, 81, 41, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
