/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class AExternClassfile extends PClassfile
{
    private final LinkedList _externClass_ = new TypedLinkedList(new ExternClass_Cast());

    public AExternClassfile()
    {
    }

    public AExternClassfile(
        List _externClass_)
    {
        {
            this._externClass_.clear();
            this._externClass_.addAll(_externClass_);
        }

    }

    public AExternClassfile(
        XPExternClass _externClass_)
    {
        if(_externClass_ != null)
        {
            while(_externClass_ instanceof X1PExternClass)
            {
                this._externClass_.addFirst(((X1PExternClass) _externClass_).getPExternClass());
                _externClass_ = ((X1PExternClass) _externClass_).getXPExternClass();
            }
            this._externClass_.addFirst(((X2PExternClass) _externClass_).getPExternClass());
        }

    }
    public Object clone()
    {
        return new AExternClassfile(
            cloneList(_externClass_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExternClassfile(this);
    }

    public LinkedList getExternClass()
    {
        return _externClass_;
    }

    public void setExternClass(List list)
    {
        _externClass_.clear();
        _externClass_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_externClass_);
    }

    void removeChild(Node child)
    {
        if(_externClass_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _externClass_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ExternClass_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PExternClass node = (PExternClass) o;

            if((node.parent() != null) &&
                (node.parent() != AExternClassfile.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AExternClassfile.this))
            {
                node.parent(AExternClassfile.this);
            }

            return node;
        }
    }
}
