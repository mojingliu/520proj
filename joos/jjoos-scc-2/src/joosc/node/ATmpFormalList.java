/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class ATmpFormalList extends PFormalList
{
    private PFormal _formal_;
    private final LinkedList _formalListTail_ = new TypedLinkedList(new FormalListTail_Cast());

    public ATmpFormalList()
    {
    }

    public ATmpFormalList(
        PFormal _formal_,
        List _formalListTail_)
    {
        setFormal(_formal_);

        {
            this._formalListTail_.clear();
            this._formalListTail_.addAll(_formalListTail_);
        }

    }

    public ATmpFormalList(
        PFormal _formal_,
        XPFormalListTail _formalListTail_)
    {
        setFormal(_formal_);

        if(_formalListTail_ != null)
        {
            while(_formalListTail_ instanceof X1PFormalListTail)
            {
                this._formalListTail_.addFirst(((X1PFormalListTail) _formalListTail_).getPFormalListTail());
                _formalListTail_ = ((X1PFormalListTail) _formalListTail_).getXPFormalListTail();
            }
            this._formalListTail_.addFirst(((X2PFormalListTail) _formalListTail_).getPFormalListTail());
        }

    }
    public Object clone()
    {
        return new ATmpFormalList(
            (PFormal) cloneNode(_formal_),
            cloneList(_formalListTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATmpFormalList(this);
    }

    public PFormal getFormal()
    {
        return _formal_;
    }

    public void setFormal(PFormal node)
    {
        if(_formal_ != null)
        {
            _formal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _formal_ = node;
    }

    public LinkedList getFormalListTail()
    {
        return _formalListTail_;
    }

    public void setFormalListTail(List list)
    {
        _formalListTail_.clear();
        _formalListTail_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_formal_)
            + toString(_formalListTail_);
    }

    void removeChild(Node child)
    {
        if(_formal_ == child)
        {
            _formal_ = null;
            return;
        }

        if(_formalListTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_formal_ == oldChild)
        {
            setFormal((PFormal) newChild);
            return;
        }

        for(ListIterator i = _formalListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class FormalListTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PFormalListTail node = (PFormalListTail) o;

            if((node.parent() != null) &&
                (node.parent() != ATmpFormalList.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ATmpFormalList.this))
            {
                node.parent(ATmpFormalList.this);
            }

            return node;
        }
    }
}
