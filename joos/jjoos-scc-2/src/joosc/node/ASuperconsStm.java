/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class ASuperconsStm extends PStm
{
    private TSuper _super_;
    private TLPar _lPar_;
    private PArgumentList _argumentList_;
    private TRPar _rPar_;
    private TSemicolon _semicolon_;

    public ASuperconsStm()
    {
    }

    public ASuperconsStm(
        TSuper _super_,
        TLPar _lPar_,
        PArgumentList _argumentList_,
        TRPar _rPar_,
        TSemicolon _semicolon_)
    {
        setSuper(_super_);

        setLPar(_lPar_);

        setArgumentList(_argumentList_);

        setRPar(_rPar_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new ASuperconsStm(
            (TSuper) cloneNode(_super_),
            (TLPar) cloneNode(_lPar_),
            (PArgumentList) cloneNode(_argumentList_),
            (TRPar) cloneNode(_rPar_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASuperconsStm(this);
    }

    public TSuper getSuper()
    {
        return _super_;
    }

    public void setSuper(TSuper node)
    {
        if(_super_ != null)
        {
            _super_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _super_ = node;
    }

    public TLPar getLPar()
    {
        return _lPar_;
    }

    public void setLPar(TLPar node)
    {
        if(_lPar_ != null)
        {
            _lPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lPar_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return _argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(_argumentList_ != null)
        {
            _argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _argumentList_ = node;
    }

    public TRPar getRPar()
    {
        return _rPar_;
    }

    public void setRPar(TRPar node)
    {
        if(_rPar_ != null)
        {
            _rPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rPar_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_super_)
            + toString(_lPar_)
            + toString(_argumentList_)
            + toString(_rPar_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_super_ == child)
        {
            _super_ = null;
            return;
        }

        if(_lPar_ == child)
        {
            _lPar_ = null;
            return;
        }

        if(_argumentList_ == child)
        {
            _argumentList_ = null;
            return;
        }

        if(_rPar_ == child)
        {
            _rPar_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_super_ == oldChild)
        {
            setSuper((TSuper) newChild);
            return;
        }

        if(_lPar_ == oldChild)
        {
            setLPar((TLPar) newChild);
            return;
        }

        if(_argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(_rPar_ == oldChild)
        {
            setRPar((TRPar) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }
}
