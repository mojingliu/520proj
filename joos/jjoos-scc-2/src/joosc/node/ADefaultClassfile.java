/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class ADefaultClassfile extends PClassfile
{
    private final LinkedList _importpath_ = new TypedLinkedList(new Importpath_Cast());
    private PClass _pClass_;

    public ADefaultClassfile()
    {
    }

    public ADefaultClassfile(
        List _importpath_,
        PClass _pClass_)
    {
        {
            this._importpath_.clear();
            this._importpath_.addAll(_importpath_);
        }

        setPClass(_pClass_);

    }

    public ADefaultClassfile(
        XTImportpath _importpath_,
        PClass _pClass_)
    {
        if(_importpath_ != null)
        {
            while(_importpath_ instanceof X1TImportpath)
            {
                this._importpath_.addFirst(((X1TImportpath) _importpath_).getTImportpath());
                _importpath_ = ((X1TImportpath) _importpath_).getXTImportpath();
            }
            this._importpath_.addFirst(((X2TImportpath) _importpath_).getTImportpath());
        }

        setPClass(_pClass_);

    }
    public Object clone()
    {
        return new ADefaultClassfile(
            cloneList(_importpath_),
            (PClass) cloneNode(_pClass_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADefaultClassfile(this);
    }

    public LinkedList getImportpath()
    {
        return _importpath_;
    }

    public void setImportpath(List list)
    {
        _importpath_.clear();
        _importpath_.addAll(list);
    }

    public PClass getPClass()
    {
        return _pClass_;
    }

    public void setPClass(PClass node)
    {
        if(_pClass_ != null)
        {
            _pClass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _pClass_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_importpath_)
            + toString(_pClass_);
    }

    void removeChild(Node child)
    {
        if(_importpath_.remove(child))
        {
            return;
        }

        if(_pClass_ == child)
        {
            _pClass_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _importpath_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_pClass_ == oldChild)
        {
            setPClass((PClass) newChild);
            return;
        }

    }

    private class Importpath_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TImportpath node = (TImportpath) o;

            if((node.parent() != null) &&
                (node.parent() != ADefaultClassfile.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ADefaultClassfile.this))
            {
                node.parent(ADefaultClassfile.this);
            }

            return node;
        }
    }
}
