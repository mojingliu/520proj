/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class ANeqEqExp extends PEqExp
{
    private PEqExp _left_;
    private TNeq _neq_;
    private PRelExp _right_;

    public ANeqEqExp()
    {
    }

    public ANeqEqExp(
        PEqExp _left_,
        TNeq _neq_,
        PRelExp _right_)
    {
        setLeft(_left_);

        setNeq(_neq_);

        setRight(_right_);

    }
    public Object clone()
    {
        return new ANeqEqExp(
            (PEqExp) cloneNode(_left_),
            (TNeq) cloneNode(_neq_),
            (PRelExp) cloneNode(_right_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANeqEqExp(this);
    }

    public PEqExp getLeft()
    {
        return _left_;
    }

    public void setLeft(PEqExp node)
    {
        if(_left_ != null)
        {
            _left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _left_ = node;
    }

    public TNeq getNeq()
    {
        return _neq_;
    }

    public void setNeq(TNeq node)
    {
        if(_neq_ != null)
        {
            _neq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _neq_ = node;
    }

    public PRelExp getRight()
    {
        return _right_;
    }

    public void setRight(PRelExp node)
    {
        if(_right_ != null)
        {
            _right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _right_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_left_)
            + toString(_neq_)
            + toString(_right_);
    }

    void removeChild(Node child)
    {
        if(_left_ == child)
        {
            _left_ = null;
            return;
        }

        if(_neq_ == child)
        {
            _neq_ = null;
            return;
        }

        if(_right_ == child)
        {
            _right_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_left_ == oldChild)
        {
            setLeft((PEqExp) newChild);
            return;
        }

        if(_neq_ == oldChild)
        {
            setNeq((TNeq) newChild);
            return;
        }

        if(_right_ == oldChild)
        {
            setRight((PRelExp) newChild);
            return;
        }

    }
}
