/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.analysis;

import joosc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseADefaultClassfile(ADefaultClassfile node);
    void caseAExternClassfile(AExternClassfile node);
    void caseAClass(AClass node);
    void caseAFinalClassmods(AFinalClassmods node);
    void caseAAbstractClassmods(AAbstractClassmods node);
    void caseAExternClass(AExternClass node);
    void caseAExtension(AExtension node);
    void caseAReferenceType(AReferenceType node);
    void caseACharType(ACharType node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAPolynullType(APolynullType node);
    void caseAVoidType(AVoidType node);
    void caseAField(AField node);
    void caseATmpField(ATmpField node);
    void caseAOnefield(AOnefield node);
    void caseAIdentifierList(AIdentifierList node);
    void caseATmpIdentifierList(ATmpIdentifierList node);
    void caseAIdentifierListTail(AIdentifierListTail node);
    void caseAConstructor(AConstructor node);
    void caseATmpConstructor(ATmpConstructor node);
    void caseAExternConstructor(AExternConstructor node);
    void caseAFormalList(AFormalList node);
    void caseATmpFormalList(ATmpFormalList node);
    void caseAFormalListTail(AFormalListTail node);
    void caseAFormal(AFormal node);
    void caseAModMethod(AModMethod node);
    void caseANonmodMethod(ANonmodMethod node);
    void caseAAbstractMethod(AAbstractMethod node);
    void caseAMainMethod(AMainMethod node);
    void caseAFinalMethodmods(AFinalMethodmods node);
    void caseASynchronizedMethodmods(ASynchronizedMethodmods node);
    void caseAFirstMainargv(AFirstMainargv node);
    void caseASecondMainargv(ASecondMainargv node);
    void caseAModExternMethod(AModExternMethod node);
    void caseANonmodExternMethod(ANonmodExternMethod node);
    void caseAFinalExternMethodmods(AFinalExternMethodmods node);
    void caseAAbstractExternMethodmods(AAbstractExternMethodmods node);
    void caseASynchronizedExternMethodmods(ASynchronizedExternMethodmods node);
    void caseAVoidReturntype(AVoidReturntype node);
    void caseANonvoidReturntype(ANonvoidReturntype node);
    void caseASimpleStm(ASimpleStm node);
    void caseASkipStm(ASkipStm node);
    void caseABlockStm(ABlockStm node);
    void caseAExpStm(AExpStm node);
    void caseAReturnStm(AReturnStm node);
    void caseADeclStm(ADeclStm node);
    void caseATmpdeclStm(ATmpdeclStm node);
    void caseASuperconsStm(ASuperconsStm node);
    void caseAIfStm(AIfStm node);
    void caseATmpIfelseStm(ATmpIfelseStm node);
    void caseAIfelseStm(AIfelseStm node);
    void caseAForStm(AForStm node);
    void caseAWhileStm(AWhileStm node);
    void caseAOnelocal(AOnelocal node);
    void caseASkipSimplestm(ASkipSimplestm node);
    void caseABlockSimplestm(ABlockSimplestm node);
    void caseAExpSimplestm(AExpSimplestm node);
    void caseAReturnSimplestm(AReturnSimplestm node);
    void caseASimpleStmNoShortIf(ASimpleStmNoShortIf node);
    void caseATmpIfelseStmNoShortIf(ATmpIfelseStmNoShortIf node);
    void caseAIfelseStmNoShortIf(AIfelseStmNoShortIf node);
    void caseATmpForStmNoShortIf(ATmpForStmNoShortIf node);
    void caseAForStmNoShortIf(AForStmNoShortIf node);
    void caseATmpWhileStmNoShortIf(ATmpWhileStmNoShortIf node);
    void caseAWhileStmNoShortIf(AWhileStmNoShortIf node);
    void caseAAssignStmExp(AAssignStmExp node);
    void caseACallStmExp(ACallStmExp node);
    void caseAIncStmExp(AIncStmExp node);
    void caseANewStmExp(ANewStmExp node);
    void caseAAssignment(AAssignment node);
    void caseADefaultExp(ADefaultExp node);
    void caseAAssignExp(AAssignExp node);
    void caseAOrExp(AOrExp node);
    void caseAAndExp(AAndExp node);
    void caseAEqExp(AEqExp node);
    void caseANeqExp(ANeqExp node);
    void caseALtExp(ALtExp node);
    void caseAGtExp(AGtExp node);
    void caseALeqExp(ALeqExp node);
    void caseAGeqExp(AGeqExp node);
    void caseAInstanceofExp(AInstanceofExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseAModExp(AModExp node);
    void caseAUminusExp(AUminusExp node);
    void caseANotExp(ANotExp node);
    void caseATmpcastExp(ATmpcastExp node);
    void caseACastExp(ACastExp node);
    void caseACasttocharExp(ACasttocharExp node);
    void caseAIdExp(AIdExp node);
    void caseAThisExp(AThisExp node);
    void caseAParenExp(AParenExp node);
    void caseANewExp(ANewExp node);
    void caseACallExp(ACallExp node);
    void caseAIntconstExp(AIntconstExp node);
    void caseATrueExp(ATrueExp node);
    void caseAFalseExp(AFalseExp node);
    void caseACharconstExp(ACharconstExp node);
    void caseAStringconstExp(AStringconstExp node);
    void caseANullExp(ANullExp node);
    void caseADefaultOrExp(ADefaultOrExp node);
    void caseAOrOrExp(AOrOrExp node);
    void caseADefaultAndExp(ADefaultAndExp node);
    void caseAAndAndExp(AAndAndExp node);
    void caseADefaultEqExp(ADefaultEqExp node);
    void caseAEqEqExp(AEqEqExp node);
    void caseANeqEqExp(ANeqEqExp node);
    void caseADefaultRelExp(ADefaultRelExp node);
    void caseALtRelExp(ALtRelExp node);
    void caseAGtRelExp(AGtRelExp node);
    void caseALeqRelExp(ALeqRelExp node);
    void caseAGeqRelExp(AGeqRelExp node);
    void caseAInstanceofRelExp(AInstanceofRelExp node);
    void caseADefaultAddExp(ADefaultAddExp node);
    void caseAPlusAddExp(APlusAddExp node);
    void caseAMinusAddExp(AMinusAddExp node);
    void caseADefaultMultExp(ADefaultMultExp node);
    void caseAMultMultExp(AMultMultExp node);
    void caseADivMultExp(ADivMultExp node);
    void caseAModMultExp(AModMultExp node);
    void caseADefaultUnaryExp(ADefaultUnaryExp node);
    void caseAMinusUnaryExp(AMinusUnaryExp node);
    void caseADefaultUnaryExpNotMinus(ADefaultUnaryExpNotMinus node);
    void caseANotUnaryExpNotMinus(ANotUnaryExpNotMinus node);
    void caseACastUnaryExpNotMinus(ACastUnaryExpNotMinus node);
    void caseANoncharCastExp(ANoncharCastExp node);
    void caseACharCastExp(ACharCastExp node);
    void caseAIdPostfixExp(AIdPostfixExp node);
    void caseAPrimaryPostfixExp(APrimaryPostfixExp node);
    void caseALiteralPrimaryExp(ALiteralPrimaryExp node);
    void caseAThisPrimaryExp(AThisPrimaryExp node);
    void caseAParenPrimaryExp(AParenPrimaryExp node);
    void caseANewPrimaryExp(ANewPrimaryExp node);
    void caseACallPrimaryExp(ACallPrimaryExp node);
    void caseAClassinstancecreation(AClassinstancecreation node);
    void caseAMethodinvocation(AMethodinvocation node);
    void caseATmpobjectReceiver(ATmpobjectReceiver node);
    void caseAObjectReceiver(AObjectReceiver node);
    void caseASuperReceiver(ASuperReceiver node);
    void caseAArgumentList(AArgumentList node);
    void caseATmpArgumentList(ATmpArgumentList node);
    void caseAArgumentListTail(AArgumentListTail node);
    void caseAIntLiteral(AIntLiteral node);
    void caseATrueLiteral(ATrueLiteral node);
    void caseAFalseLiteral(AFalseLiteral node);
    void caseACharLiteral(ACharLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseANullLiteral(ANullLiteral node);

    void caseTBlanks(TBlanks node);
    void caseTEolComment(TEolComment node);
    void caseTExtComment(TExtComment node);
    void caseTAbstract(TAbstract node);
    void caseTBoolean(TBoolean node);
    void caseTBreak(TBreak node);
    void caseTByte(TByte node);
    void caseTCase(TCase node);
    void caseTCatch(TCatch node);
    void caseTChar(TChar node);
    void caseTClass(TClass node);
    void caseTConst(TConst node);
    void caseTContinue(TContinue node);
    void caseTDefault(TDefault node);
    void caseTDo(TDo node);
    void caseTDouble(TDouble node);
    void caseTElse(TElse node);
    void caseTExtends(TExtends node);
    void caseTExtern(TExtern node);
    void caseTFinal(TFinal node);
    void caseTFinally(TFinally node);
    void caseTFloat(TFloat node);
    void caseTFor(TFor node);
    void caseTGoto(TGoto node);
    void caseTIf(TIf node);
    void caseTImplements(TImplements node);
    void caseTImport(TImport node);
    void caseTIn(TIn node);
    void caseTInstanceof(TInstanceof node);
    void caseTInt(TInt node);
    void caseTInterface(TInterface node);
    void caseTLong(TLong node);
    void caseTMain(TMain node);
    void caseTNative(TNative node);
    void caseTNew(TNew node);
    void caseTPackage(TPackage node);
    void caseTPrivate(TPrivate node);
    void caseTProtected(TProtected node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTShort(TShort node);
    void caseTStatic(TStatic node);
    void caseTSuper(TSuper node);
    void caseTSwitch(TSwitch node);
    void caseTSynchronized(TSynchronized node);
    void caseTThis(TThis node);
    void caseTThrow(TThrow node);
    void caseTThrows(TThrows node);
    void caseTTransient(TTransient node);
    void caseTTry(TTry node);
    void caseTVoid(TVoid node);
    void caseTVolatile(TVolatile node);
    void caseTWhile(TWhile node);
    void caseTAssign(TAssign node);
    void caseTGt(TGt node);
    void caseTLt(TLt node);
    void caseTNot(TNot node);
    void caseTEq(TEq node);
    void caseTLeq(TLeq node);
    void caseTGeq(TGeq node);
    void caseTNeq(TNeq node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTSemicolon(TSemicolon node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTInc(TInc node);
    void caseTNull(TNull node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTCharconst(TCharconst node);
    void caseTIntconst(TIntconst node);
    void caseTStringconst(TStringconst node);
    void caseTIdentifier(TIdentifier node);
    void caseTImportpath(TImportpath node);
    void caseEOF(EOF node);
}
