/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.analysis;

import joosc.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPClassfile().apply(this);
        outStart(node);
    }

    public void inADefaultClassfile(ADefaultClassfile node)
    {
        defaultIn(node);
    }

    public void outADefaultClassfile(ADefaultClassfile node)
    {
        defaultOut(node);
    }

    public void caseADefaultClassfile(ADefaultClassfile node)
    {
        inADefaultClassfile(node);
        if(node.getPClass() != null)
        {
            node.getPClass().apply(this);
        }
        {
            Object temp[] = node.getImportpath().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TImportpath) temp[i]).apply(this);
            }
        }
        outADefaultClassfile(node);
    }

    public void inAExternClassfile(AExternClassfile node)
    {
        defaultIn(node);
    }

    public void outAExternClassfile(AExternClassfile node)
    {
        defaultOut(node);
    }

    public void caseAExternClassfile(AExternClassfile node)
    {
        inAExternClassfile(node);
        {
            Object temp[] = node.getExternClass().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExternClass) temp[i]).apply(this);
            }
        }
        outAExternClassfile(node);
    }

    public void inAClass(AClass node)
    {
        defaultIn(node);
    }

    public void outAClass(AClass node)
    {
        defaultOut(node);
    }

    public void caseAClass(AClass node)
    {
        inAClass(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getMethod().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PMethod) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getConstructor().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PConstructor) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getField().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PField) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getExtension() != null)
        {
            node.getExtension().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTClass() != null)
        {
            node.getTClass().apply(this);
        }
        if(node.getClassmods() != null)
        {
            node.getClassmods().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAClass(node);
    }

    public void inAFinalClassmods(AFinalClassmods node)
    {
        defaultIn(node);
    }

    public void outAFinalClassmods(AFinalClassmods node)
    {
        defaultOut(node);
    }

    public void caseAFinalClassmods(AFinalClassmods node)
    {
        inAFinalClassmods(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAFinalClassmods(node);
    }

    public void inAAbstractClassmods(AAbstractClassmods node)
    {
        defaultIn(node);
    }

    public void outAAbstractClassmods(AAbstractClassmods node)
    {
        defaultOut(node);
    }

    public void caseAAbstractClassmods(AAbstractClassmods node)
    {
        inAAbstractClassmods(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        outAAbstractClassmods(node);
    }

    public void inAExternClass(AExternClass node)
    {
        defaultIn(node);
    }

    public void outAExternClass(AExternClass node)
    {
        defaultOut(node);
    }

    public void caseAExternClass(AExternClass node)
    {
        inAExternClass(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getExternMethod().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExternMethod) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getExternConstructor().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExternConstructor) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getExtension() != null)
        {
            node.getExtension().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTClass() != null)
        {
            node.getTClass().apply(this);
        }
        if(node.getClassmods() != null)
        {
            node.getClassmods().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getExtern() != null)
        {
            node.getExtern().apply(this);
        }
        outAExternClass(node);
    }

    public void inAExtension(AExtension node)
    {
        defaultIn(node);
    }

    public void outAExtension(AExtension node)
    {
        defaultOut(node);
    }

    public void caseAExtension(AExtension node)
    {
        inAExtension(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtends() != null)
        {
            node.getExtends().apply(this);
        }
        outAExtension(node);
    }

    public void inAReferenceType(AReferenceType node)
    {
        defaultIn(node);
    }

    public void outAReferenceType(AReferenceType node)
    {
        defaultOut(node);
    }

    public void caseAReferenceType(AReferenceType node)
    {
        inAReferenceType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAReferenceType(node);
    }

    public void inACharType(ACharType node)
    {
        defaultIn(node);
    }

    public void outACharType(ACharType node)
    {
        defaultOut(node);
    }

    public void caseACharType(ACharType node)
    {
        inACharType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAPolynullType(APolynullType node)
    {
        defaultIn(node);
    }

    public void outAPolynullType(APolynullType node)
    {
        defaultOut(node);
    }

    public void caseAPolynullType(APolynullType node)
    {
        inAPolynullType(node);
        outAPolynullType(node);
    }

    public void inAVoidType(AVoidType node)
    {
        defaultIn(node);
    }

    public void outAVoidType(AVoidType node)
    {
        defaultOut(node);
    }

    public void caseAVoidType(AVoidType node)
    {
        inAVoidType(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidType(node);
    }

    public void inAField(AField node)
    {
        defaultIn(node);
    }

    public void outAField(AField node)
    {
        defaultOut(node);
    }

    public void caseAField(AField node)
    {
        inAField(node);
        {
            Object temp[] = node.getOnefield().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((POnefield) temp[i]).apply(this);
            }
        }
        outAField(node);
    }

    public void inATmpField(ATmpField node)
    {
        defaultIn(node);
    }

    public void outATmpField(ATmpField node)
    {
        defaultOut(node);
    }

    public void caseATmpField(ATmpField node)
    {
        inATmpField(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getProtected() != null)
        {
            node.getProtected().apply(this);
        }
        outATmpField(node);
    }

    public void inAOnefield(AOnefield node)
    {
        defaultIn(node);
    }

    public void outAOnefield(AOnefield node)
    {
        defaultOut(node);
    }

    public void caseAOnefield(AOnefield node)
    {
        inAOnefield(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getProtected() != null)
        {
            node.getProtected().apply(this);
        }
        outAOnefield(node);
    }

    public void inAIdentifierList(AIdentifierList node)
    {
        defaultIn(node);
    }

    public void outAIdentifierList(AIdentifierList node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierList(AIdentifierList node)
    {
        inAIdentifierList(node);
        {
            Object temp[] = node.getIdentifier().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((TIdentifier) temp[i]).apply(this);
            }
        }
        outAIdentifierList(node);
    }

    public void inATmpIdentifierList(ATmpIdentifierList node)
    {
        defaultIn(node);
    }

    public void outATmpIdentifierList(ATmpIdentifierList node)
    {
        defaultOut(node);
    }

    public void caseATmpIdentifierList(ATmpIdentifierList node)
    {
        inATmpIdentifierList(node);
        {
            Object temp[] = node.getIdentifierListTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PIdentifierListTail) temp[i]).apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outATmpIdentifierList(node);
    }

    public void inAIdentifierListTail(AIdentifierListTail node)
    {
        defaultIn(node);
    }

    public void outAIdentifierListTail(AIdentifierListTail node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierListTail(AIdentifierListTail node)
    {
        inAIdentifierListTail(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAIdentifierListTail(node);
    }

    public void inAConstructor(AConstructor node)
    {
        defaultIn(node);
    }

    public void outAConstructor(AConstructor node)
    {
        defaultOut(node);
    }

    public void caseAConstructor(AConstructor node)
    {
        inAConstructor(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAConstructor(node);
    }

    public void inATmpConstructor(ATmpConstructor node)
    {
        defaultIn(node);
    }

    public void outATmpConstructor(ATmpConstructor node)
    {
        defaultOut(node);
    }

    public void caseATmpConstructor(ATmpConstructor node)
    {
        inATmpConstructor(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getSuperRPar() != null)
        {
            node.getSuperRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getSuperLPar() != null)
        {
            node.getSuperLPar().apply(this);
        }
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outATmpConstructor(node);
    }

    public void inAExternConstructor(AExternConstructor node)
    {
        defaultIn(node);
    }

    public void outAExternConstructor(AExternConstructor node)
    {
        defaultOut(node);
    }

    public void caseAExternConstructor(AExternConstructor node)
    {
        inAExternConstructor(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAExternConstructor(node);
    }

    public void inAFormalList(AFormalList node)
    {
        defaultIn(node);
    }

    public void outAFormalList(AFormalList node)
    {
        defaultOut(node);
    }

    public void caseAFormalList(AFormalList node)
    {
        inAFormalList(node);
        {
            Object temp[] = node.getFormal().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        outAFormalList(node);
    }

    public void inATmpFormalList(ATmpFormalList node)
    {
        defaultIn(node);
    }

    public void outATmpFormalList(ATmpFormalList node)
    {
        defaultOut(node);
    }

    public void caseATmpFormalList(ATmpFormalList node)
    {
        inATmpFormalList(node);
        {
            Object temp[] = node.getFormalListTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PFormalListTail) temp[i]).apply(this);
            }
        }
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        outATmpFormalList(node);
    }

    public void inAFormalListTail(AFormalListTail node)
    {
        defaultIn(node);
    }

    public void outAFormalListTail(AFormalListTail node)
    {
        defaultOut(node);
    }

    public void caseAFormalListTail(AFormalListTail node)
    {
        inAFormalListTail(node);
        if(node.getFormal() != null)
        {
            node.getFormal().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAFormalListTail(node);
    }

    public void inAFormal(AFormal node)
    {
        defaultIn(node);
    }

    public void outAFormal(AFormal node)
    {
        defaultOut(node);
    }

    public void caseAFormal(AFormal node)
    {
        inAFormal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFormal(node);
    }

    public void inAModMethod(AModMethod node)
    {
        defaultIn(node);
    }

    public void outAModMethod(AModMethod node)
    {
        defaultOut(node);
    }

    public void caseAModMethod(AModMethod node)
    {
        inAModMethod(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getMethodmods() != null)
        {
            node.getMethodmods().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAModMethod(node);
    }

    public void inANonmodMethod(ANonmodMethod node)
    {
        defaultIn(node);
    }

    public void outANonmodMethod(ANonmodMethod node)
    {
        defaultOut(node);
    }

    public void caseANonmodMethod(ANonmodMethod node)
    {
        inANonmodMethod(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outANonmodMethod(node);
    }

    public void inAAbstractMethod(AAbstractMethod node)
    {
        defaultIn(node);
    }

    public void outAAbstractMethod(AAbstractMethod node)
    {
        defaultOut(node);
    }

    public void caseAAbstractMethod(AAbstractMethod node)
    {
        inAAbstractMethod(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAAbstractMethod(node);
    }

    public void inAMainMethod(AMainMethod node)
    {
        defaultIn(node);
    }

    public void outAMainMethod(AMainMethod node)
    {
        defaultOut(node);
    }

    public void caseAMainMethod(AMainMethod node)
    {
        inAMainMethod(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getMainargv() != null)
        {
            node.getMainargv().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAMainMethod(node);
    }

    public void inAFinalMethodmods(AFinalMethodmods node)
    {
        defaultIn(node);
    }

    public void outAFinalMethodmods(AFinalMethodmods node)
    {
        defaultOut(node);
    }

    public void caseAFinalMethodmods(AFinalMethodmods node)
    {
        inAFinalMethodmods(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAFinalMethodmods(node);
    }

    public void inASynchronizedMethodmods(ASynchronizedMethodmods node)
    {
        defaultIn(node);
    }

    public void outASynchronizedMethodmods(ASynchronizedMethodmods node)
    {
        defaultOut(node);
    }

    public void caseASynchronizedMethodmods(ASynchronizedMethodmods node)
    {
        inASynchronizedMethodmods(node);
        if(node.getSynchronized() != null)
        {
            node.getSynchronized().apply(this);
        }
        outASynchronizedMethodmods(node);
    }

    public void inAFirstMainargv(AFirstMainargv node)
    {
        defaultIn(node);
    }

    public void outAFirstMainargv(AFirstMainargv node)
    {
        defaultOut(node);
    }

    public void caseAFirstMainargv(AFirstMainargv node)
    {
        inAFirstMainargv(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAFirstMainargv(node);
    }

    public void inASecondMainargv(ASecondMainargv node)
    {
        defaultIn(node);
    }

    public void outASecondMainargv(ASecondMainargv node)
    {
        defaultOut(node);
    }

    public void caseASecondMainargv(ASecondMainargv node)
    {
        inASecondMainargv(node);
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outASecondMainargv(node);
    }

    public void inAModExternMethod(AModExternMethod node)
    {
        defaultIn(node);
    }

    public void outAModExternMethod(AModExternMethod node)
    {
        defaultOut(node);
    }

    public void caseAModExternMethod(AModExternMethod node)
    {
        inAModExternMethod(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getExternMethodmods() != null)
        {
            node.getExternMethodmods().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAModExternMethod(node);
    }

    public void inANonmodExternMethod(ANonmodExternMethod node)
    {
        defaultIn(node);
    }

    public void outANonmodExternMethod(ANonmodExternMethod node)
    {
        defaultOut(node);
    }

    public void caseANonmodExternMethod(ANonmodExternMethod node)
    {
        inANonmodExternMethod(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outANonmodExternMethod(node);
    }

    public void inAFinalExternMethodmods(AFinalExternMethodmods node)
    {
        defaultIn(node);
    }

    public void outAFinalExternMethodmods(AFinalExternMethodmods node)
    {
        defaultOut(node);
    }

    public void caseAFinalExternMethodmods(AFinalExternMethodmods node)
    {
        inAFinalExternMethodmods(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAFinalExternMethodmods(node);
    }

    public void inAAbstractExternMethodmods(AAbstractExternMethodmods node)
    {
        defaultIn(node);
    }

    public void outAAbstractExternMethodmods(AAbstractExternMethodmods node)
    {
        defaultOut(node);
    }

    public void caseAAbstractExternMethodmods(AAbstractExternMethodmods node)
    {
        inAAbstractExternMethodmods(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        outAAbstractExternMethodmods(node);
    }

    public void inASynchronizedExternMethodmods(ASynchronizedExternMethodmods node)
    {
        defaultIn(node);
    }

    public void outASynchronizedExternMethodmods(ASynchronizedExternMethodmods node)
    {
        defaultOut(node);
    }

    public void caseASynchronizedExternMethodmods(ASynchronizedExternMethodmods node)
    {
        inASynchronizedExternMethodmods(node);
        if(node.getSynchronized() != null)
        {
            node.getSynchronized().apply(this);
        }
        outASynchronizedExternMethodmods(node);
    }

    public void inAVoidReturntype(AVoidReturntype node)
    {
        defaultIn(node);
    }

    public void outAVoidReturntype(AVoidReturntype node)
    {
        defaultOut(node);
    }

    public void caseAVoidReturntype(AVoidReturntype node)
    {
        inAVoidReturntype(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidReturntype(node);
    }

    public void inANonvoidReturntype(ANonvoidReturntype node)
    {
        defaultIn(node);
    }

    public void outANonvoidReturntype(ANonvoidReturntype node)
    {
        defaultOut(node);
    }

    public void caseANonvoidReturntype(ANonvoidReturntype node)
    {
        inANonvoidReturntype(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outANonvoidReturntype(node);
    }

    public void inASimpleStm(ASimpleStm node)
    {
        defaultIn(node);
    }

    public void outASimpleStm(ASimpleStm node)
    {
        defaultOut(node);
    }

    public void caseASimpleStm(ASimpleStm node)
    {
        inASimpleStm(node);
        if(node.getSimplestm() != null)
        {
            node.getSimplestm().apply(this);
        }
        outASimpleStm(node);
    }

    public void inASkipStm(ASkipStm node)
    {
        defaultIn(node);
    }

    public void outASkipStm(ASkipStm node)
    {
        defaultOut(node);
    }

    public void caseASkipStm(ASkipStm node)
    {
        inASkipStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASkipStm(node);
    }

    public void inABlockStm(ABlockStm node)
    {
        defaultIn(node);
    }

    public void outABlockStm(ABlockStm node)
    {
        defaultOut(node);
    }

    public void caseABlockStm(ABlockStm node)
    {
        inABlockStm(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABlockStm(node);
    }

    public void inAExpStm(AExpStm node)
    {
        defaultIn(node);
    }

    public void outAExpStm(AExpStm node)
    {
        defaultOut(node);
    }

    public void caseAExpStm(AExpStm node)
    {
        inAExpStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getStmExp() != null)
        {
            node.getStmExp().apply(this);
        }
        outAExpStm(node);
    }

    public void inAReturnStm(AReturnStm node)
    {
        defaultIn(node);
    }

    public void outAReturnStm(AReturnStm node)
    {
        defaultOut(node);
    }

    public void caseAReturnStm(AReturnStm node)
    {
        inAReturnStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnStm(node);
    }

    public void inADeclStm(ADeclStm node)
    {
        defaultIn(node);
    }

    public void outADeclStm(ADeclStm node)
    {
        defaultOut(node);
    }

    public void caseADeclStm(ADeclStm node)
    {
        inADeclStm(node);
        {
            Object temp[] = node.getOnelocal().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((POnelocal) temp[i]).apply(this);
            }
        }
        outADeclStm(node);
    }

    public void inATmpdeclStm(ATmpdeclStm node)
    {
        defaultIn(node);
    }

    public void outATmpdeclStm(ATmpdeclStm node)
    {
        defaultOut(node);
    }

    public void caseATmpdeclStm(ATmpdeclStm node)
    {
        inATmpdeclStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outATmpdeclStm(node);
    }

    public void inASuperconsStm(ASuperconsStm node)
    {
        defaultIn(node);
    }

    public void outASuperconsStm(ASuperconsStm node)
    {
        defaultOut(node);
    }

    public void caseASuperconsStm(ASuperconsStm node)
    {
        inASuperconsStm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        outASuperconsStm(node);
    }

    public void inAIfStm(AIfStm node)
    {
        defaultIn(node);
    }

    public void outAIfStm(AIfStm node)
    {
        defaultOut(node);
    }

    public void caseAIfStm(AIfStm node)
    {
        inAIfStm(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStm(node);
    }

    public void inATmpIfelseStm(ATmpIfelseStm node)
    {
        defaultIn(node);
    }

    public void outATmpIfelseStm(ATmpIfelseStm node)
    {
        defaultOut(node);
    }

    public void caseATmpIfelseStm(ATmpIfelseStm node)
    {
        inATmpIfelseStm(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStmNoShortIf() != null)
        {
            node.getStmNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outATmpIfelseStm(node);
    }

    public void inAIfelseStm(AIfelseStm node)
    {
        defaultIn(node);
    }

    public void outAIfelseStm(AIfelseStm node)
    {
        defaultOut(node);
    }

    public void caseAIfelseStm(AIfelseStm node)
    {
        inAIfelseStm(node);
        if(node.getElseStm() != null)
        {
            node.getElseStm().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThenStm() != null)
        {
            node.getThenStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfelseStm(node);
    }

    public void inAForStm(AForStm node)
    {
        defaultIn(node);
    }

    public void outAForStm(AForStm node)
    {
        defaultOut(node);
    }

    public void caseAForStm(AForStm node)
    {
        inAForStm(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getUpdater() != null)
        {
            node.getUpdater().apply(this);
        }
        if(node.getSemicolon2() != null)
        {
            node.getSemicolon2().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemicolon1() != null)
        {
            node.getSemicolon1().apply(this);
        }
        if(node.getInitializer() != null)
        {
            node.getInitializer().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForStm(node);
    }

    public void inAWhileStm(AWhileStm node)
    {
        defaultIn(node);
    }

    public void outAWhileStm(AWhileStm node)
    {
        defaultOut(node);
    }

    public void caseAWhileStm(AWhileStm node)
    {
        inAWhileStm(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStm(node);
    }

    public void inAOnelocal(AOnelocal node)
    {
        defaultIn(node);
    }

    public void outAOnelocal(AOnelocal node)
    {
        defaultOut(node);
    }

    public void caseAOnelocal(AOnelocal node)
    {
        inAOnelocal(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAOnelocal(node);
    }

    public void inASkipSimplestm(ASkipSimplestm node)
    {
        defaultIn(node);
    }

    public void outASkipSimplestm(ASkipSimplestm node)
    {
        defaultOut(node);
    }

    public void caseASkipSimplestm(ASkipSimplestm node)
    {
        inASkipSimplestm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outASkipSimplestm(node);
    }

    public void inABlockSimplestm(ABlockSimplestm node)
    {
        defaultIn(node);
    }

    public void outABlockSimplestm(ABlockSimplestm node)
    {
        defaultOut(node);
    }

    public void caseABlockSimplestm(ABlockSimplestm node)
    {
        inABlockSimplestm(node);
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        {
            Object temp[] = node.getStm().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        outABlockSimplestm(node);
    }

    public void inAExpSimplestm(AExpSimplestm node)
    {
        defaultIn(node);
    }

    public void outAExpSimplestm(AExpSimplestm node)
    {
        defaultOut(node);
    }

    public void caseAExpSimplestm(AExpSimplestm node)
    {
        inAExpSimplestm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getStmExp() != null)
        {
            node.getStmExp().apply(this);
        }
        outAExpSimplestm(node);
    }

    public void inAReturnSimplestm(AReturnSimplestm node)
    {
        defaultIn(node);
    }

    public void outAReturnSimplestm(AReturnSimplestm node)
    {
        defaultOut(node);
    }

    public void caseAReturnSimplestm(AReturnSimplestm node)
    {
        inAReturnSimplestm(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnSimplestm(node);
    }

    public void inASimpleStmNoShortIf(ASimpleStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outASimpleStmNoShortIf(ASimpleStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseASimpleStmNoShortIf(ASimpleStmNoShortIf node)
    {
        inASimpleStmNoShortIf(node);
        if(node.getSimplestm() != null)
        {
            node.getSimplestm().apply(this);
        }
        outASimpleStmNoShortIf(node);
    }

    public void inATmpIfelseStmNoShortIf(ATmpIfelseStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outATmpIfelseStmNoShortIf(ATmpIfelseStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseATmpIfelseStmNoShortIf(ATmpIfelseStmNoShortIf node)
    {
        inATmpIfelseStmNoShortIf(node);
        if(node.getElseStmNoShortIf() != null)
        {
            node.getElseStmNoShortIf().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThenStmNoShortIf() != null)
        {
            node.getThenStmNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outATmpIfelseStmNoShortIf(node);
    }

    public void inAIfelseStmNoShortIf(AIfelseStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfelseStmNoShortIf(AIfelseStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAIfelseStmNoShortIf(AIfelseStmNoShortIf node)
    {
        inAIfelseStmNoShortIf(node);
        if(node.getElseStm() != null)
        {
            node.getElseStm().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThenStm() != null)
        {
            node.getThenStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfelseStmNoShortIf(node);
    }

    public void inATmpForStmNoShortIf(ATmpForStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outATmpForStmNoShortIf(ATmpForStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseATmpForStmNoShortIf(ATmpForStmNoShortIf node)
    {
        inATmpForStmNoShortIf(node);
        if(node.getStmNoShortIf() != null)
        {
            node.getStmNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getUpdater() != null)
        {
            node.getUpdater().apply(this);
        }
        if(node.getSemicolon2() != null)
        {
            node.getSemicolon2().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemicolon1() != null)
        {
            node.getSemicolon1().apply(this);
        }
        if(node.getInitializer() != null)
        {
            node.getInitializer().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outATmpForStmNoShortIf(node);
    }

    public void inAForStmNoShortIf(AForStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAForStmNoShortIf(AForStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAForStmNoShortIf(AForStmNoShortIf node)
    {
        inAForStmNoShortIf(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getUpdater() != null)
        {
            node.getUpdater().apply(this);
        }
        if(node.getSemicolon2() != null)
        {
            node.getSemicolon2().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSemicolon1() != null)
        {
            node.getSemicolon1().apply(this);
        }
        if(node.getInitializer() != null)
        {
            node.getInitializer().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForStmNoShortIf(node);
    }

    public void inATmpWhileStmNoShortIf(ATmpWhileStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outATmpWhileStmNoShortIf(ATmpWhileStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseATmpWhileStmNoShortIf(ATmpWhileStmNoShortIf node)
    {
        inATmpWhileStmNoShortIf(node);
        if(node.getStmNoShortIf() != null)
        {
            node.getStmNoShortIf().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outATmpWhileStmNoShortIf(node);
    }

    public void inAWhileStmNoShortIf(AWhileStmNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileStmNoShortIf(AWhileStmNoShortIf node)
    {
        defaultOut(node);
    }

    public void caseAWhileStmNoShortIf(AWhileStmNoShortIf node)
    {
        inAWhileStmNoShortIf(node);
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStmNoShortIf(node);
    }

    public void inAAssignStmExp(AAssignStmExp node)
    {
        defaultIn(node);
    }

    public void outAAssignStmExp(AAssignStmExp node)
    {
        defaultOut(node);
    }

    public void caseAAssignStmExp(AAssignStmExp node)
    {
        inAAssignStmExp(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignStmExp(node);
    }

    public void inACallStmExp(ACallStmExp node)
    {
        defaultIn(node);
    }

    public void outACallStmExp(ACallStmExp node)
    {
        defaultOut(node);
    }

    public void caseACallStmExp(ACallStmExp node)
    {
        inACallStmExp(node);
        if(node.getMethodinvocation() != null)
        {
            node.getMethodinvocation().apply(this);
        }
        outACallStmExp(node);
    }

    public void inAIncStmExp(AIncStmExp node)
    {
        defaultIn(node);
    }

    public void outAIncStmExp(AIncStmExp node)
    {
        defaultOut(node);
    }

    public void caseAIncStmExp(AIncStmExp node)
    {
        inAIncStmExp(node);
        if(node.getInc() != null)
        {
            node.getInc().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIncStmExp(node);
    }

    public void inANewStmExp(ANewStmExp node)
    {
        defaultIn(node);
    }

    public void outANewStmExp(ANewStmExp node)
    {
        defaultOut(node);
    }

    public void caseANewStmExp(ANewStmExp node)
    {
        inANewStmExp(node);
        if(node.getClassinstancecreation() != null)
        {
            node.getClassinstancecreation().apply(this);
        }
        outANewStmExp(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignment(node);
    }

    public void inADefaultExp(ADefaultExp node)
    {
        defaultIn(node);
    }

    public void outADefaultExp(ADefaultExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultExp(ADefaultExp node)
    {
        inADefaultExp(node);
        if(node.getOrExp() != null)
        {
            node.getOrExp().apply(this);
        }
        outADefaultExp(node);
    }

    public void inAAssignExp(AAssignExp node)
    {
        defaultIn(node);
    }

    public void outAAssignExp(AAssignExp node)
    {
        defaultOut(node);
    }

    public void caseAAssignExp(AAssignExp node)
    {
        inAAssignExp(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExp(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqExp(node);
    }

    public void inANeqExp(ANeqExp node)
    {
        defaultIn(node);
    }

    public void outANeqExp(ANeqExp node)
    {
        defaultOut(node);
    }

    public void caseANeqExp(ANeqExp node)
    {
        inANeqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANeqExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtExp(node);
    }

    public void inALeqExp(ALeqExp node)
    {
        defaultIn(node);
    }

    public void outALeqExp(ALeqExp node)
    {
        defaultOut(node);
    }

    public void caseALeqExp(ALeqExp node)
    {
        inALeqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeq() != null)
        {
            node.getLeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALeqExp(node);
    }

    public void inAGeqExp(AGeqExp node)
    {
        defaultIn(node);
    }

    public void outAGeqExp(AGeqExp node)
    {
        defaultOut(node);
    }

    public void caseAGeqExp(AGeqExp node)
    {
        inAGeqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGeq() != null)
        {
            node.getGeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGeqExp(node);
    }

    public void inAInstanceofExp(AInstanceofExp node)
    {
        defaultIn(node);
    }

    public void outAInstanceofExp(AInstanceofExp node)
    {
        defaultOut(node);
    }

    public void caseAInstanceofExp(AInstanceofExp node)
    {
        inAInstanceofExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAInstanceofExp(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExp(node);
    }

    public void inAUminusExp(AUminusExp node)
    {
        defaultIn(node);
    }

    public void outAUminusExp(AUminusExp node)
    {
        defaultOut(node);
    }

    public void caseAUminusExp(AUminusExp node)
    {
        inAUminusExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAUminusExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotExp(node);
    }

    public void inATmpcastExp(ATmpcastExp node)
    {
        defaultIn(node);
    }

    public void outATmpcastExp(ATmpcastExp node)
    {
        defaultOut(node);
    }

    public void caseATmpcastExp(ATmpcastExp node)
    {
        inATmpcastExp(node);
        if(node.getCastee() != null)
        {
            node.getCastee().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getCaster() != null)
        {
            node.getCaster().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outATmpcastExp(node);
    }

    public void inACastExp(ACastExp node)
    {
        defaultIn(node);
    }

    public void outACastExp(ACastExp node)
    {
        defaultOut(node);
    }

    public void caseACastExp(ACastExp node)
    {
        inACastExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outACastExp(node);
    }

    public void inACasttocharExp(ACasttocharExp node)
    {
        defaultIn(node);
    }

    public void outACasttocharExp(ACasttocharExp node)
    {
        defaultOut(node);
    }

    public void caseACasttocharExp(ACasttocharExp node)
    {
        inACasttocharExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outACasttocharExp(node);
    }

    public void inAIdExp(AIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdExp(AIdExp node)
    {
        defaultOut(node);
    }

    public void caseAIdExp(AIdExp node)
    {
        inAIdExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdExp(node);
    }

    public void inAThisExp(AThisExp node)
    {
        defaultIn(node);
    }

    public void outAThisExp(AThisExp node)
    {
        defaultOut(node);
    }

    public void caseAThisExp(AThisExp node)
    {
        inAThisExp(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisExp(node);
    }

    public void inAParenExp(AParenExp node)
    {
        defaultIn(node);
    }

    public void outAParenExp(AParenExp node)
    {
        defaultOut(node);
    }

    public void caseAParenExp(AParenExp node)
    {
        inAParenExp(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParenExp(node);
    }

    public void inANewExp(ANewExp node)
    {
        defaultIn(node);
    }

    public void outANewExp(ANewExp node)
    {
        defaultOut(node);
    }

    public void caseANewExp(ANewExp node)
    {
        inANewExp(node);
        if(node.getClassinstancecreation() != null)
        {
            node.getClassinstancecreation().apply(this);
        }
        outANewExp(node);
    }

    public void inACallExp(ACallExp node)
    {
        defaultIn(node);
    }

    public void outACallExp(ACallExp node)
    {
        defaultOut(node);
    }

    public void caseACallExp(ACallExp node)
    {
        inACallExp(node);
        if(node.getMethodinvocation() != null)
        {
            node.getMethodinvocation().apply(this);
        }
        outACallExp(node);
    }

    public void inAIntconstExp(AIntconstExp node)
    {
        defaultIn(node);
    }

    public void outAIntconstExp(AIntconstExp node)
    {
        defaultOut(node);
    }

    public void caseAIntconstExp(AIntconstExp node)
    {
        inAIntconstExp(node);
        if(node.getIntconst() != null)
        {
            node.getIntconst().apply(this);
        }
        outAIntconstExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExp(node);
    }

    public void inACharconstExp(ACharconstExp node)
    {
        defaultIn(node);
    }

    public void outACharconstExp(ACharconstExp node)
    {
        defaultOut(node);
    }

    public void caseACharconstExp(ACharconstExp node)
    {
        inACharconstExp(node);
        if(node.getCharconst() != null)
        {
            node.getCharconst().apply(this);
        }
        outACharconstExp(node);
    }

    public void inAStringconstExp(AStringconstExp node)
    {
        defaultIn(node);
    }

    public void outAStringconstExp(AStringconstExp node)
    {
        defaultOut(node);
    }

    public void caseAStringconstExp(AStringconstExp node)
    {
        inAStringconstExp(node);
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        outAStringconstExp(node);
    }

    public void inANullExp(ANullExp node)
    {
        defaultIn(node);
    }

    public void outANullExp(ANullExp node)
    {
        defaultOut(node);
    }

    public void caseANullExp(ANullExp node)
    {
        inANullExp(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullExp(node);
    }

    public void inADefaultOrExp(ADefaultOrExp node)
    {
        defaultIn(node);
    }

    public void outADefaultOrExp(ADefaultOrExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultOrExp(ADefaultOrExp node)
    {
        inADefaultOrExp(node);
        if(node.getAndExp() != null)
        {
            node.getAndExp().apply(this);
        }
        outADefaultOrExp(node);
    }

    public void inAOrOrExp(AOrOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrOrExp(AOrOrExp node)
    {
        defaultOut(node);
    }

    public void caseAOrOrExp(AOrOrExp node)
    {
        inAOrOrExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrOrExp(node);
    }

    public void inADefaultAndExp(ADefaultAndExp node)
    {
        defaultIn(node);
    }

    public void outADefaultAndExp(ADefaultAndExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultAndExp(ADefaultAndExp node)
    {
        inADefaultAndExp(node);
        if(node.getEqExp() != null)
        {
            node.getEqExp().apply(this);
        }
        outADefaultAndExp(node);
    }

    public void inAAndAndExp(AAndAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndAndExp(AAndAndExp node)
    {
        defaultOut(node);
    }

    public void caseAAndAndExp(AAndAndExp node)
    {
        inAAndAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndAndExp(node);
    }

    public void inADefaultEqExp(ADefaultEqExp node)
    {
        defaultIn(node);
    }

    public void outADefaultEqExp(ADefaultEqExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultEqExp(ADefaultEqExp node)
    {
        inADefaultEqExp(node);
        if(node.getRelExp() != null)
        {
            node.getRelExp().apply(this);
        }
        outADefaultEqExp(node);
    }

    public void inAEqEqExp(AEqEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqEqExp(AEqEqExp node)
    {
        defaultOut(node);
    }

    public void caseAEqEqExp(AEqEqExp node)
    {
        inAEqEqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqEqExp(node);
    }

    public void inANeqEqExp(ANeqEqExp node)
    {
        defaultIn(node);
    }

    public void outANeqEqExp(ANeqEqExp node)
    {
        defaultOut(node);
    }

    public void caseANeqEqExp(ANeqEqExp node)
    {
        inANeqEqExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANeqEqExp(node);
    }

    public void inADefaultRelExp(ADefaultRelExp node)
    {
        defaultIn(node);
    }

    public void outADefaultRelExp(ADefaultRelExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultRelExp(ADefaultRelExp node)
    {
        inADefaultRelExp(node);
        if(node.getAddExp() != null)
        {
            node.getAddExp().apply(this);
        }
        outADefaultRelExp(node);
    }

    public void inALtRelExp(ALtRelExp node)
    {
        defaultIn(node);
    }

    public void outALtRelExp(ALtRelExp node)
    {
        defaultOut(node);
    }

    public void caseALtRelExp(ALtRelExp node)
    {
        inALtRelExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALtRelExp(node);
    }

    public void inAGtRelExp(AGtRelExp node)
    {
        defaultIn(node);
    }

    public void outAGtRelExp(AGtRelExp node)
    {
        defaultOut(node);
    }

    public void caseAGtRelExp(AGtRelExp node)
    {
        inAGtRelExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGtRelExp(node);
    }

    public void inALeqRelExp(ALeqRelExp node)
    {
        defaultIn(node);
    }

    public void outALeqRelExp(ALeqRelExp node)
    {
        defaultOut(node);
    }

    public void caseALeqRelExp(ALeqRelExp node)
    {
        inALeqRelExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeq() != null)
        {
            node.getLeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALeqRelExp(node);
    }

    public void inAGeqRelExp(AGeqRelExp node)
    {
        defaultIn(node);
    }

    public void outAGeqRelExp(AGeqRelExp node)
    {
        defaultOut(node);
    }

    public void caseAGeqRelExp(AGeqRelExp node)
    {
        inAGeqRelExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGeq() != null)
        {
            node.getGeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGeqRelExp(node);
    }

    public void inAInstanceofRelExp(AInstanceofRelExp node)
    {
        defaultIn(node);
    }

    public void outAInstanceofRelExp(AInstanceofRelExp node)
    {
        defaultOut(node);
    }

    public void caseAInstanceofRelExp(AInstanceofRelExp node)
    {
        inAInstanceofRelExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getInstanceof() != null)
        {
            node.getInstanceof().apply(this);
        }
        if(node.getRelExp() != null)
        {
            node.getRelExp().apply(this);
        }
        outAInstanceofRelExp(node);
    }

    public void inADefaultAddExp(ADefaultAddExp node)
    {
        defaultIn(node);
    }

    public void outADefaultAddExp(ADefaultAddExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultAddExp(ADefaultAddExp node)
    {
        inADefaultAddExp(node);
        if(node.getMultExp() != null)
        {
            node.getMultExp().apply(this);
        }
        outADefaultAddExp(node);
    }

    public void inAPlusAddExp(APlusAddExp node)
    {
        defaultIn(node);
    }

    public void outAPlusAddExp(APlusAddExp node)
    {
        defaultOut(node);
    }

    public void caseAPlusAddExp(APlusAddExp node)
    {
        inAPlusAddExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAPlusAddExp(node);
    }

    public void inAMinusAddExp(AMinusAddExp node)
    {
        defaultIn(node);
    }

    public void outAMinusAddExp(AMinusAddExp node)
    {
        defaultOut(node);
    }

    public void caseAMinusAddExp(AMinusAddExp node)
    {
        inAMinusAddExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMinusAddExp(node);
    }

    public void inADefaultMultExp(ADefaultMultExp node)
    {
        defaultIn(node);
    }

    public void outADefaultMultExp(ADefaultMultExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultMultExp(ADefaultMultExp node)
    {
        inADefaultMultExp(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        outADefaultMultExp(node);
    }

    public void inAMultMultExp(AMultMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultMultExp(AMultMultExp node)
    {
        defaultOut(node);
    }

    public void caseAMultMultExp(AMultMultExp node)
    {
        inAMultMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultMultExp(node);
    }

    public void inADivMultExp(ADivMultExp node)
    {
        defaultIn(node);
    }

    public void outADivMultExp(ADivMultExp node)
    {
        defaultOut(node);
    }

    public void caseADivMultExp(ADivMultExp node)
    {
        inADivMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivMultExp(node);
    }

    public void inAModMultExp(AModMultExp node)
    {
        defaultIn(node);
    }

    public void outAModMultExp(AModMultExp node)
    {
        defaultOut(node);
    }

    public void caseAModMultExp(AModMultExp node)
    {
        inAModMultExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModMultExp(node);
    }

    public void inADefaultUnaryExp(ADefaultUnaryExp node)
    {
        defaultIn(node);
    }

    public void outADefaultUnaryExp(ADefaultUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseADefaultUnaryExp(ADefaultUnaryExp node)
    {
        inADefaultUnaryExp(node);
        if(node.getUnaryExpNotMinus() != null)
        {
            node.getUnaryExpNotMinus().apply(this);
        }
        outADefaultUnaryExp(node);
    }

    public void inAMinusUnaryExp(AMinusUnaryExp node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryExp(AMinusUnaryExp node)
    {
        defaultOut(node);
    }

    public void caseAMinusUnaryExp(AMinusUnaryExp node)
    {
        inAMinusUnaryExp(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryExp(node);
    }

    public void inADefaultUnaryExpNotMinus(ADefaultUnaryExpNotMinus node)
    {
        defaultIn(node);
    }

    public void outADefaultUnaryExpNotMinus(ADefaultUnaryExpNotMinus node)
    {
        defaultOut(node);
    }

    public void caseADefaultUnaryExpNotMinus(ADefaultUnaryExpNotMinus node)
    {
        inADefaultUnaryExpNotMinus(node);
        if(node.getPostfixExp() != null)
        {
            node.getPostfixExp().apply(this);
        }
        outADefaultUnaryExpNotMinus(node);
    }

    public void inANotUnaryExpNotMinus(ANotUnaryExpNotMinus node)
    {
        defaultIn(node);
    }

    public void outANotUnaryExpNotMinus(ANotUnaryExpNotMinus node)
    {
        defaultOut(node);
    }

    public void caseANotUnaryExpNotMinus(ANotUnaryExpNotMinus node)
    {
        inANotUnaryExpNotMinus(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotUnaryExpNotMinus(node);
    }

    public void inACastUnaryExpNotMinus(ACastUnaryExpNotMinus node)
    {
        defaultIn(node);
    }

    public void outACastUnaryExpNotMinus(ACastUnaryExpNotMinus node)
    {
        defaultOut(node);
    }

    public void caseACastUnaryExpNotMinus(ACastUnaryExpNotMinus node)
    {
        inACastUnaryExpNotMinus(node);
        if(node.getCastExp() != null)
        {
            node.getCastExp().apply(this);
        }
        outACastUnaryExpNotMinus(node);
    }

    public void inANoncharCastExp(ANoncharCastExp node)
    {
        defaultIn(node);
    }

    public void outANoncharCastExp(ANoncharCastExp node)
    {
        defaultOut(node);
    }

    public void caseANoncharCastExp(ANoncharCastExp node)
    {
        inANoncharCastExp(node);
        if(node.getUnaryExpNotMinus() != null)
        {
            node.getUnaryExpNotMinus().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outANoncharCastExp(node);
    }

    public void inACharCastExp(ACharCastExp node)
    {
        defaultIn(node);
    }

    public void outACharCastExp(ACharCastExp node)
    {
        defaultOut(node);
    }

    public void caseACharCastExp(ACharCastExp node)
    {
        inACharCastExp(node);
        if(node.getUnaryExp() != null)
        {
            node.getUnaryExp().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outACharCastExp(node);
    }

    public void inAIdPostfixExp(AIdPostfixExp node)
    {
        defaultIn(node);
    }

    public void outAIdPostfixExp(AIdPostfixExp node)
    {
        defaultOut(node);
    }

    public void caseAIdPostfixExp(AIdPostfixExp node)
    {
        inAIdPostfixExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdPostfixExp(node);
    }

    public void inAPrimaryPostfixExp(APrimaryPostfixExp node)
    {
        defaultIn(node);
    }

    public void outAPrimaryPostfixExp(APrimaryPostfixExp node)
    {
        defaultOut(node);
    }

    public void caseAPrimaryPostfixExp(APrimaryPostfixExp node)
    {
        inAPrimaryPostfixExp(node);
        if(node.getPrimaryExp() != null)
        {
            node.getPrimaryExp().apply(this);
        }
        outAPrimaryPostfixExp(node);
    }

    public void inALiteralPrimaryExp(ALiteralPrimaryExp node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryExp(ALiteralPrimaryExp node)
    {
        defaultOut(node);
    }

    public void caseALiteralPrimaryExp(ALiteralPrimaryExp node)
    {
        inALiteralPrimaryExp(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryExp(node);
    }

    public void inAThisPrimaryExp(AThisPrimaryExp node)
    {
        defaultIn(node);
    }

    public void outAThisPrimaryExp(AThisPrimaryExp node)
    {
        defaultOut(node);
    }

    public void caseAThisPrimaryExp(AThisPrimaryExp node)
    {
        inAThisPrimaryExp(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisPrimaryExp(node);
    }

    public void inAParenPrimaryExp(AParenPrimaryExp node)
    {
        defaultIn(node);
    }

    public void outAParenPrimaryExp(AParenPrimaryExp node)
    {
        defaultOut(node);
    }

    public void caseAParenPrimaryExp(AParenPrimaryExp node)
    {
        inAParenPrimaryExp(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParenPrimaryExp(node);
    }

    public void inANewPrimaryExp(ANewPrimaryExp node)
    {
        defaultIn(node);
    }

    public void outANewPrimaryExp(ANewPrimaryExp node)
    {
        defaultOut(node);
    }

    public void caseANewPrimaryExp(ANewPrimaryExp node)
    {
        inANewPrimaryExp(node);
        if(node.getClassinstancecreation() != null)
        {
            node.getClassinstancecreation().apply(this);
        }
        outANewPrimaryExp(node);
    }

    public void inACallPrimaryExp(ACallPrimaryExp node)
    {
        defaultIn(node);
    }

    public void outACallPrimaryExp(ACallPrimaryExp node)
    {
        defaultOut(node);
    }

    public void caseACallPrimaryExp(ACallPrimaryExp node)
    {
        inACallPrimaryExp(node);
        if(node.getMethodinvocation() != null)
        {
            node.getMethodinvocation().apply(this);
        }
        outACallPrimaryExp(node);
    }

    public void inAClassinstancecreation(AClassinstancecreation node)
    {
        defaultIn(node);
    }

    public void outAClassinstancecreation(AClassinstancecreation node)
    {
        defaultOut(node);
    }

    public void caseAClassinstancecreation(AClassinstancecreation node)
    {
        inAClassinstancecreation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAClassinstancecreation(node);
    }

    public void inAMethodinvocation(AMethodinvocation node)
    {
        defaultIn(node);
    }

    public void outAMethodinvocation(AMethodinvocation node)
    {
        defaultOut(node);
    }

    public void caseAMethodinvocation(AMethodinvocation node)
    {
        inAMethodinvocation(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getReceiver() != null)
        {
            node.getReceiver().apply(this);
        }
        outAMethodinvocation(node);
    }

    public void inATmpobjectReceiver(ATmpobjectReceiver node)
    {
        defaultIn(node);
    }

    public void outATmpobjectReceiver(ATmpobjectReceiver node)
    {
        defaultOut(node);
    }

    public void caseATmpobjectReceiver(ATmpobjectReceiver node)
    {
        inATmpobjectReceiver(node);
        if(node.getPostfixExp() != null)
        {
            node.getPostfixExp().apply(this);
        }
        outATmpobjectReceiver(node);
    }

    public void inAObjectReceiver(AObjectReceiver node)
    {
        defaultIn(node);
    }

    public void outAObjectReceiver(AObjectReceiver node)
    {
        defaultOut(node);
    }

    public void caseAObjectReceiver(AObjectReceiver node)
    {
        inAObjectReceiver(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAObjectReceiver(node);
    }

    public void inASuperReceiver(ASuperReceiver node)
    {
        defaultIn(node);
    }

    public void outASuperReceiver(ASuperReceiver node)
    {
        defaultOut(node);
    }

    public void caseASuperReceiver(ASuperReceiver node)
    {
        inASuperReceiver(node);
        if(node.getSuper() != null)
        {
            node.getSuper().apply(this);
        }
        outASuperReceiver(node);
    }

    public void inAArgumentList(AArgumentList node)
    {
        defaultIn(node);
    }

    public void outAArgumentList(AArgumentList node)
    {
        defaultOut(node);
    }

    public void caseAArgumentList(AArgumentList node)
    {
        inAArgumentList(node);
        {
            Object temp[] = node.getExp().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).apply(this);
            }
        }
        outAArgumentList(node);
    }

    public void inATmpArgumentList(ATmpArgumentList node)
    {
        defaultIn(node);
    }

    public void outATmpArgumentList(ATmpArgumentList node)
    {
        defaultOut(node);
    }

    public void caseATmpArgumentList(ATmpArgumentList node)
    {
        inATmpArgumentList(node);
        {
            Object temp[] = node.getArgumentListTail().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                ((PArgumentListTail) temp[i]).apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outATmpArgumentList(node);
    }

    public void inAArgumentListTail(AArgumentListTail node)
    {
        defaultIn(node);
    }

    public void outAArgumentListTail(AArgumentListTail node)
    {
        defaultOut(node);
    }

    public void caseAArgumentListTail(AArgumentListTail node)
    {
        inAArgumentListTail(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAArgumentListTail(node);
    }

    public void inAIntLiteral(AIntLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntLiteral(AIntLiteral node)
    {
        defaultOut(node);
    }

    public void caseAIntLiteral(AIntLiteral node)
    {
        inAIntLiteral(node);
        if(node.getIntconst() != null)
        {
            node.getIntconst().apply(this);
        }
        outAIntLiteral(node);
    }

    public void inATrueLiteral(ATrueLiteral node)
    {
        defaultIn(node);
    }

    public void outATrueLiteral(ATrueLiteral node)
    {
        defaultOut(node);
    }

    public void caseATrueLiteral(ATrueLiteral node)
    {
        inATrueLiteral(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueLiteral(node);
    }

    public void inAFalseLiteral(AFalseLiteral node)
    {
        defaultIn(node);
    }

    public void outAFalseLiteral(AFalseLiteral node)
    {
        defaultOut(node);
    }

    public void caseAFalseLiteral(AFalseLiteral node)
    {
        inAFalseLiteral(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseLiteral(node);
    }

    public void inACharLiteral(ACharLiteral node)
    {
        defaultIn(node);
    }

    public void outACharLiteral(ACharLiteral node)
    {
        defaultOut(node);
    }

    public void caseACharLiteral(ACharLiteral node)
    {
        inACharLiteral(node);
        if(node.getCharconst() != null)
        {
            node.getCharconst().apply(this);
        }
        outACharLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inANullLiteral(ANullLiteral node)
    {
        defaultIn(node);
    }

    public void outANullLiteral(ANullLiteral node)
    {
        defaultOut(node);
    }

    public void caseANullLiteral(ANullLiteral node)
    {
        inANullLiteral(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullLiteral(node);
    }
}
