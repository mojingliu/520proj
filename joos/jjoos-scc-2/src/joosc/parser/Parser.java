/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.parser;

import joosc.lexer.*;
import joosc.node.*;
import joosc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(0), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(45), node, false); } break;
                    case 3: { Node node = new3(); push(goTo(45), node, false); } break;
                    case 4: { Node node = new4(); push(goTo(0), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(46), node, false); } break;
                    case 6: { Node node = new6(); push(goTo(46), node, false); } break;
                    case 7: { Node node = new7(); push(goTo(1), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(47), node, false); } break;
                    case 9: { Node node = new9(); push(goTo(47), node, false); } break;
                    case 10: { Node node = new10(); push(goTo(1), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(1), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(1), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(1), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(48), node, false); } break;
                    case 15: { Node node = new15(); push(goTo(48), node, false); } break;
                    case 16: { Node node = new16(); push(goTo(1), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(1), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(1), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(1), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(49), node, false); } break;
                    case 21: { Node node = new21(); push(goTo(49), node, false); } break;
                    case 22: { Node node = new22(); push(goTo(1), node, true); } break;
                    case 23: { Node node = new23(); push(goTo(1), node, true); } break;
                    case 24: { Node node = new24(); push(goTo(1), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(1), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(1), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(1), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(1), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(2), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(2), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(3), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(50), node, false); } break;
                    case 33: { Node node = new33(); push(goTo(50), node, false); } break;
                    case 34: { Node node = new34(); push(goTo(3), node, true); } break;
                    case 35: { Node node = new35(); push(goTo(3), node, true); } break;
                    case 36: { Node node = new36(); push(goTo(3), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(3), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(51), node, false); } break;
                    case 39: { Node node = new39(); push(goTo(51), node, false); } break;
                    case 40: { Node node = new40(); push(goTo(3), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(3), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(3), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(4), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(5), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(5), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(5), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(5), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(6), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(7), node, true); } break;
                    case 50: { Node node = new50(); push(goTo(8), node, true); } break;
                    case 51: { Node node = new51(); push(goTo(8), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(52), node, false); } break;
                    case 53: { Node node = new53(); push(goTo(52), node, false); } break;
                    case 54: { Node node = new54(); push(goTo(9), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(10), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(10), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(10), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(10), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(10), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(53), node, false); } break;
                    case 61: { Node node = new61(); push(goTo(53), node, false); } break;
                    case 62: { Node node = new62(); push(goTo(10), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(10), node, true); } break;
                    case 64: { Node node = new64(); push(goTo(10), node, true); } break;
                    case 65: { Node node = new65(); push(goTo(11), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(11), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(12), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(12), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(54), node, false); } break;
                    case 70: { Node node = new70(); push(goTo(54), node, false); } break;
                    case 71: { Node node = new71(); push(goTo(13), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(14), node, true); } break;
                    case 73: { Node node = new73(); push(goTo(15), node, true); } break;
                    case 74: { Node node = new74(); push(goTo(15), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(15), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(15), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(15), node, true); } break;
                    case 78: { Node node = new78(); push(goTo(15), node, true); } break;
                    case 79: { Node node = new79(); push(goTo(15), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(15), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(15), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(15), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(15), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(15), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(16), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(16), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(17), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(17), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(18), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(18), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(18), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(18), node, true); } break;
                    case 93: { Node node = new93(); push(goTo(19), node, true); } break;
                    case 94: { Node node = new94(); push(goTo(19), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(19), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(20), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(20), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(21), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(21), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(21), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(21), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(21), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(21), node, true); } break;
                    case 104: { Node node = new104(); push(goTo(22), node, true); } break;
                    case 105: { Node node = new105(); push(goTo(23), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(23), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(23), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(23), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(23), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(23), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(24), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(24), node, true); } break;
                    case 113: { Node node = new113(); push(goTo(24), node, true); } break;
                    case 114: { Node node = new114(); push(goTo(24), node, true); } break;
                    case 115: { Node node = new115(); push(goTo(25), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(25), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(25), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(25), node, true); } break;
                    case 119: { Node node = new119(); push(goTo(26), node, true); } break;
                    case 120: { Node node = new120(); push(goTo(27), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(27), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(28), node, true); } break;
                    case 123: { Node node = new123(); push(goTo(28), node, true); } break;
                    case 124: { Node node = new124(); push(goTo(29), node, true); } break;
                    case 125: { Node node = new125(); push(goTo(29), node, true); } break;
                    case 126: { Node node = new126(); push(goTo(30), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(30), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(30), node, true); } break;
                    case 129: { Node node = new129(); push(goTo(31), node, true); } break;
                    case 130: { Node node = new130(); push(goTo(31), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(31), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(31), node, true); } break;
                    case 133: { Node node = new133(); push(goTo(31), node, true); } break;
                    case 134: { Node node = new134(); push(goTo(31), node, true); } break;
                    case 135: { Node node = new135(); push(goTo(32), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(32), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(32), node, true); } break;
                    case 138: { Node node = new138(); push(goTo(33), node, true); } break;
                    case 139: { Node node = new139(); push(goTo(33), node, true); } break;
                    case 140: { Node node = new140(); push(goTo(33), node, true); } break;
                    case 141: { Node node = new141(); push(goTo(33), node, true); } break;
                    case 142: { Node node = new142(); push(goTo(34), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(34), node, true); } break;
                    case 144: { Node node = new144(); push(goTo(35), node, true); } break;
                    case 145: { Node node = new145(); push(goTo(35), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(35), node, true); } break;
                    case 147: { Node node = new147(); push(goTo(36), node, true); } break;
                    case 148: { Node node = new148(); push(goTo(36), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(37), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(37), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(38), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(38), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(38), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(38), node, true); } break;
                    case 155: { Node node = new155(); push(goTo(38), node, true); } break;
                    case 156: { Node node = new156(); push(goTo(39), node, true); } break;
                    case 157: { Node node = new157(); push(goTo(39), node, true); } break;
                    case 158: { Node node = new158(); push(goTo(40), node, true); } break;
                    case 159: { Node node = new159(); push(goTo(40), node, true); } break;
                    case 160: { Node node = new160(); push(goTo(41), node, true); } break;
                    case 161: { Node node = new161(); push(goTo(41), node, true); } break;
                    case 162: { Node node = new162(); push(goTo(42), node, true); } break;
                    case 163: { Node node = new163(); push(goTo(42), node, true); } break;
                    case 164: { Node node = new164(); push(goTo(55), node, false); } break;
                    case 165: { Node node = new165(); push(goTo(55), node, false); } break;
                    case 166: { Node node = new166(); push(goTo(43), node, true); } break;
                    case 167: { Node node = new167(); push(goTo(44), node, true); } break;
                    case 168: { Node node = new168(); push(goTo(44), node, true); } break;
                    case 169: { Node node = new169(); push(goTo(44), node, true); } break;
                    case 170: { Node node = new170(); push(goTo(44), node, true); } break;
                    case 171: { Node node = new171(); push(goTo(44), node, true); } break;
                    case 172: { Node node = new172(); push(goTo(44), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PClassfile node1 = (PClassfile) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        PClass node2 = (PClass) pop();
        XTImportpath node1 = null;
        ADefaultClassfile node = new ADefaultClassfile(node1, node2);
        return node;
    }

    Node new1()
    {
        PClass node2 = (PClass) pop();
        XTImportpath node1 = (XTImportpath) pop();
        ADefaultClassfile node = new ADefaultClassfile(node1, node2);
        return node;
    }

    Node new2()
    {
        TImportpath node2 = (TImportpath) pop();
        XTImportpath node1 = (XTImportpath) pop();
        X1TImportpath node = new X1TImportpath(node1, node2);
        return node;
    }

    Node new3()
    {
        TImportpath node1 = (TImportpath) pop();
        X2TImportpath node = new X2TImportpath(node1);
        return node;
    }

    Node new4()
    {
        XPExternClass node1 = (XPExternClass) pop();
        AExternClassfile node = new AExternClassfile(node1);
        return node;
    }

    Node new5()
    {
        PExternClass node2 = (PExternClass) pop();
        XPExternClass node1 = (XPExternClass) pop();
        X1PExternClass node = new X1PExternClass(node1, node2);
        return node;
    }

    Node new6()
    {
        PExternClass node1 = (PExternClass) pop();
        X2PExternClass node = new X2PExternClass(node1);
        return node;
    }

    Node new7()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new8()
    {
        PConstructor node2 = (PConstructor) pop();
        XPConstructor node1 = (XPConstructor) pop();
        X1PConstructor node = new X1PConstructor(node1, node2);
        return node;
    }

    Node new9()
    {
        PConstructor node1 = (PConstructor) pop();
        X2PConstructor node = new X2PConstructor(node1);
        return node;
    }

    Node new10()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new11()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new12()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new13()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new14()
    {
        PField node2 = (PField) pop();
        XPField node1 = (XPField) pop();
        X1PField node = new X1PField(node1, node2);
        return node;
    }

    Node new15()
    {
        PField node1 = (PField) pop();
        X2PField node = new X2PField(node1);
        return node;
    }

    Node new16()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new17()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new18()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = null;
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new19()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new20()
    {
        PMethod node2 = (PMethod) pop();
        XPMethod node1 = (XPMethod) pop();
        X1PMethod node = new X1PMethod(node1, node2);
        return node;
    }

    Node new21()
    {
        PMethod node1 = (PMethod) pop();
        X2PMethod node = new X2PMethod(node1);
        return node;
    }

    Node new22()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new23()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new24()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = null;
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new25()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new26()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new27()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = null;
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new28()
    {
        TRBrace node10 = (TRBrace) pop();
        XPMethod node9 = (XPMethod) pop();
        XPConstructor node8 = (XPConstructor) pop();
        XPField node7 = (XPField) pop();
        TLBrace node6 = (TLBrace) pop();
        PExtension node5 = (PExtension) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TClass node3 = (TClass) pop();
        PClassmods node2 = (PClassmods) pop();
        TPublic node1 = (TPublic) pop();
        AClass node = new AClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new29()
    {
        TFinal node1 = (TFinal) pop();
        AFinalClassmods node = new AFinalClassmods(node1);
        return node;
    }

    Node new30()
    {
        TAbstract node1 = (TAbstract) pop();
        AAbstractClassmods node = new AAbstractClassmods(node1);
        return node;
    }

    Node new31()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = null;
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = null;
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = null;
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new32()
    {
        PExternConstructor node2 = (PExternConstructor) pop();
        XPExternConstructor node1 = (XPExternConstructor) pop();
        X1PExternConstructor node = new X1PExternConstructor(node1, node2);
        return node;
    }

    Node new33()
    {
        PExternConstructor node1 = (PExternConstructor) pop();
        X2PExternConstructor node = new X2PExternConstructor(node1);
        return node;
    }

    Node new34()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = null;
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = null;
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = (PClassmods) pop();
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new35()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = null;
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = (PExtension) pop();
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = null;
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new36()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = null;
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = (PExtension) pop();
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = (PClassmods) pop();
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new37()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = (XPExternMethod) pop();
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = null;
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = null;
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new38()
    {
        PExternMethod node2 = (PExternMethod) pop();
        XPExternMethod node1 = (XPExternMethod) pop();
        X1PExternMethod node = new X1PExternMethod(node1, node2);
        return node;
    }

    Node new39()
    {
        PExternMethod node1 = (PExternMethod) pop();
        X2PExternMethod node = new X2PExternMethod(node1);
        return node;
    }

    Node new40()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = (XPExternMethod) pop();
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = null;
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = (PClassmods) pop();
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new41()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = (XPExternMethod) pop();
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = (PExtension) pop();
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = null;
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new42()
    {
        TRBrace node12 = (TRBrace) pop();
        XPExternMethod node11 = (XPExternMethod) pop();
        XPExternConstructor node10 = (XPExternConstructor) pop();
        TLBrace node9 = (TLBrace) pop();
        TStringconst node8 = (TStringconst) pop();
        TIn node7 = (TIn) pop();
        PExtension node6 = (PExtension) pop();
        TIdentifier node5 = (TIdentifier) pop();
        TClass node4 = (TClass) pop();
        PClassmods node3 = (PClassmods) pop();
        TPublic node2 = (TPublic) pop();
        TExtern node1 = (TExtern) pop();
        AExternClass node = new AExternClass(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12);
        return node;
    }

    Node new43()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TExtends node1 = (TExtends) pop();
        AExtension node = new AExtension(node1, node2);
        return node;
    }

    Node new44()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AReferenceType node = new AReferenceType(node1);
        return node;
    }

    Node new45()
    {
        TChar node1 = (TChar) pop();
        ACharType node = new ACharType(node1);
        return node;
    }

    Node new46()
    {
        TBoolean node1 = (TBoolean) pop();
        ABooleanType node = new ABooleanType(node1);
        return node;
    }

    Node new47()
    {
        TInt node1 = (TInt) pop();
        AIntType node = new AIntType(node1);
        return node;
    }

    Node new48()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PIdentifierList node3 = (PIdentifierList) pop();
        PType node2 = (PType) pop();
        TProtected node1 = (TProtected) pop();
        ATmpField node = new ATmpField(node1, node2, node3, node4);
        return node;
    }

    Node new49()
    {
        TSemicolon node4 = (TSemicolon) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PType node2 = (PType) pop();
        TProtected node1 = (TProtected) pop();
        AOnefield node = new AOnefield(node1, node2, node3, node4);
        return node;
    }

    Node new50()
    {
        XPIdentifierListTail node2 = null;
        TIdentifier node1 = (TIdentifier) pop();
        ATmpIdentifierList node = new ATmpIdentifierList(node1, node2);
        return node;
    }

    Node new51()
    {
        XPIdentifierListTail node2 = (XPIdentifierListTail) pop();
        TIdentifier node1 = (TIdentifier) pop();
        ATmpIdentifierList node = new ATmpIdentifierList(node1, node2);
        return node;
    }

    Node new52()
    {
        PIdentifierListTail node2 = (PIdentifierListTail) pop();
        XPIdentifierListTail node1 = (XPIdentifierListTail) pop();
        X1PIdentifierListTail node = new X1PIdentifierListTail(node1, node2);
        return node;
    }

    Node new53()
    {
        PIdentifierListTail node1 = (PIdentifierListTail) pop();
        X2PIdentifierListTail node = new X2PIdentifierListTail(node1);
        return node;
    }

    Node new54()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TComma node1 = (TComma) pop();
        AIdentifierListTail node = new AIdentifierListTail(node1, node2);
        return node;
    }

    Node new55()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = null;
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = null;
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = null;
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new56()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = null;
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = null;
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = (PFormalList) pop();
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new57()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = null;
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = (PArgumentList) pop();
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = null;
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new58()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = null;
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = (PArgumentList) pop();
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = (PFormalList) pop();
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new59()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = (XPStm) pop();
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = null;
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = null;
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new60()
    {
        PStm node2 = (PStm) pop();
        XPStm node1 = (XPStm) pop();
        X1PStm node = new X1PStm(node1, node2);
        return node;
    }

    Node new61()
    {
        PStm node1 = (PStm) pop();
        X2PStm node = new X2PStm(node1);
        return node;
    }

    Node new62()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = (XPStm) pop();
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = null;
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = (PFormalList) pop();
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new63()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = (XPStm) pop();
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = (PArgumentList) pop();
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = null;
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new64()
    {
        TRBrace node13 = (TRBrace) pop();
        XPStm node12 = (XPStm) pop();
        TSemicolon node11 = (TSemicolon) pop();
        TRPar node10 = (TRPar) pop();
        PArgumentList node9 = (PArgumentList) pop();
        TLPar node8 = (TLPar) pop();
        TSuper node7 = (TSuper) pop();
        TLBrace node6 = (TLBrace) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = (PFormalList) pop();
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        ATmpConstructor node = new ATmpConstructor(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10, node11, node12, node13);
        return node;
    }

    Node new65()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = null;
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        AExternConstructor node = new AExternConstructor(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new66()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRPar node5 = (TRPar) pop();
        PFormalList node4 = (PFormalList) pop();
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TPublic node1 = (TPublic) pop();
        AExternConstructor node = new AExternConstructor(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new67()
    {
        XPFormalListTail node2 = null;
        PFormal node1 = (PFormal) pop();
        ATmpFormalList node = new ATmpFormalList(node1, node2);
        return node;
    }

    Node new68()
    {
        XPFormalListTail node2 = (XPFormalListTail) pop();
        PFormal node1 = (PFormal) pop();
        ATmpFormalList node = new ATmpFormalList(node1, node2);
        return node;
    }

    Node new69()
    {
        PFormalListTail node2 = (PFormalListTail) pop();
        XPFormalListTail node1 = (XPFormalListTail) pop();
        X1PFormalListTail node = new X1PFormalListTail(node1, node2);
        return node;
    }

    Node new70()
    {
        PFormalListTail node1 = (PFormalListTail) pop();
        X2PFormalListTail node = new X2PFormalListTail(node1);
        return node;
    }

    Node new71()
    {
        PFormal node2 = (PFormal) pop();
        TComma node1 = (TComma) pop();
        AFormalListTail node = new AFormalListTail(node1, node2);
        return node;
    }

    Node new72()
    {
        TIdentifier node2 = (TIdentifier) pop();
        PType node1 = (PType) pop();
        AFormal node = new AFormal(node1, node2);
        return node;
    }

    Node new73()
    {
        TRBrace node10 = (TRBrace) pop();
        XPStm node9 = null;
        TLBrace node8 = (TLBrace) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = null;
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        PMethodmods node2 = (PMethodmods) pop();
        TPublic node1 = (TPublic) pop();
        AModMethod node = new AModMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new74()
    {
        TRBrace node10 = (TRBrace) pop();
        XPStm node9 = null;
        TLBrace node8 = (TLBrace) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = (PFormalList) pop();
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        PMethodmods node2 = (PMethodmods) pop();
        TPublic node1 = (TPublic) pop();
        AModMethod node = new AModMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new75()
    {
        TRBrace node10 = (TRBrace) pop();
        XPStm node9 = (XPStm) pop();
        TLBrace node8 = (TLBrace) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = null;
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        PMethodmods node2 = (PMethodmods) pop();
        TPublic node1 = (TPublic) pop();
        AModMethod node = new AModMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new76()
    {
        TRBrace node10 = (TRBrace) pop();
        XPStm node9 = (XPStm) pop();
        TLBrace node8 = (TLBrace) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = (PFormalList) pop();
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        PMethodmods node2 = (PMethodmods) pop();
        TPublic node1 = (TPublic) pop();
        AModMethod node = new AModMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new77()
    {
        TRBrace node9 = (TRBrace) pop();
        XPStm node8 = null;
        TLBrace node7 = (TLBrace) pop();
        TRPar node6 = (TRPar) pop();
        PFormalList node5 = null;
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PReturntype node2 = (PReturntype) pop();
        TPublic node1 = (TPublic) pop();
        ANonmodMethod node = new ANonmodMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new78()
    {
        TRBrace node9 = (TRBrace) pop();
        XPStm node8 = null;
        TLBrace node7 = (TLBrace) pop();
        TRPar node6 = (TRPar) pop();
        PFormalList node5 = (PFormalList) pop();
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PReturntype node2 = (PReturntype) pop();
        TPublic node1 = (TPublic) pop();
        ANonmodMethod node = new ANonmodMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new79()
    {
        TRBrace node9 = (TRBrace) pop();
        XPStm node8 = (XPStm) pop();
        TLBrace node7 = (TLBrace) pop();
        TRPar node6 = (TRPar) pop();
        PFormalList node5 = null;
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PReturntype node2 = (PReturntype) pop();
        TPublic node1 = (TPublic) pop();
        ANonmodMethod node = new ANonmodMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new80()
    {
        TRBrace node9 = (TRBrace) pop();
        XPStm node8 = (XPStm) pop();
        TLBrace node7 = (TLBrace) pop();
        TRPar node6 = (TRPar) pop();
        PFormalList node5 = (PFormalList) pop();
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PReturntype node2 = (PReturntype) pop();
        TPublic node1 = (TPublic) pop();
        ANonmodMethod node = new ANonmodMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new81()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = null;
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        TAbstract node2 = (TAbstract) pop();
        TPublic node1 = (TPublic) pop();
        AAbstractMethod node = new AAbstractMethod(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new82()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = (PFormalList) pop();
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        TAbstract node2 = (TAbstract) pop();
        TPublic node1 = (TPublic) pop();
        AAbstractMethod node = new AAbstractMethod(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new83()
    {
        TRBrace node10 = (TRBrace) pop();
        XPStm node9 = null;
        TLBrace node8 = (TLBrace) pop();
        TRPar node7 = (TRPar) pop();
        PMainargv node6 = (PMainargv) pop();
        TLPar node5 = (TLPar) pop();
        TMain node4 = (TMain) pop();
        TVoid node3 = (TVoid) pop();
        TStatic node2 = (TStatic) pop();
        TPublic node1 = (TPublic) pop();
        AMainMethod node = new AMainMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new84()
    {
        TRBrace node10 = (TRBrace) pop();
        XPStm node9 = (XPStm) pop();
        TLBrace node8 = (TLBrace) pop();
        TRPar node7 = (TRPar) pop();
        PMainargv node6 = (PMainargv) pop();
        TLPar node5 = (TLPar) pop();
        TMain node4 = (TMain) pop();
        TVoid node3 = (TVoid) pop();
        TStatic node2 = (TStatic) pop();
        TPublic node1 = (TPublic) pop();
        AMainMethod node = new AMainMethod(node1, node2, node3, node4, node5, node6, node7, node8, node9, node10);
        return node;
    }

    Node new85()
    {
        TFinal node1 = (TFinal) pop();
        AFinalMethodmods node = new AFinalMethodmods(node1);
        return node;
    }

    Node new86()
    {
        TSynchronized node1 = (TSynchronized) pop();
        ASynchronizedMethodmods node = new ASynchronizedMethodmods(node1);
        return node;
    }

    Node new87()
    {
        TRBracket node4 = (TRBracket) pop();
        TLBracket node3 = (TLBracket) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AFirstMainargv node = new AFirstMainargv(node1, node2, node3, node4);
        return node;
    }

    Node new88()
    {
        TIdentifier node4 = (TIdentifier) pop();
        TRBracket node3 = (TRBracket) pop();
        TLBracket node2 = (TLBracket) pop();
        TIdentifier node1 = (TIdentifier) pop();
        ASecondMainargv node = new ASecondMainargv(node1, node2, node3, node4);
        return node;
    }

    Node new89()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = null;
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        PExternMethodmods node2 = (PExternMethodmods) pop();
        TPublic node1 = (TPublic) pop();
        AModExternMethod node = new AModExternMethod(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new90()
    {
        TSemicolon node8 = (TSemicolon) pop();
        TRPar node7 = (TRPar) pop();
        PFormalList node6 = (PFormalList) pop();
        TLPar node5 = (TLPar) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PReturntype node3 = (PReturntype) pop();
        PExternMethodmods node2 = (PExternMethodmods) pop();
        TPublic node1 = (TPublic) pop();
        AModExternMethod node = new AModExternMethod(node1, node2, node3, node4, node5, node6, node7, node8);
        return node;
    }

    Node new91()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRPar node6 = (TRPar) pop();
        PFormalList node5 = null;
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PReturntype node2 = (PReturntype) pop();
        TPublic node1 = (TPublic) pop();
        ANonmodExternMethod node = new ANonmodExternMethod(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new92()
    {
        TSemicolon node7 = (TSemicolon) pop();
        TRPar node6 = (TRPar) pop();
        PFormalList node5 = (PFormalList) pop();
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PReturntype node2 = (PReturntype) pop();
        TPublic node1 = (TPublic) pop();
        ANonmodExternMethod node = new ANonmodExternMethod(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new93()
    {
        TFinal node1 = (TFinal) pop();
        AFinalExternMethodmods node = new AFinalExternMethodmods(node1);
        return node;
    }

    Node new94()
    {
        TAbstract node1 = (TAbstract) pop();
        AAbstractExternMethodmods node = new AAbstractExternMethodmods(node1);
        return node;
    }

    Node new95()
    {
        TSynchronized node1 = (TSynchronized) pop();
        ASynchronizedExternMethodmods node = new ASynchronizedExternMethodmods(node1);
        return node;
    }

    Node new96()
    {
        TVoid node1 = (TVoid) pop();
        AVoidReturntype node = new AVoidReturntype(node1);
        return node;
    }

    Node new97()
    {
        PType node1 = (PType) pop();
        ANonvoidReturntype node = new ANonvoidReturntype(node1);
        return node;
    }

    Node new98()
    {
        PSimplestm node1 = (PSimplestm) pop();
        ASimpleStm node = new ASimpleStm(node1);
        return node;
    }

    Node new99()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PIdentifierList node2 = (PIdentifierList) pop();
        PType node1 = (PType) pop();
        ATmpdeclStm node = new ATmpdeclStm(node1, node2, node3);
        return node;
    }

    Node new100()
    {
        PStm node5 = (PStm) pop();
        TRPar node4 = (TRPar) pop();
        PExp node3 = (PExp) pop();
        TLPar node2 = (TLPar) pop();
        TIf node1 = (TIf) pop();
        AIfStm node = new AIfStm(node1, node2, node3, node4, node5);
        return node;
    }

    Node new101()
    {
        PStm node7 = (PStm) pop();
        TElse node6 = (TElse) pop();
        PStmNoShortIf node5 = (PStmNoShortIf) pop();
        TRPar node4 = (TRPar) pop();
        PExp node3 = (PExp) pop();
        TLPar node2 = (TLPar) pop();
        TIf node1 = (TIf) pop();
        ATmpIfelseStm node = new ATmpIfelseStm(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new102()
    {
        PStm node9 = (PStm) pop();
        TRPar node8 = (TRPar) pop();
        PStmExp node7 = (PStmExp) pop();
        TSemicolon node6 = (TSemicolon) pop();
        PExp node5 = (PExp) pop();
        TSemicolon node4 = (TSemicolon) pop();
        PStmExp node3 = (PStmExp) pop();
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        AForStm node = new AForStm(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new103()
    {
        PStm node5 = (PStm) pop();
        TRPar node4 = (TRPar) pop();
        PExp node3 = (PExp) pop();
        TLPar node2 = (TLPar) pop();
        TWhile node1 = (TWhile) pop();
        AWhileStm node = new AWhileStm(node1, node2, node3, node4, node5);
        return node;
    }

    Node new104()
    {
        TSemicolon node3 = (TSemicolon) pop();
        TIdentifier node2 = (TIdentifier) pop();
        PType node1 = (PType) pop();
        AOnelocal node = new AOnelocal(node1, node2, node3);
        return node;
    }

    Node new105()
    {
        TSemicolon node1 = (TSemicolon) pop();
        ASkipSimplestm node = new ASkipSimplestm(node1);
        return node;
    }

    Node new106()
    {
        TRBrace node3 = (TRBrace) pop();
        XPStm node2 = null;
        TLBrace node1 = (TLBrace) pop();
        ABlockSimplestm node = new ABlockSimplestm(node1, node2, node3);
        return node;
    }

    Node new107()
    {
        TRBrace node3 = (TRBrace) pop();
        XPStm node2 = (XPStm) pop();
        TLBrace node1 = (TLBrace) pop();
        ABlockSimplestm node = new ABlockSimplestm(node1, node2, node3);
        return node;
    }

    Node new108()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PStmExp node1 = (PStmExp) pop();
        AExpSimplestm node = new AExpSimplestm(node1, node2);
        return node;
    }

    Node new109()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PExp node2 = null;
        TReturn node1 = (TReturn) pop();
        AReturnSimplestm node = new AReturnSimplestm(node1, node2, node3);
        return node;
    }

    Node new110()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PExp node2 = (PExp) pop();
        TReturn node1 = (TReturn) pop();
        AReturnSimplestm node = new AReturnSimplestm(node1, node2, node3);
        return node;
    }

    Node new111()
    {
        PSimplestm node1 = (PSimplestm) pop();
        ASimpleStmNoShortIf node = new ASimpleStmNoShortIf(node1);
        return node;
    }

    Node new112()
    {
        PStmNoShortIf node7 = (PStmNoShortIf) pop();
        TElse node6 = (TElse) pop();
        PStmNoShortIf node5 = (PStmNoShortIf) pop();
        TRPar node4 = (TRPar) pop();
        PExp node3 = (PExp) pop();
        TLPar node2 = (TLPar) pop();
        TIf node1 = (TIf) pop();
        ATmpIfelseStmNoShortIf node = new ATmpIfelseStmNoShortIf(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new113()
    {
        PStmNoShortIf node9 = (PStmNoShortIf) pop();
        TRPar node8 = (TRPar) pop();
        PStmExp node7 = (PStmExp) pop();
        TSemicolon node6 = (TSemicolon) pop();
        PExp node5 = (PExp) pop();
        TSemicolon node4 = (TSemicolon) pop();
        PStmExp node3 = (PStmExp) pop();
        TLPar node2 = (TLPar) pop();
        TFor node1 = (TFor) pop();
        ATmpForStmNoShortIf node = new ATmpForStmNoShortIf(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new114()
    {
        PStmNoShortIf node5 = (PStmNoShortIf) pop();
        TRPar node4 = (TRPar) pop();
        PExp node3 = (PExp) pop();
        TLPar node2 = (TLPar) pop();
        TWhile node1 = (TWhile) pop();
        ATmpWhileStmNoShortIf node = new ATmpWhileStmNoShortIf(node1, node2, node3, node4, node5);
        return node;
    }

    Node new115()
    {
        PAssignment node1 = (PAssignment) pop();
        AAssignStmExp node = new AAssignStmExp(node1);
        return node;
    }

    Node new116()
    {
        PMethodinvocation node1 = (PMethodinvocation) pop();
        ACallStmExp node = new ACallStmExp(node1);
        return node;
    }

    Node new117()
    {
        TInc node2 = (TInc) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AIncStmExp node = new AIncStmExp(node1, node2);
        return node;
    }

    Node new118()
    {
        PClassinstancecreation node1 = (PClassinstancecreation) pop();
        ANewStmExp node = new ANewStmExp(node1);
        return node;
    }

    Node new119()
    {
        PExp node3 = (PExp) pop();
        TAssign node2 = (TAssign) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AAssignment node = new AAssignment(node1, node2, node3);
        return node;
    }

    Node new120()
    {
        POrExp node1 = (POrExp) pop();
        ADefaultExp node = new ADefaultExp(node1);
        return node;
    }

    Node new121()
    {
        PAssignment node1 = (PAssignment) pop();
        AAssignExp node = new AAssignExp(node1);
        return node;
    }

    Node new122()
    {
        PAndExp node1 = (PAndExp) pop();
        ADefaultOrExp node = new ADefaultOrExp(node1);
        return node;
    }

    Node new123()
    {
        PAndExp node3 = (PAndExp) pop();
        TOr node2 = (TOr) pop();
        POrExp node1 = (POrExp) pop();
        AOrOrExp node = new AOrOrExp(node1, node2, node3);
        return node;
    }

    Node new124()
    {
        PEqExp node1 = (PEqExp) pop();
        ADefaultAndExp node = new ADefaultAndExp(node1);
        return node;
    }

    Node new125()
    {
        PEqExp node3 = (PEqExp) pop();
        TAnd node2 = (TAnd) pop();
        PAndExp node1 = (PAndExp) pop();
        AAndAndExp node = new AAndAndExp(node1, node2, node3);
        return node;
    }

    Node new126()
    {
        PRelExp node1 = (PRelExp) pop();
        ADefaultEqExp node = new ADefaultEqExp(node1);
        return node;
    }

    Node new127()
    {
        PRelExp node3 = (PRelExp) pop();
        TEq node2 = (TEq) pop();
        PEqExp node1 = (PEqExp) pop();
        AEqEqExp node = new AEqEqExp(node1, node2, node3);
        return node;
    }

    Node new128()
    {
        PRelExp node3 = (PRelExp) pop();
        TNeq node2 = (TNeq) pop();
        PEqExp node1 = (PEqExp) pop();
        ANeqEqExp node = new ANeqEqExp(node1, node2, node3);
        return node;
    }

    Node new129()
    {
        PAddExp node1 = (PAddExp) pop();
        ADefaultRelExp node = new ADefaultRelExp(node1);
        return node;
    }

    Node new130()
    {
        PAddExp node3 = (PAddExp) pop();
        TLt node2 = (TLt) pop();
        PRelExp node1 = (PRelExp) pop();
        ALtRelExp node = new ALtRelExp(node1, node2, node3);
        return node;
    }

    Node new131()
    {
        PAddExp node3 = (PAddExp) pop();
        TGt node2 = (TGt) pop();
        PRelExp node1 = (PRelExp) pop();
        AGtRelExp node = new AGtRelExp(node1, node2, node3);
        return node;
    }

    Node new132()
    {
        PAddExp node3 = (PAddExp) pop();
        TLeq node2 = (TLeq) pop();
        PRelExp node1 = (PRelExp) pop();
        ALeqRelExp node = new ALeqRelExp(node1, node2, node3);
        return node;
    }

    Node new133()
    {
        PAddExp node3 = (PAddExp) pop();
        TGeq node2 = (TGeq) pop();
        PRelExp node1 = (PRelExp) pop();
        AGeqRelExp node = new AGeqRelExp(node1, node2, node3);
        return node;
    }

    Node new134()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TInstanceof node2 = (TInstanceof) pop();
        PRelExp node1 = (PRelExp) pop();
        AInstanceofRelExp node = new AInstanceofRelExp(node1, node2, node3);
        return node;
    }

    Node new135()
    {
        PMultExp node1 = (PMultExp) pop();
        ADefaultAddExp node = new ADefaultAddExp(node1);
        return node;
    }

    Node new136()
    {
        PMultExp node3 = (PMultExp) pop();
        TPlus node2 = (TPlus) pop();
        PAddExp node1 = (PAddExp) pop();
        APlusAddExp node = new APlusAddExp(node1, node2, node3);
        return node;
    }

    Node new137()
    {
        PMultExp node3 = (PMultExp) pop();
        TMinus node2 = (TMinus) pop();
        PAddExp node1 = (PAddExp) pop();
        AMinusAddExp node = new AMinusAddExp(node1, node2, node3);
        return node;
    }

    Node new138()
    {
        PUnaryExp node1 = (PUnaryExp) pop();
        ADefaultMultExp node = new ADefaultMultExp(node1);
        return node;
    }

    Node new139()
    {
        PUnaryExp node3 = (PUnaryExp) pop();
        TMult node2 = (TMult) pop();
        PMultExp node1 = (PMultExp) pop();
        AMultMultExp node = new AMultMultExp(node1, node2, node3);
        return node;
    }

    Node new140()
    {
        PUnaryExp node3 = (PUnaryExp) pop();
        TDiv node2 = (TDiv) pop();
        PMultExp node1 = (PMultExp) pop();
        ADivMultExp node = new ADivMultExp(node1, node2, node3);
        return node;
    }

    Node new141()
    {
        PUnaryExp node3 = (PUnaryExp) pop();
        TMod node2 = (TMod) pop();
        PMultExp node1 = (PMultExp) pop();
        AModMultExp node = new AModMultExp(node1, node2, node3);
        return node;
    }

    Node new142()
    {
        PUnaryExpNotMinus node1 = (PUnaryExpNotMinus) pop();
        ADefaultUnaryExp node = new ADefaultUnaryExp(node1);
        return node;
    }

    Node new143()
    {
        PUnaryExp node2 = (PUnaryExp) pop();
        TMinus node1 = (TMinus) pop();
        AMinusUnaryExp node = new AMinusUnaryExp(node1, node2);
        return node;
    }

    Node new144()
    {
        PPostfixExp node1 = (PPostfixExp) pop();
        ADefaultUnaryExpNotMinus node = new ADefaultUnaryExpNotMinus(node1);
        return node;
    }

    Node new145()
    {
        PUnaryExp node2 = (PUnaryExp) pop();
        TNot node1 = (TNot) pop();
        ANotUnaryExpNotMinus node = new ANotUnaryExpNotMinus(node1, node2);
        return node;
    }

    Node new146()
    {
        PCastExp node1 = (PCastExp) pop();
        ACastUnaryExpNotMinus node = new ACastUnaryExpNotMinus(node1);
        return node;
    }

    Node new147()
    {
        PUnaryExpNotMinus node4 = (PUnaryExpNotMinus) pop();
        TRPar node3 = (TRPar) pop();
        PExp node2 = (PExp) pop();
        TLPar node1 = (TLPar) pop();
        ANoncharCastExp node = new ANoncharCastExp(node1, node2, node3, node4);
        return node;
    }

    Node new148()
    {
        PUnaryExp node4 = (PUnaryExp) pop();
        TRPar node3 = (TRPar) pop();
        TChar node2 = (TChar) pop();
        TLPar node1 = (TLPar) pop();
        ACharCastExp node = new ACharCastExp(node1, node2, node3, node4);
        return node;
    }

    Node new149()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AIdPostfixExp node = new AIdPostfixExp(node1);
        return node;
    }

    Node new150()
    {
        PPrimaryExp node1 = (PPrimaryExp) pop();
        APrimaryPostfixExp node = new APrimaryPostfixExp(node1);
        return node;
    }

    Node new151()
    {
        PLiteral node1 = (PLiteral) pop();
        ALiteralPrimaryExp node = new ALiteralPrimaryExp(node1);
        return node;
    }

    Node new152()
    {
        TThis node1 = (TThis) pop();
        AThisPrimaryExp node = new AThisPrimaryExp(node1);
        return node;
    }

    Node new153()
    {
        TRPar node3 = (TRPar) pop();
        PExp node2 = (PExp) pop();
        TLPar node1 = (TLPar) pop();
        AParenPrimaryExp node = new AParenPrimaryExp(node1, node2, node3);
        return node;
    }

    Node new154()
    {
        PClassinstancecreation node1 = (PClassinstancecreation) pop();
        ANewPrimaryExp node = new ANewPrimaryExp(node1);
        return node;
    }

    Node new155()
    {
        PMethodinvocation node1 = (PMethodinvocation) pop();
        ACallPrimaryExp node = new ACallPrimaryExp(node1);
        return node;
    }

    Node new156()
    {
        TRPar node5 = (TRPar) pop();
        PArgumentList node4 = null;
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TNew node1 = (TNew) pop();
        AClassinstancecreation node = new AClassinstancecreation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new157()
    {
        TRPar node5 = (TRPar) pop();
        PArgumentList node4 = (PArgumentList) pop();
        TLPar node3 = (TLPar) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TNew node1 = (TNew) pop();
        AClassinstancecreation node = new AClassinstancecreation(node1, node2, node3, node4, node5);
        return node;
    }

    Node new158()
    {
        TRPar node6 = (TRPar) pop();
        PArgumentList node5 = null;
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TDot node2 = (TDot) pop();
        PReceiver node1 = (PReceiver) pop();
        AMethodinvocation node = new AMethodinvocation(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new159()
    {
        TRPar node6 = (TRPar) pop();
        PArgumentList node5 = (PArgumentList) pop();
        TLPar node4 = (TLPar) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TDot node2 = (TDot) pop();
        PReceiver node1 = (PReceiver) pop();
        AMethodinvocation node = new AMethodinvocation(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new160()
    {
        PPostfixExp node1 = (PPostfixExp) pop();
        ATmpobjectReceiver node = new ATmpobjectReceiver(node1);
        return node;
    }

    Node new161()
    {
        TSuper node1 = (TSuper) pop();
        ASuperReceiver node = new ASuperReceiver(node1);
        return node;
    }

    Node new162()
    {
        XPArgumentListTail node2 = null;
        PExp node1 = (PExp) pop();
        ATmpArgumentList node = new ATmpArgumentList(node1, node2);
        return node;
    }

    Node new163()
    {
        XPArgumentListTail node2 = (XPArgumentListTail) pop();
        PExp node1 = (PExp) pop();
        ATmpArgumentList node = new ATmpArgumentList(node1, node2);
        return node;
    }

    Node new164()
    {
        PArgumentListTail node2 = (PArgumentListTail) pop();
        XPArgumentListTail node1 = (XPArgumentListTail) pop();
        X1PArgumentListTail node = new X1PArgumentListTail(node1, node2);
        return node;
    }

    Node new165()
    {
        PArgumentListTail node1 = (PArgumentListTail) pop();
        X2PArgumentListTail node = new X2PArgumentListTail(node1);
        return node;
    }

    Node new166()
    {
        PExp node2 = (PExp) pop();
        TComma node1 = (TComma) pop();
        AArgumentListTail node = new AArgumentListTail(node1, node2);
        return node;
    }

    Node new167()
    {
        TIntconst node1 = (TIntconst) pop();
        AIntLiteral node = new AIntLiteral(node1);
        return node;
    }

    Node new168()
    {
        TTrue node1 = (TTrue) pop();
        ATrueLiteral node = new ATrueLiteral(node1);
        return node;
    }

    Node new169()
    {
        TFalse node1 = (TFalse) pop();
        AFalseLiteral node = new AFalseLiteral(node1);
        return node;
    }

    Node new170()
    {
        TCharconst node1 = (TCharconst) pop();
        ACharLiteral node = new ACharLiteral(node1);
        return node;
    }

    Node new171()
    {
        TStringconst node1 = (TStringconst) pop();
        AStringLiteral node = new AStringLiteral(node1);
        return node;
    }

    Node new172()
    {
        TNull node1 = (TNull) pop();
        ANullLiteral node = new ANullLiteral(node1);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {15, SHIFT, 1}, {35, SHIFT, 2}, {82, SHIFT, 3}, },
			{{-1, ERROR, 1}, {35, SHIFT, 9}, },
			{{-1, ERROR, 2}, {0, SHIFT, 10}, {7, SHIFT, 11}, {16, SHIFT, 12}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 4}, {83, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 7}, {35, SHIFT, 2}, {82, SHIFT, 14}, },
			{{-1, REDUCE, 4}, {15, SHIFT, 1}, },
			{{-1, ERROR, 9}, {0, SHIFT, 10}, {7, SHIFT, 17}, {16, SHIFT, 12}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 11}, {81, SHIFT, 19}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 13}, {7, SHIFT, 20}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 17}, {81, SHIFT, 21}, },
			{{-1, ERROR, 18}, {7, SHIFT, 22}, },
			{{-1, ERROR, 19}, {14, SHIFT, 23}, {65, SHIFT, 24}, },
			{{-1, ERROR, 20}, {81, SHIFT, 26}, },
			{{-1, ERROR, 21}, {14, SHIFT, 23}, {24, SHIFT, 27}, },
			{{-1, ERROR, 22}, {81, SHIFT, 29}, },
			{{-1, ERROR, 23}, {81, SHIFT, 30}, },
			{{-1, ERROR, 24}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 25}, {65, SHIFT, 37}, },
			{{-1, ERROR, 26}, {14, SHIFT, 23}, {65, SHIFT, 38}, },
			{{-1, ERROR, 27}, {80, SHIFT, 40}, },
			{{-1, ERROR, 28}, {24, SHIFT, 41}, },
			{{-1, ERROR, 29}, {14, SHIFT, 23}, {24, SHIFT, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 31}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {81, SHIFT, 47}, },
			{{-1, ERROR, 32}, {81, SHIFT, 49}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 35}, {35, SHIFT, 50}, {66, SHIFT, 51}, },
			{{-1, ERROR, 36}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 37}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 38}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 39}, {65, SHIFT, 61}, },
			{{-1, ERROR, 40}, {65, SHIFT, 62}, },
			{{-1, ERROR, 41}, {80, SHIFT, 63}, },
			{{-1, ERROR, 42}, {80, SHIFT, 64}, },
			{{-1, ERROR, 43}, {24, SHIFT, 65}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 48}, {81, SHIFT, 66}, },
			{{-1, ERROR, 49}, {68, SHIFT, 68}, },
			{{-1, ERROR, 50}, {0, SHIFT, 69}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 70}, {26, SHIFT, 46}, {38, SHIFT, 71}, {41, SHIFT, 72}, {47, SHIFT, 73}, {81, SHIFT, 74}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 54}, {35, SHIFT, 78}, {66, SHIFT, 79}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 56}, {35, SHIFT, 50}, {66, SHIFT, 81}, },
			{{-1, ERROR, 57}, {35, SHIFT, 50}, {66, SHIFT, 83}, },
			{{-1, ERROR, 58}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 59}, {35, SHIFT, 50}, {66, SHIFT, 86}, },
			{{-1, ERROR, 60}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 61}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 62}, {35, SHIFT, 91}, },
			{{-1, ERROR, 63}, {65, SHIFT, 94}, },
			{{-1, ERROR, 64}, {65, SHIFT, 95}, },
			{{-1, ERROR, 65}, {80, SHIFT, 96}, },
			{{-1, REDUCE, 50}, {72, SHIFT, 97}, },
			{{-1, ERROR, 67}, {67, SHIFT, 100}, },
			{{-1, ERROR, 68}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 101}, {81, SHIFT, 47}, },
			{{-1, ERROR, 69}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 71}, {47, SHIFT, 106}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 44}, {68, SHIFT, 68}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 76}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, ERROR, 77}, {81, SHIFT, 108}, },
			{{-1, ERROR, 78}, {0, SHIFT, 69}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 70}, {26, SHIFT, 46}, {38, SHIFT, 71}, {41, SHIFT, 72}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 82}, {35, SHIFT, 78}, {66, SHIFT, 109}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 84}, {35, SHIFT, 78}, {66, SHIFT, 110}, },
			{{-1, ERROR, 85}, {35, SHIFT, 50}, {66, SHIFT, 111}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 87}, {35, SHIFT, 78}, {66, SHIFT, 113}, },
			{{-1, ERROR, 88}, {35, SHIFT, 50}, {66, SHIFT, 114}, },
			{{-1, ERROR, 89}, {35, SHIFT, 50}, {66, SHIFT, 116}, },
			{{-1, ERROR, 90}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 91}, {81, SHIFT, 119}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 93}, {35, SHIFT, 120}, {66, SHIFT, 121}, },
			{{-1, ERROR, 94}, {35, SHIFT, 91}, },
			{{-1, ERROR, 95}, {35, SHIFT, 91}, },
			{{-1, ERROR, 96}, {65, SHIFT, 127}, },
			{{-1, ERROR, 97}, {81, SHIFT, 128}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 51}, {72, SHIFT, 97}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 101}, {65, SHIFT, 130}, },
			{{-1, ERROR, 102}, {81, SHIFT, 131}, },
			{{-1, ERROR, 103}, {69, SHIFT, 132}, },
			{{-1, REDUCE, 67}, {72, SHIFT, 133}, },
			{{-1, ERROR, 105}, {81, SHIFT, 136}, },
			{{-1, ERROR, 106}, {29, SHIFT, 137}, },
			{{-1, ERROR, 107}, {81, SHIFT, 138}, },
			{{-1, ERROR, 108}, {68, SHIFT, 139}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 112}, {35, SHIFT, 78}, {66, SHIFT, 140}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 115}, {35, SHIFT, 78}, {66, SHIFT, 141}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 117}, {35, SHIFT, 78}, {66, SHIFT, 142}, },
			{{-1, ERROR, 118}, {35, SHIFT, 50}, {66, SHIFT, 143}, },
			{{-1, ERROR, 119}, {68, SHIFT, 145}, },
			{{-1, ERROR, 120}, {0, SHIFT, 146}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 147}, {26, SHIFT, 46}, {41, SHIFT, 148}, {47, SHIFT, 73}, {81, SHIFT, 149}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 124}, {35, SHIFT, 152}, {66, SHIFT, 153}, },
			{{-1, ERROR, 125}, {35, SHIFT, 120}, {66, SHIFT, 155}, },
			{{-1, ERROR, 126}, {35, SHIFT, 120}, {66, SHIFT, 157}, },
			{{-1, ERROR, 127}, {35, SHIFT, 91}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 130}, {39, SHIFT, 160}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 132}, {65, SHIFT, 161}, },
			{{-1, ERROR, 133}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 68}, {72, SHIFT, 133}, },
			{{-1, ERROR, 136}, {68, SHIFT, 164}, },
			{{-1, ERROR, 137}, {68, SHIFT, 165}, },
			{{-1, ERROR, 138}, {68, SHIFT, 166}, },
			{{-1, ERROR, 139}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 167}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 144}, {35, SHIFT, 78}, {66, SHIFT, 169}, },
			{{-1, ERROR, 145}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 170}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 44}, {68, SHIFT, 145}, },
			{{-1, ERROR, 150}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, ERROR, 151}, {81, SHIFT, 173}, },
			{{-1, ERROR, 152}, {0, SHIFT, 146}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 147}, {26, SHIFT, 46}, {41, SHIFT, 148}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 156}, {35, SHIFT, 152}, {66, SHIFT, 174}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 158}, {35, SHIFT, 152}, {66, SHIFT, 175}, },
			{{-1, ERROR, 159}, {35, SHIFT, 120}, {66, SHIFT, 176}, },
			{{-1, ERROR, 160}, {68, SHIFT, 178}, },
			{{-1, ERROR, 161}, {39, SHIFT, 179}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 164}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 180}, {81, SHIFT, 47}, },
			{{-1, ERROR, 165}, {81, SHIFT, 182}, },
			{{-1, ERROR, 166}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 184}, {81, SHIFT, 47}, },
			{{-1, ERROR, 167}, {65, SHIFT, 186}, },
			{{-1, ERROR, 168}, {69, SHIFT, 187}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 170}, {67, SHIFT, 188}, },
			{{-1, ERROR, 171}, {69, SHIFT, 189}, },
			{{-1, ERROR, 172}, {81, SHIFT, 190}, },
			{{-1, ERROR, 173}, {68, SHIFT, 191}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 177}, {35, SHIFT, 152}, {66, SHIFT, 192}, },
			{{-1, ERROR, 178}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 199}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 179}, {68, SHIFT, 225}, },
			{{-1, ERROR, 180}, {67, SHIFT, 226}, },
			{{-1, ERROR, 181}, {69, SHIFT, 227}, },
			{{-1, ERROR, 182}, {70, SHIFT, 228}, {81, SHIFT, 229}, },
			{{-1, ERROR, 183}, {69, SHIFT, 230}, },
			{{-1, ERROR, 184}, {65, SHIFT, 231}, },
			{{-1, ERROR, 185}, {69, SHIFT, 232}, },
			{{-1, ERROR, 186}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 238}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 187}, {65, SHIFT, 251}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 189}, {67, SHIFT, 252}, },
			{{-1, ERROR, 190}, {68, SHIFT, 253}, },
			{{-1, ERROR, 191}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 254}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 193}, {81, SHIFT, 256}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 152}, },
			{{-1, ERROR, 196}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 197}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 198}, {6, SHIFT, 260}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 199}, {67, SHIFT, 262}, },
			{{-1, REDUCE, 172}, },
			{{-1, REDUCE, 168}, },
			{{-1, REDUCE, 169}, },
			{{-1, REDUCE, 170}, },
			{{-1, REDUCE, 167}, },
			{{-1, REDUCE, 171}, },
			{{-1, REDUCE, 149}, {50, SHIFT, 263}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 162}, {72, SHIFT, 264}, },
			{{-1, REDUCE, 120}, {59, SHIFT, 267}, },
			{{-1, REDUCE, 122}, {58, SHIFT, 268}, },
			{{-1, REDUCE, 124}, {54, SHIFT, 269}, {57, SHIFT, 270}, },
			{{-1, REDUCE, 126}, {25, SHIFT, 271}, {51, SHIFT, 272}, {52, SHIFT, 273}, {55, SHIFT, 274}, {56, SHIFT, 275}, },
			{{-1, REDUCE, 129}, {60, SHIFT, 276}, {61, SHIFT, 277}, },
			{{-1, REDUCE, 135}, {62, SHIFT, 278}, {63, SHIFT, 279}, {64, SHIFT, 280}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 144}, {73, REDUCE, 160}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 154}, },
			{{-1, REDUCE, 155}, },
			{{-1, ERROR, 222}, {73, SHIFT, 281}, },
			{{-1, ERROR, 223}, {69, SHIFT, 282}, },
			{{-1, REDUCE, 151}, },
			{{-1, ERROR, 225}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 283}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 227}, {67, SHIFT, 285}, },
			{{-1, ERROR, 228}, {71, SHIFT, 286}, },
			{{-1, ERROR, 229}, {70, SHIFT, 287}, },
			{{-1, ERROR, 230}, {65, SHIFT, 288}, },
			{{-1, ERROR, 231}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 289}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 232}, {65, SHIFT, 291}, },
			{{-1, ERROR, 233}, {68, SHIFT, 292}, },
			{{-1, ERROR, 234}, {68, SHIFT, 293}, },
			{{-1, ERROR, 235}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {67, SHIFT, 294}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 236}, {68, SHIFT, 296}, },
			{{-1, ERROR, 237}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 297}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 105}, },
			{{-1, ERROR, 240}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 149}, {50, SHIFT, 263}, {74, SHIFT, 300}, {81, REDUCE, 44}, },
			{{-1, ERROR, 242}, {81, SHIFT, 66}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 245}, {67, SHIFT, 302}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 118}, {73, REDUCE, 154}, },
			{{-1, REDUCE, 116}, {73, REDUCE, 155}, },
			{{-1, ERROR, 250}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 303}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 251}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 305}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 253}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 307}, {81, SHIFT, 47}, },
			{{-1, ERROR, 254}, {67, SHIFT, 309}, },
			{{-1, ERROR, 255}, {69, SHIFT, 310}, },
			{{-1, ERROR, 256}, {68, SHIFT, 311}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 143}, },
			{{-1, ERROR, 260}, {69, SHIFT, 312}, },
			{{-1, ERROR, 261}, {69, SHIFT, 313}, },
			{{-1, ERROR, 262}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 314}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 263}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 264}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 165}, },
			{{-1, REDUCE, 163}, {72, SHIFT, 264}, },
			{{-1, ERROR, 267}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 268}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 269}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 270}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 271}, {81, SHIFT, 323}, },
			{{-1, ERROR, 272}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 273}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 274}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 275}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 276}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 277}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 278}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 279}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 280}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, ERROR, 281}, {81, SHIFT, 333}, },
			{{-1, ERROR, 282}, {67, SHIFT, 334}, },
			{{-1, ERROR, 283}, {67, SHIFT, 335}, },
			{{-1, ERROR, 284}, {69, SHIFT, 336}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 286}, {81, SHIFT, 337}, },
			{{-1, ERROR, 287}, {71, SHIFT, 338}, },
			{{-1, ERROR, 288}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 339}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 290}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 341}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 291}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 342}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 292}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 344}, },
			{{-1, ERROR, 293}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 295}, {67, SHIFT, 347}, },
			{{-1, ERROR, 296}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 298}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 349}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 299}, {69, SHIFT, 350}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 301}, {67, SHIFT, 351}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 306}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 352}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 307}, {67, SHIFT, 353}, },
			{{-1, ERROR, 308}, {69, SHIFT, 354}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 310}, {67, SHIFT, 355}, },
			{{-1, ERROR, 311}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 356}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 312}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, REDUCE, 153}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 257}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 315}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 360}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 119}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 123}, {58, SHIFT, 268}, },
			{{-1, REDUCE, 125}, {54, SHIFT, 269}, {57, SHIFT, 270}, },
			{{-1, REDUCE, 127}, {25, SHIFT, 271}, {51, SHIFT, 272}, {52, SHIFT, 273}, {55, SHIFT, 274}, {56, SHIFT, 275}, },
			{{-1, REDUCE, 128}, {25, SHIFT, 271}, {51, SHIFT, 272}, {52, SHIFT, 273}, {55, SHIFT, 274}, {56, SHIFT, 275}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 131}, {60, SHIFT, 276}, {61, SHIFT, 277}, },
			{{-1, REDUCE, 130}, {60, SHIFT, 276}, {61, SHIFT, 277}, },
			{{-1, REDUCE, 132}, {60, SHIFT, 276}, {61, SHIFT, 277}, },
			{{-1, REDUCE, 133}, {60, SHIFT, 276}, {61, SHIFT, 277}, },
			{{-1, REDUCE, 136}, {62, SHIFT, 278}, {63, SHIFT, 279}, {64, SHIFT, 280}, },
			{{-1, REDUCE, 137}, {62, SHIFT, 278}, {63, SHIFT, 279}, {64, SHIFT, 280}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 141}, },
			{{-1, ERROR, 333}, {68, SHIFT, 361}, },
			{{-1, ERROR, 334}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 362}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 335}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 364}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 336}, {67, SHIFT, 366}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 340}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 367}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 343}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 368}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 149}, {50, SHIFT, 263}, {74, SHIFT, 300}, },
			{{-1, ERROR, 345}, {67, SHIFT, 369}, },
			{{-1, ERROR, 346}, {69, SHIFT, 370}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 348}, {69, SHIFT, 371}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 153}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 354}, {67, SHIFT, 372}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 156}, },
			{{-1, ERROR, 357}, {69, SHIFT, 373}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 361}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 374}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 363}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 376}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 365}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 377}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 366}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 378}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 369}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 370}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 381}, {21, SHIFT, 382}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 383}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 371}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 158}, },
			{{-1, ERROR, 375}, {69, SHIFT, 388}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 379}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {66, SHIFT, 389}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 380}, {67, SHIFT, 390}, },
			{{-1, ERROR, 381}, {68, SHIFT, 391}, },
			{{-1, ERROR, 382}, {68, SHIFT, 392}, },
			{{-1, ERROR, 383}, {68, SHIFT, 393}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 98}, {13, REDUCE, 111}, },
			{{-1, ERROR, 386}, {13, SHIFT, 394}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 390}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 344}, },
			{{-1, ERROR, 391}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 344}, },
			{{-1, ERROR, 392}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 393}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 394}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 395}, {69, SHIFT, 400}, },
			{{-1, ERROR, 396}, {67, SHIFT, 401}, },
			{{-1, ERROR, 397}, {69, SHIFT, 402}, },
			{{-1, ERROR, 398}, {69, SHIFT, 403}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 400}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 233}, {21, SHIFT, 234}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 236}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 401}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 402}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 381}, {21, SHIFT, 382}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 383}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 403}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 381}, {21, SHIFT, 382}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 383}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 405}, {67, SHIFT, 408}, },
			{{-1, ERROR, 406}, {13, SHIFT, 409}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 408}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 344}, },
			{{-1, ERROR, 409}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 381}, {21, SHIFT, 382}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 383}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, ERROR, 410}, {69, SHIFT, 412}, },
			{{-1, REDUCE, 112}, },
			{{-1, ERROR, 412}, {1, SHIFT, 44}, {6, SHIFT, 45}, {19, SHIFT, 381}, {21, SHIFT, 382}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 235}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 383}, {65, SHIFT, 237}, {67, SHIFT, 239}, {68, SHIFT, 240}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 113}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {7, 15}, },
			{{-1, 13}, {9, 18}, },
			{{-1, 6}, {8, 16}, },
			{{-1, 25}, {21, 28}, {26, 39}, {29, 43}, },
			{{-1, 242}, {31, 48}, {50, 75}, {68, 102}, {69, 75}, {76, 75}, {78, 75}, {120, 75}, {133, 102}, {139, 102}, {145, 102}, {150, 75}, {152, 75}, {164, 102}, {166, 102}, {191, 102}, {253, 102}, },
			{{-1, 33}, {36, 55}, {58, 55}, {60, 55}, {90, 55}, },
			{{-1, -1}, },
			{{-1, 67}, {242, 301}, },
			{{-1, 98}, {99, 129}, },
			{{-1, 34}, {35, 52}, {56, 52}, {57, 52}, {59, 52}, {85, 52}, {88, 52}, {89, 52}, {118, 52}, },
			{{-1, 92}, {93, 122}, {125, 122}, {126, 122}, {159, 122}, },
			{{-1, 103}, {139, 168}, {145, 171}, {164, 181}, {166, 185}, {191, 255}, {253, 308}, },
			{{-1, 134}, {135, 163}, },
			{{-1, 104}, {133, 162}, },
			{{-1, 53}, {54, 80}, {82, 80}, {84, 80}, {87, 80}, {112, 80}, {115, 80}, {117, 80}, {144, 80}, },
			{{-1, 76}, },
			{{-1, 183}, },
			{{-1, 123}, {124, 154}, {156, 154}, {158, 154}, {177, 154}, },
			{{-1, 150}, },
			{{-1, 77}, {69, 105}, {76, 107}, {120, 151}, {150, 172}, {152, 151}, },
			{{-1, 243}, {250, 304}, {290, 304}, {298, 304}, {306, 304}, {315, 304}, {340, 304}, {343, 304}, {363, 304}, {365, 304}, {370, 384}, {371, 387}, {379, 304}, {394, 399}, {400, 404}, {402, 384}, {403, 387}, {409, 399}, {412, 404}, },
			{{-1, -1}, },
			{{-1, 244}, {370, 385}, {402, 385}, {403, 385}, {409, 385}, {412, 385}, },
			{{-1, 386}, {402, 406}, {403, 407}, {409, 411}, {412, 413}, },
			{{-1, 245}, {292, 345}, {390, 395}, {391, 396}, {408, 410}, },
			{{-1, 246}, {178, 207}, {198, 207}, {225, 207}, {235, 207}, {240, 207}, {263, 207}, {264, 207}, {293, 207}, {296, 207}, {311, 207}, {361, 207}, {369, 207}, {392, 207}, {393, 207}, {401, 207}, },
			{{-1, 208}, {198, 261}, {235, 295}, {240, 299}, {263, 316}, {264, 317}, {293, 346}, {296, 348}, {369, 380}, {392, 397}, {393, 398}, {401, 405}, },
			{{-1, 209}, },
			{{-1, 210}, {267, 319}, },
			{{-1, 211}, {268, 320}, },
			{{-1, 212}, {269, 321}, {270, 322}, },
			{{-1, 213}, {272, 324}, {273, 325}, {274, 326}, {275, 327}, },
			{{-1, 214}, {276, 328}, {277, 329}, },
			{{-1, 215}, {196, 258}, {197, 259}, {278, 330}, {279, 331}, {280, 332}, {312, 358}, },
			{{-1, 216}, {313, 359}, },
			{{-1, 217}, },
			{{-1, 218}, {186, 247}, {231, 247}, {237, 247}, {250, 247}, {251, 247}, {262, 247}, {288, 247}, {290, 247}, {291, 247}, {292, 247}, {298, 247}, {306, 247}, {315, 247}, {334, 247}, {335, 247}, {340, 247}, {343, 247}, {363, 247}, {365, 247}, {366, 247}, {370, 247}, {371, 247}, {379, 247}, {390, 247}, {391, 247}, {394, 247}, {400, 247}, {402, 247}, {403, 247}, {408, 247}, {409, 247}, {412, 247}, },
			{{-1, 219}, },
			{{-1, 220}, {186, 248}, {231, 248}, {237, 248}, {250, 248}, {251, 248}, {262, 248}, {288, 248}, {290, 248}, {291, 248}, {292, 248}, {298, 248}, {306, 248}, {315, 248}, {334, 248}, {335, 248}, {340, 248}, {343, 248}, {363, 248}, {365, 248}, {366, 248}, {370, 248}, {371, 248}, {379, 248}, {390, 248}, {391, 248}, {394, 248}, {400, 248}, {402, 248}, {403, 248}, {408, 248}, {409, 248}, {412, 248}, },
			{{-1, 221}, {186, 249}, {231, 249}, {237, 249}, {250, 249}, {251, 249}, {262, 249}, {288, 249}, {290, 249}, {291, 249}, {292, 249}, {298, 249}, {306, 249}, {315, 249}, {334, 249}, {335, 249}, {340, 249}, {343, 249}, {363, 249}, {365, 249}, {366, 249}, {370, 249}, {371, 249}, {379, 249}, {390, 249}, {391, 249}, {394, 249}, {400, 249}, {402, 249}, {403, 249}, {408, 249}, {409, 249}, {412, 249}, },
			{{-1, 222}, },
			{{-1, 223}, {225, 284}, {311, 357}, {361, 375}, },
			{{-1, 265}, {266, 318}, },
			{{-1, 224}, },
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 35}, {36, 56}, {37, 57}, {38, 59}, {58, 85}, {60, 88}, {61, 89}, {90, 118}, },
			{{-1, 36}, {37, 58}, {38, 60}, {61, 90}, },
			{{-1, 54}, {56, 82}, {57, 84}, {59, 87}, {85, 112}, {88, 115}, {89, 117}, {118, 144}, },
			{{-1, 93}, {94, 125}, {95, 126}, {127, 159}, },
			{{-1, 124}, {125, 156}, {126, 158}, {159, 177}, },
			{{-1, 99}, },
			{{-1, 250}, {231, 290}, {237, 298}, {251, 306}, {262, 315}, {288, 340}, {291, 343}, {334, 363}, {335, 365}, {366, 379}, },
			{{-1, 135}, },
			{{-1, 266}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'extern', 'public', importpath",
			"expecting: 'public'",
			"expecting: 'abstract', 'class', 'final'",
			"expecting: 'public', importpath",
			"expecting: EOF",
			"expecting: 'extern', EOF",
			"expecting: 'class'",
			"expecting: identifier",
			"expecting: 'extends', '{'",
			"expecting: 'extends', 'in'",
			"expecting: 'protected', 'public'",
			"expecting: '{'",
			"expecting: stringconst",
			"expecting: 'in'",
			"expecting: 'in', '{'",
			"expecting: 'boolean', 'char', 'int', identifier",
			"expecting: 'public', '}'",
			"expecting: '('",
			"expecting: 'abstract', 'boolean', 'char', 'final', 'int', 'static', 'synchronized', 'void', identifier",
			"expecting: ';', ','",
			"expecting: ';'",
			"expecting: 'boolean', 'char', 'int', ')', identifier",
			"expecting: 'boolean', 'char', 'int', 'void', identifier",
			"expecting: 'void'",
			"expecting: '(', identifier",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'main'",
			"expecting: 'abstract', 'boolean', 'char', 'final', 'int', 'synchronized', 'void', identifier",
			"expecting: 'super'",
			"expecting: 'new', 'super', 'this', '!', '-', '(', ')', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: '[', identifier",
			"expecting: 'boolean', 'char', 'for', 'if', 'int', 'new', 'return', 'super', 'this', 'while', '{', '}', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: '.'",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', ')', ',', '.'",
			"expecting: 'new', 'super', 'this', '!', '-', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'char', 'new', 'super', 'this', '!', '-', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'instanceof', '=', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', ')', ',', '.'",
			"expecting: ';', ')', ','",
			"expecting: '||', ';', ')', ','",
			"expecting: '&&', '||', ';', ')', ','",
			"expecting: '==', '!=', '&&', '||', ';', ')', ','",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', ';', ')', ','",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', ';', ')', ','",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', ')', ','",
			"expecting: ']'",
			"expecting: '['",
			"expecting: 'new', 'super', 'this', '!', '-', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'boolean', 'char', 'else', 'for', 'if', 'int', 'new', 'return', 'super', 'this', 'while', '{', '}', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: '=', '.', '++', identifier",
			"expecting: ';', ')'",
			"expecting: ';', ')', '.'",
			"expecting: 'new', 'super', 'this', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'instanceof', 'new', 'super', 'this', '>', '<', '!', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', '(', ')', ',', '.', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: '=', '.', '++'",
			"expecting: 'boolean', 'char', 'for', 'if', 'int', 'new', 'return', 'super', 'this', 'while', '{', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 3, 5, 2, 6, 7, 6, 6, 3, 4, 5, 7, 6, 8, 7, 9, 7, 7, 10, 11, 8, 12, 13, 9, 14, 15, 7, 10, 16, 16, 10, 10, 10, 11, 11, 12, 12, 13, 7, 7, 7, 7, 7, 17, 18, 4, 16, 16, 16, 10, 16, 16, 10, 16, 10, 10, 1, 11, 11, 12, 19, 20, 21, 22, 22, 23, 22, 7, 24, 7, 22, 7, 18, 4, 16, 4, 16, 4, 16, 16, 4, 16, 16, 16, 10, 7, 16, 16, 1, 1, 11, 7, 19, 19, 10, 11, 7, 25, 26, 7, 27, 7, 17, 4, 4, 4, 16, 4, 4, 16, 4, 16, 16, 17, 28, 5, 16, 16, 16, 16, 16, 1, 19, 19, 29, 26, 11, 15, 26, 26, 17, 17, 17, 21, 4, 4, 4, 4, 16, 21, 22, 22, 22, 24, 22, 7, 28, 5, 16, 5, 16, 5, 16, 16, 17, 29, 26, 26, 21, 7, 21, 11, 25, 4, 20, 25, 7, 17, 5, 5, 5, 16, 30, 17, 20, 25, 31, 25, 11, 25, 32, 11, 16, 20, 17, 21, 5, 7, 33, 34, 35, 35, 36, 20, 34, 34, 34, 34, 34, 34, 37, 38, 26, 39, 40, 41, 42, 43, 44, 44, 44, 44, 34, 34, 34, 34, 33, 25, 34, 30, 16, 20, 45, 46, 11, 32, 11, 17, 17, 47, 17, 32, 16, 48, 35, 49, 7, 32, 32, 20, 50, 33, 51, 51, 32, 32, 16, 21, 20, 25, 17, 34, 44, 44, 25, 25, 32, 35, 35, 26, 26, 35, 35, 35, 35, 7, 35, 35, 35, 35, 35, 35, 35, 35, 35, 7, 20, 20, 25, 16, 7, 45, 32, 16, 32, 32, 52, 35, 48, 20, 35, 48, 32, 25, 50, 20, 48, 16, 32, 16, 32, 20, 25, 16, 20, 30, 35, 53, 16, 32, 38, 26, 26, 40, 41, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 44, 17, 32, 32, 20, 25, 25, 16, 32, 16, 16, 32, 54, 20, 25, 48, 25, 48, 33, 32, 16, 16, 20, 16, 34, 25, 44, 44, 16, 30, 16, 32, 16, 32, 32, 16, 16, 35, 55, 55, 16, 34, 34, 25, 16, 16, 16, 32, 20, 17, 17, 17, 32, 48, 56, 32, 34, 16, 52, 52, 35, 35, 55, 25, 20, 25, 25, 32, 55, 35, 55, 55, 32, 20, 56, 56, 52, 55, 25, 56, 55, 56, 
        };*/
}
