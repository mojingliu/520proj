/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.analysis;

import java.util.*;
import joosc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPClassfile().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inADefaultClassfile(ADefaultClassfile node)
    {
        defaultIn(node);
    }

    public void outADefaultClassfile(ADefaultClassfile node)
    {
        defaultOut(node);
    }

    public void caseADefaultClassfile(ADefaultClassfile node)
    {
        inADefaultClassfile(node);
        if(node.getPClass() != null)
        {
            node.getPClass().apply(this);
        }
        outADefaultClassfile(node);
    }

    public void inAExternClassfile(AExternClassfile node)
    {
        defaultIn(node);
    }

    public void outAExternClassfile(AExternClassfile node)
    {
        defaultOut(node);
    }

    public void caseAExternClassfile(AExternClassfile node)
    {
        inAExternClassfile(node);
        {
            Object temp[] = node.getClasses().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExternClass) temp[i]).apply(this);
            }
        }
        outAExternClassfile(node);
    }

    public void inAClass(AClass node)
    {
        defaultIn(node);
    }

    public void outAClass(AClass node)
    {
        defaultOut(node);
    }

    public void caseAClass(AClass node)
    {
        inAClass(node);
        if(node.getClassmods() != null)
        {
            node.getClassmods().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtension() != null)
        {
            node.getExtension().apply(this);
        }
        {
            Object temp[] = node.getFields().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PField) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getConstructors().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PConstructor) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getMethods().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PMethod) temp[i]).apply(this);
            }
        }
        outAClass(node);
    }

    public void inAFinalClassmods(AFinalClassmods node)
    {
        defaultIn(node);
    }

    public void outAFinalClassmods(AFinalClassmods node)
    {
        defaultOut(node);
    }

    public void caseAFinalClassmods(AFinalClassmods node)
    {
        inAFinalClassmods(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAFinalClassmods(node);
    }

    public void inAAbstractClassmods(AAbstractClassmods node)
    {
        defaultIn(node);
    }

    public void outAAbstractClassmods(AAbstractClassmods node)
    {
        defaultOut(node);
    }

    public void caseAAbstractClassmods(AAbstractClassmods node)
    {
        inAAbstractClassmods(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        outAAbstractClassmods(node);
    }

    public void inAExternClass(AExternClass node)
    {
        defaultIn(node);
    }

    public void outAExternClass(AExternClass node)
    {
        defaultOut(node);
    }

    public void caseAExternClass(AExternClass node)
    {
        inAExternClass(node);
        if(node.getClassmods() != null)
        {
            node.getClassmods().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExtension() != null)
        {
            node.getExtension().apply(this);
        }
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        {
            Object temp[] = node.getConstructors().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExternConstructor) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getMethods().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExternMethod) temp[i]).apply(this);
            }
        }
        outAExternClass(node);
    }

    public void inAExtension(AExtension node)
    {
        defaultIn(node);
    }

    public void outAExtension(AExtension node)
    {
        defaultOut(node);
    }

    public void caseAExtension(AExtension node)
    {
        inAExtension(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAExtension(node);
    }

    public void inAReferenceType(AReferenceType node)
    {
        defaultIn(node);
    }

    public void outAReferenceType(AReferenceType node)
    {
        defaultOut(node);
    }

    public void caseAReferenceType(AReferenceType node)
    {
        inAReferenceType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAReferenceType(node);
    }

    public void inACharType(ACharType node)
    {
        defaultIn(node);
    }

    public void outACharType(ACharType node)
    {
        defaultOut(node);
    }

    public void caseACharType(ACharType node)
    {
        inACharType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharType(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAPolynullType(APolynullType node)
    {
        defaultIn(node);
    }

    public void outAPolynullType(APolynullType node)
    {
        defaultOut(node);
    }

    public void caseAPolynullType(APolynullType node)
    {
        inAPolynullType(node);
        outAPolynullType(node);
    }

    public void inAVoidType(AVoidType node)
    {
        defaultIn(node);
    }

    public void outAVoidType(AVoidType node)
    {
        defaultOut(node);
    }

    public void caseAVoidType(AVoidType node)
    {
        inAVoidType(node);
        outAVoidType(node);
    }

    public void inAFirstField(AFirstField node)
    {
        defaultIn(node);
    }

    public void outAFirstField(AFirstField node)
    {
        defaultOut(node);
    }

    public void caseAFirstField(AFirstField node)
    {
        inAFirstField(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            Object temp[] = node.getIdentifiers().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TIdentifier) temp[i]).apply(this);
            }
        }
        outAFirstField(node);
    }

    public void inAField(AField node)
    {
        defaultIn(node);
    }

    public void outAField(AField node)
    {
        defaultOut(node);
    }

    public void caseAField(AField node)
    {
        inAField(node);
        {
            Object temp[] = node.getFields().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((POnefield) temp[i]).apply(this);
            }
        }
        outAField(node);
    }

    public void inAOnefield(AOnefield node)
    {
        defaultIn(node);
    }

    public void outAOnefield(AOnefield node)
    {
        defaultOut(node);
    }

    public void caseAOnefield(AOnefield node)
    {
        inAOnefield(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOnefield(node);
    }

    public void inAConstructor(AConstructor node)
    {
        defaultIn(node);
    }

    public void outAConstructor(AConstructor node)
    {
        defaultOut(node);
    }

    public void caseAConstructor(AConstructor node)
    {
        inAConstructor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFormals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getStmts().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        outAConstructor(node);
    }

    public void inAExternConstructor(AExternConstructor node)
    {
        defaultIn(node);
    }

    public void outAExternConstructor(AExternConstructor node)
    {
        defaultOut(node);
    }

    public void caseAExternConstructor(AExternConstructor node)
    {
        inAExternConstructor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFormals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        outAExternConstructor(node);
    }

    public void inAFormal(AFormal node)
    {
        defaultIn(node);
    }

    public void outAFormal(AFormal node)
    {
        defaultOut(node);
    }

    public void caseAFormal(AFormal node)
    {
        inAFormal(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFormal(node);
    }

    public void inAModMethod(AModMethod node)
    {
        defaultIn(node);
    }

    public void outAModMethod(AModMethod node)
    {
        defaultOut(node);
    }

    public void caseAModMethod(AModMethod node)
    {
        inAModMethod(node);
        if(node.getMethodmods() != null)
        {
            node.getMethodmods().apply(this);
        }
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFormals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getStmts().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        outAModMethod(node);
    }

    public void inANonmodMethod(ANonmodMethod node)
    {
        defaultIn(node);
    }

    public void outANonmodMethod(ANonmodMethod node)
    {
        defaultOut(node);
    }

    public void caseANonmodMethod(ANonmodMethod node)
    {
        inANonmodMethod(node);
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFormals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        {
            Object temp[] = node.getStmts().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        outANonmodMethod(node);
    }

    public void inAAbstractMethod(AAbstractMethod node)
    {
        defaultIn(node);
    }

    public void outAAbstractMethod(AAbstractMethod node)
    {
        defaultOut(node);
    }

    public void caseAAbstractMethod(AAbstractMethod node)
    {
        inAAbstractMethod(node);
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFormals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        outAAbstractMethod(node);
    }

    public void inAMainMethod(AMainMethod node)
    {
        defaultIn(node);
    }

    public void outAMainMethod(AMainMethod node)
    {
        defaultOut(node);
    }

    public void caseAMainMethod(AMainMethod node)
    {
        inAMainMethod(node);
        if(node.getMainargv() != null)
        {
            node.getMainargv().apply(this);
        }
        {
            Object temp[] = node.getStmts().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        outAMainMethod(node);
    }

    public void inAFinalMethodmods(AFinalMethodmods node)
    {
        defaultIn(node);
    }

    public void outAFinalMethodmods(AFinalMethodmods node)
    {
        defaultOut(node);
    }

    public void caseAFinalMethodmods(AFinalMethodmods node)
    {
        inAFinalMethodmods(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAFinalMethodmods(node);
    }

    public void inASynchronizedMethodmods(ASynchronizedMethodmods node)
    {
        defaultIn(node);
    }

    public void outASynchronizedMethodmods(ASynchronizedMethodmods node)
    {
        defaultOut(node);
    }

    public void caseASynchronizedMethodmods(ASynchronizedMethodmods node)
    {
        inASynchronizedMethodmods(node);
        if(node.getSynchronized() != null)
        {
            node.getSynchronized().apply(this);
        }
        outASynchronizedMethodmods(node);
    }

    public void inAMainargv(AMainargv node)
    {
        defaultIn(node);
    }

    public void outAMainargv(AMainargv node)
    {
        defaultOut(node);
    }

    public void caseAMainargv(AMainargv node)
    {
        inAMainargv(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        outAMainargv(node);
    }

    public void inAModExternMethod(AModExternMethod node)
    {
        defaultIn(node);
    }

    public void outAModExternMethod(AModExternMethod node)
    {
        defaultOut(node);
    }

    public void caseAModExternMethod(AModExternMethod node)
    {
        inAModExternMethod(node);
        if(node.getExternMethodmods() != null)
        {
            node.getExternMethodmods().apply(this);
        }
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFormals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        outAModExternMethod(node);
    }

    public void inANonmodExternMethod(ANonmodExternMethod node)
    {
        defaultIn(node);
    }

    public void outANonmodExternMethod(ANonmodExternMethod node)
    {
        defaultOut(node);
    }

    public void caseANonmodExternMethod(ANonmodExternMethod node)
    {
        inANonmodExternMethod(node);
        if(node.getReturntype() != null)
        {
            node.getReturntype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFormals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFormal) temp[i]).apply(this);
            }
        }
        outANonmodExternMethod(node);
    }

    public void inAFinalExternMethodmods(AFinalExternMethodmods node)
    {
        defaultIn(node);
    }

    public void outAFinalExternMethodmods(AFinalExternMethodmods node)
    {
        defaultOut(node);
    }

    public void caseAFinalExternMethodmods(AFinalExternMethodmods node)
    {
        inAFinalExternMethodmods(node);
        if(node.getFinal() != null)
        {
            node.getFinal().apply(this);
        }
        outAFinalExternMethodmods(node);
    }

    public void inAAbstractExternMethodmods(AAbstractExternMethodmods node)
    {
        defaultIn(node);
    }

    public void outAAbstractExternMethodmods(AAbstractExternMethodmods node)
    {
        defaultOut(node);
    }

    public void caseAAbstractExternMethodmods(AAbstractExternMethodmods node)
    {
        inAAbstractExternMethodmods(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        outAAbstractExternMethodmods(node);
    }

    public void inASynchronizedExternMethodmods(ASynchronizedExternMethodmods node)
    {
        defaultIn(node);
    }

    public void outASynchronizedExternMethodmods(ASynchronizedExternMethodmods node)
    {
        defaultOut(node);
    }

    public void caseASynchronizedExternMethodmods(ASynchronizedExternMethodmods node)
    {
        inASynchronizedExternMethodmods(node);
        if(node.getSynchronized() != null)
        {
            node.getSynchronized().apply(this);
        }
        outASynchronizedExternMethodmods(node);
    }

    public void inAVoidReturntype(AVoidReturntype node)
    {
        defaultIn(node);
    }

    public void outAVoidReturntype(AVoidReturntype node)
    {
        defaultOut(node);
    }

    public void caseAVoidReturntype(AVoidReturntype node)
    {
        inAVoidReturntype(node);
        outAVoidReturntype(node);
    }

    public void inANonvoidReturntype(ANonvoidReturntype node)
    {
        defaultIn(node);
    }

    public void outANonvoidReturntype(ANonvoidReturntype node)
    {
        defaultOut(node);
    }

    public void caseANonvoidReturntype(ANonvoidReturntype node)
    {
        inANonvoidReturntype(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outANonvoidReturntype(node);
    }

    public void inASkipStm(ASkipStm node)
    {
        defaultIn(node);
    }

    public void outASkipStm(ASkipStm node)
    {
        defaultOut(node);
    }

    public void caseASkipStm(ASkipStm node)
    {
        inASkipStm(node);
        outASkipStm(node);
    }

    public void inABlockStm(ABlockStm node)
    {
        defaultIn(node);
    }

    public void outABlockStm(ABlockStm node)
    {
        defaultOut(node);
    }

    public void caseABlockStm(ABlockStm node)
    {
        inABlockStm(node);
        {
            Object temp[] = node.getStmts().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PStm) temp[i]).apply(this);
            }
        }
        outABlockStm(node);
    }

    public void inAExpStm(AExpStm node)
    {
        defaultIn(node);
    }

    public void outAExpStm(AExpStm node)
    {
        defaultOut(node);
    }

    public void caseAExpStm(AExpStm node)
    {
        inAExpStm(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpStm(node);
    }

    public void inAReturnStm(AReturnStm node)
    {
        defaultIn(node);
    }

    public void outAReturnStm(AReturnStm node)
    {
        defaultOut(node);
    }

    public void caseAReturnStm(AReturnStm node)
    {
        inAReturnStm(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAReturnStm(node);
    }

    public void inADeclFirstStm(ADeclFirstStm node)
    {
        defaultIn(node);
    }

    public void outADeclFirstStm(ADeclFirstStm node)
    {
        defaultOut(node);
    }

    public void caseADeclFirstStm(ADeclFirstStm node)
    {
        inADeclFirstStm(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        {
            Object temp[] = node.getIdentifiers().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((TIdentifier) temp[i]).apply(this);
            }
        }
        outADeclFirstStm(node);
    }

    public void inADeclStm(ADeclStm node)
    {
        defaultIn(node);
    }

    public void outADeclStm(ADeclStm node)
    {
        defaultOut(node);
    }

    public void caseADeclStm(ADeclStm node)
    {
        inADeclStm(node);
        {
            Object temp[] = node.getLocals().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((POnelocal) temp[i]).apply(this);
            }
        }
        outADeclStm(node);
    }

    public void inASuperconsStm(ASuperconsStm node)
    {
        defaultIn(node);
    }

    public void outASuperconsStm(ASuperconsStm node)
    {
        defaultOut(node);
    }

    public void caseASuperconsStm(ASuperconsStm node)
    {
        inASuperconsStm(node);
        {
            Object temp[] = node.getArgs().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExp) temp[i]).apply(this);
            }
        }
        outASuperconsStm(node);
    }

    public void inAIfStm(AIfStm node)
    {
        defaultIn(node);
    }

    public void outAIfStm(AIfStm node)
    {
        defaultOut(node);
    }

    public void caseAIfStm(AIfStm node)
    {
        inAIfStm(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        outAIfStm(node);
    }

    public void inAIfelseStm(AIfelseStm node)
    {
        defaultIn(node);
    }

    public void outAIfelseStm(AIfelseStm node)
    {
        defaultOut(node);
    }

    public void caseAIfelseStm(AIfelseStm node)
    {
        inAIfelseStm(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getThenStm() != null)
        {
            node.getThenStm().apply(this);
        }
        if(node.getElseStm() != null)
        {
            node.getElseStm().apply(this);
        }
        outAIfelseStm(node);
    }

    public void inAWhileStm(AWhileStm node)
    {
        defaultIn(node);
    }

    public void outAWhileStm(AWhileStm node)
    {
        defaultOut(node);
    }

    public void caseAWhileStm(AWhileStm node)
    {
        inAWhileStm(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getStm() != null)
        {
            node.getStm().apply(this);
        }
        outAWhileStm(node);
    }

    public void inAOnelocal(AOnelocal node)
    {
        defaultIn(node);
    }

    public void outAOnelocal(AOnelocal node)
    {
        defaultOut(node);
    }

    public void caseAOnelocal(AOnelocal node)
    {
        inAOnelocal(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAOnelocal(node);
    }

    public void inAAssignExp(AAssignExp node)
    {
        defaultIn(node);
    }

    public void outAAssignExp(AAssignExp node)
    {
        defaultOut(node);
    }

    public void caseAAssignExp(AAssignExp node)
    {
        inAAssignExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAssignExp(node);
    }

    public void inAOrExp(AOrExp node)
    {
        defaultIn(node);
    }

    public void outAOrExp(AOrExp node)
    {
        defaultOut(node);
    }

    public void caseAOrExp(AOrExp node)
    {
        inAOrExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOrExp(node);
    }

    public void inAAndExp(AAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndExp(AAndExp node)
    {
        defaultOut(node);
    }

    public void caseAAndExp(AAndExp node)
    {
        inAAndExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAAndExp(node);
    }

    public void inAEqExp(AEqExp node)
    {
        defaultIn(node);
    }

    public void outAEqExp(AEqExp node)
    {
        defaultOut(node);
    }

    public void caseAEqExp(AEqExp node)
    {
        inAEqExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAEqExp(node);
    }

    public void inANeqExp(ANeqExp node)
    {
        defaultIn(node);
    }

    public void outANeqExp(ANeqExp node)
    {
        defaultOut(node);
    }

    public void caseANeqExp(ANeqExp node)
    {
        inANeqExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANeqExp(node);
    }

    public void inALtExp(ALtExp node)
    {
        defaultIn(node);
    }

    public void outALtExp(ALtExp node)
    {
        defaultOut(node);
    }

    public void caseALtExp(ALtExp node)
    {
        inALtExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALtExp(node);
    }

    public void inAGtExp(AGtExp node)
    {
        defaultIn(node);
    }

    public void outAGtExp(AGtExp node)
    {
        defaultOut(node);
    }

    public void caseAGtExp(AGtExp node)
    {
        inAGtExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGtExp(node);
    }

    public void inALeqExp(ALeqExp node)
    {
        defaultIn(node);
    }

    public void outALeqExp(ALeqExp node)
    {
        defaultOut(node);
    }

    public void caseALeqExp(ALeqExp node)
    {
        inALeqExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outALeqExp(node);
    }

    public void inAGeqExp(AGeqExp node)
    {
        defaultIn(node);
    }

    public void outAGeqExp(AGeqExp node)
    {
        defaultOut(node);
    }

    public void caseAGeqExp(AGeqExp node)
    {
        inAGeqExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAGeqExp(node);
    }

    public void inAInstanceofExp(AInstanceofExp node)
    {
        defaultIn(node);
    }

    public void outAInstanceofExp(AInstanceofExp node)
    {
        defaultOut(node);
    }

    public void caseAInstanceofExp(AInstanceofExp node)
    {
        inAInstanceofExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAInstanceofExp(node);
    }

    public void inAPlusExp(APlusExp node)
    {
        defaultIn(node);
    }

    public void outAPlusExp(APlusExp node)
    {
        defaultOut(node);
    }

    public void caseAPlusExp(APlusExp node)
    {
        inAPlusExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAPlusExp(node);
    }

    public void inAMinusExp(AMinusExp node)
    {
        defaultIn(node);
    }

    public void outAMinusExp(AMinusExp node)
    {
        defaultOut(node);
    }

    public void caseAMinusExp(AMinusExp node)
    {
        inAMinusExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMinusExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAModExp(node);
    }

    public void inAUminusExp(AUminusExp node)
    {
        defaultIn(node);
    }

    public void outAUminusExp(AUminusExp node)
    {
        defaultOut(node);
    }

    public void caseAUminusExp(AUminusExp node)
    {
        inAUminusExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUminusExp(node);
    }

    public void inANotExp(ANotExp node)
    {
        defaultIn(node);
    }

    public void outANotExp(ANotExp node)
    {
        defaultOut(node);
    }

    public void caseANotExp(ANotExp node)
    {
        inANotExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANotExp(node);
    }

    public void inATmpcastExp(ATmpcastExp node)
    {
        defaultIn(node);
    }

    public void outATmpcastExp(ATmpcastExp node)
    {
        defaultOut(node);
    }

    public void caseATmpcastExp(ATmpcastExp node)
    {
        inATmpcastExp(node);
        if(node.getCaster() != null)
        {
            node.getCaster().apply(this);
        }
        if(node.getCastee() != null)
        {
            node.getCastee().apply(this);
        }
        outATmpcastExp(node);
    }

    public void inACastExp(ACastExp node)
    {
        defaultIn(node);
    }

    public void outACastExp(ACastExp node)
    {
        defaultOut(node);
    }

    public void caseACastExp(ACastExp node)
    {
        inACastExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outACastExp(node);
    }

    public void inACasttocharExp(ACasttocharExp node)
    {
        defaultIn(node);
    }

    public void outACasttocharExp(ACasttocharExp node)
    {
        defaultOut(node);
    }

    public void caseACasttocharExp(ACasttocharExp node)
    {
        inACasttocharExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outACasttocharExp(node);
    }

    public void inAIdExp(AIdExp node)
    {
        defaultIn(node);
    }

    public void outAIdExp(AIdExp node)
    {
        defaultOut(node);
    }

    public void caseAIdExp(AIdExp node)
    {
        inAIdExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdExp(node);
    }

    public void inAThisExp(AThisExp node)
    {
        defaultIn(node);
    }

    public void outAThisExp(AThisExp node)
    {
        defaultOut(node);
    }

    public void caseAThisExp(AThisExp node)
    {
        inAThisExp(node);
        outAThisExp(node);
    }

    public void inANewExp(ANewExp node)
    {
        defaultIn(node);
    }

    public void outANewExp(ANewExp node)
    {
        defaultOut(node);
    }

    public void caseANewExp(ANewExp node)
    {
        inANewExp(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getArgs().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExp) temp[i]).apply(this);
            }
        }
        outANewExp(node);
    }

    public void inACallExp(ACallExp node)
    {
        defaultIn(node);
    }

    public void outACallExp(ACallExp node)
    {
        defaultOut(node);
    }

    public void caseACallExp(ACallExp node)
    {
        inACallExp(node);
        if(node.getReceiver() != null)
        {
            node.getReceiver().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getArgs().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExp) temp[i]).apply(this);
            }
        }
        outACallExp(node);
    }

    public void inAIntconstExp(AIntconstExp node)
    {
        defaultIn(node);
    }

    public void outAIntconstExp(AIntconstExp node)
    {
        defaultOut(node);
    }

    public void caseAIntconstExp(AIntconstExp node)
    {
        inAIntconstExp(node);
        if(node.getIntconst() != null)
        {
            node.getIntconst().apply(this);
        }
        outAIntconstExp(node);
    }

    public void inATrueExp(ATrueExp node)
    {
        defaultIn(node);
    }

    public void outATrueExp(ATrueExp node)
    {
        defaultOut(node);
    }

    public void caseATrueExp(ATrueExp node)
    {
        inATrueExp(node);
        outATrueExp(node);
    }

    public void inAFalseExp(AFalseExp node)
    {
        defaultIn(node);
    }

    public void outAFalseExp(AFalseExp node)
    {
        defaultOut(node);
    }

    public void caseAFalseExp(AFalseExp node)
    {
        inAFalseExp(node);
        outAFalseExp(node);
    }

    public void inACharconstExp(ACharconstExp node)
    {
        defaultIn(node);
    }

    public void outACharconstExp(ACharconstExp node)
    {
        defaultOut(node);
    }

    public void caseACharconstExp(ACharconstExp node)
    {
        inACharconstExp(node);
        if(node.getCharconst() != null)
        {
            node.getCharconst().apply(this);
        }
        outACharconstExp(node);
    }

    public void inAStringconstExp(AStringconstExp node)
    {
        defaultIn(node);
    }

    public void outAStringconstExp(AStringconstExp node)
    {
        defaultOut(node);
    }

    public void caseAStringconstExp(AStringconstExp node)
    {
        inAStringconstExp(node);
        if(node.getStringconst() != null)
        {
            node.getStringconst().apply(this);
        }
        outAStringconstExp(node);
    }

    public void inANullExp(ANullExp node)
    {
        defaultIn(node);
    }

    public void outANullExp(ANullExp node)
    {
        defaultOut(node);
    }

    public void caseANullExp(ANullExp node)
    {
        inANullExp(node);
        outANullExp(node);
    }

    public void inAObjectReceiver(AObjectReceiver node)
    {
        defaultIn(node);
    }

    public void outAObjectReceiver(AObjectReceiver node)
    {
        defaultOut(node);
    }

    public void caseAObjectReceiver(AObjectReceiver node)
    {
        inAObjectReceiver(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAObjectReceiver(node);
    }

    public void inASuperReceiver(ASuperReceiver node)
    {
        defaultIn(node);
    }

    public void outASuperReceiver(ASuperReceiver node)
    {
        defaultOut(node);
    }

    public void caseASuperReceiver(ASuperReceiver node)
    {
        inASuperReceiver(node);
        outASuperReceiver(node);
    }
}
