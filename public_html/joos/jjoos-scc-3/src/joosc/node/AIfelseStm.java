/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class AIfelseStm extends PStm
{
    private PExp _exp_;
    private PStm _thenStm_;
    private PStm _elseStm_;

    public AIfelseStm()
    {
    }

    public AIfelseStm(
        PExp _exp_,
        PStm _thenStm_,
        PStm _elseStm_)
    {
        setExp(_exp_);

        setThenStm(_thenStm_);

        setElseStm(_elseStm_);

    }
    public Object clone()
    {
        return new AIfelseStm(
            (PExp) cloneNode(_exp_),
            (PStm) cloneNode(_thenStm_),
            (PStm) cloneNode(_elseStm_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfelseStm(this);
    }

    public PExp getExp()
    {
        return _exp_;
    }

    public void setExp(PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp_ = node;
    }

    public PStm getThenStm()
    {
        return _thenStm_;
    }

    public void setThenStm(PStm node)
    {
        if(_thenStm_ != null)
        {
            _thenStm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _thenStm_ = node;
    }

    public PStm getElseStm()
    {
        return _elseStm_;
    }

    public void setElseStm(PStm node)
    {
        if(_elseStm_ != null)
        {
            _elseStm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _elseStm_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_exp_)
            + toString(_thenStm_)
            + toString(_elseStm_);
    }

    void removeChild(Node child)
    {
        if(_exp_ == child)
        {
            _exp_ = null;
            return;
        }

        if(_thenStm_ == child)
        {
            _thenStm_ = null;
            return;
        }

        if(_elseStm_ == child)
        {
            _elseStm_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(_thenStm_ == oldChild)
        {
            setThenStm((PStm) newChild);
            return;
        }

        if(_elseStm_ == oldChild)
        {
            setElseStm((PStm) newChild);
            return;
        }

    }
}
