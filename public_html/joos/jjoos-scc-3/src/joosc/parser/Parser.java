/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.parser;

import joosc.lexer.*;
import joosc.node.*;
import joosc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
	this.nodeList = listNode;

        if(!stack.hasNext())
        {
            stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return (ArrayList) ((State) stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(lexer.next());
                        push(action[1], list);
                        last_shift = action[1];
                    }
		    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: /* reduce AAdefaultclassfile1Classfile */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAdefaultclassfile2Classfile */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AExternClassfile */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAclass1Class */
		    {
			ArrayList list = new3();
			push(goTo(1), list);
		    }
		    break;
                    case 4: /* reduce AAclass2Class */
		    {
			ArrayList list = new4();
			push(goTo(1), list);
		    }
		    break;
                    case 5: /* reduce AAclass3Class */
		    {
			ArrayList list = new5();
			push(goTo(1), list);
		    }
		    break;
                    case 6: /* reduce AAclass4Class */
		    {
			ArrayList list = new6();
			push(goTo(1), list);
		    }
		    break;
                    case 7: /* reduce AAclass5Class */
		    {
			ArrayList list = new7();
			push(goTo(1), list);
		    }
		    break;
                    case 8: /* reduce AAclass6Class */
		    {
			ArrayList list = new8();
			push(goTo(1), list);
		    }
		    break;
                    case 9: /* reduce AAclass7Class */
		    {
			ArrayList list = new9();
			push(goTo(1), list);
		    }
		    break;
                    case 10: /* reduce AAclass8Class */
		    {
			ArrayList list = new10();
			push(goTo(1), list);
		    }
		    break;
                    case 11: /* reduce AAclass9Class */
		    {
			ArrayList list = new11();
			push(goTo(1), list);
		    }
		    break;
                    case 12: /* reduce AAclass10Class */
		    {
			ArrayList list = new12();
			push(goTo(1), list);
		    }
		    break;
                    case 13: /* reduce AAclass11Class */
		    {
			ArrayList list = new13();
			push(goTo(1), list);
		    }
		    break;
                    case 14: /* reduce AAclass12Class */
		    {
			ArrayList list = new14();
			push(goTo(1), list);
		    }
		    break;
                    case 15: /* reduce AAclass13Class */
		    {
			ArrayList list = new15();
			push(goTo(1), list);
		    }
		    break;
                    case 16: /* reduce AAclass14Class */
		    {
			ArrayList list = new16();
			push(goTo(1), list);
		    }
		    break;
                    case 17: /* reduce AAclass15Class */
		    {
			ArrayList list = new17();
			push(goTo(1), list);
		    }
		    break;
                    case 18: /* reduce AAclass16Class */
		    {
			ArrayList list = new18();
			push(goTo(1), list);
		    }
		    break;
                    case 19: /* reduce AFinalClassmods */
		    {
			ArrayList list = new19();
			push(goTo(2), list);
		    }
		    break;
                    case 20: /* reduce AAbstractClassmods */
		    {
			ArrayList list = new20();
			push(goTo(2), list);
		    }
		    break;
                    case 21: /* reduce AAexternclass1ExternClass */
		    {
			ArrayList list = new21();
			push(goTo(3), list);
		    }
		    break;
                    case 22: /* reduce AAexternclass2ExternClass */
		    {
			ArrayList list = new22();
			push(goTo(3), list);
		    }
		    break;
                    case 23: /* reduce AAexternclass3ExternClass */
		    {
			ArrayList list = new23();
			push(goTo(3), list);
		    }
		    break;
                    case 24: /* reduce AAexternclass4ExternClass */
		    {
			ArrayList list = new24();
			push(goTo(3), list);
		    }
		    break;
                    case 25: /* reduce AAexternclass5ExternClass */
		    {
			ArrayList list = new25();
			push(goTo(3), list);
		    }
		    break;
                    case 26: /* reduce AAexternclass6ExternClass */
		    {
			ArrayList list = new26();
			push(goTo(3), list);
		    }
		    break;
                    case 27: /* reduce AAexternclass7ExternClass */
		    {
			ArrayList list = new27();
			push(goTo(3), list);
		    }
		    break;
                    case 28: /* reduce AAexternclass8ExternClass */
		    {
			ArrayList list = new28();
			push(goTo(3), list);
		    }
		    break;
                    case 29: /* reduce AExtension */
		    {
			ArrayList list = new29();
			push(goTo(4), list);
		    }
		    break;
                    case 30: /* reduce AReferenceType */
		    {
			ArrayList list = new30();
			push(goTo(5), list);
		    }
		    break;
                    case 31: /* reduce ACharType */
		    {
			ArrayList list = new31();
			push(goTo(5), list);
		    }
		    break;
                    case 32: /* reduce ABooleanType */
		    {
			ArrayList list = new32();
			push(goTo(5), list);
		    }
		    break;
                    case 33: /* reduce AIntType */
		    {
			ArrayList list = new33();
			push(goTo(5), list);
		    }
		    break;
                    case 34: /* reduce AField */
		    {
			ArrayList list = new34();
			push(goTo(6), list);
		    }
		    break;
                    case 35: /* reduce AAidentifierlist1IdentifierList */
		    {
			ArrayList list = new35();
			push(goTo(7), list);
		    }
		    break;
                    case 36: /* reduce AAidentifierlist2IdentifierList */
		    {
			ArrayList list = new36();
			push(goTo(7), list);
		    }
		    break;
                    case 37: /* reduce AIdentifierListTail */
		    {
			ArrayList list = new37();
			push(goTo(8), list);
		    }
		    break;
                    case 38: /* reduce AAconstructor1Constructor */
		    {
			ArrayList list = new38();
			push(goTo(9), list);
		    }
		    break;
                    case 39: /* reduce AAconstructor2Constructor */
		    {
			ArrayList list = new39();
			push(goTo(9), list);
		    }
		    break;
                    case 40: /* reduce AAconstructor3Constructor */
		    {
			ArrayList list = new40();
			push(goTo(9), list);
		    }
		    break;
                    case 41: /* reduce AAconstructor4Constructor */
		    {
			ArrayList list = new41();
			push(goTo(9), list);
		    }
		    break;
                    case 42: /* reduce AAconstructor5Constructor */
		    {
			ArrayList list = new42();
			push(goTo(9), list);
		    }
		    break;
                    case 43: /* reduce AAconstructor6Constructor */
		    {
			ArrayList list = new43();
			push(goTo(9), list);
		    }
		    break;
                    case 44: /* reduce AAconstructor7Constructor */
		    {
			ArrayList list = new44();
			push(goTo(9), list);
		    }
		    break;
                    case 45: /* reduce AAconstructor8Constructor */
		    {
			ArrayList list = new45();
			push(goTo(9), list);
		    }
		    break;
                    case 46: /* reduce AAexternconstructor1ExternConstructor */
		    {
			ArrayList list = new46();
			push(goTo(10), list);
		    }
		    break;
                    case 47: /* reduce AAexternconstructor2ExternConstructor */
		    {
			ArrayList list = new47();
			push(goTo(10), list);
		    }
		    break;
                    case 48: /* reduce AAformallist1FormalList */
		    {
			ArrayList list = new48();
			push(goTo(11), list);
		    }
		    break;
                    case 49: /* reduce AAformallist2FormalList */
		    {
			ArrayList list = new49();
			push(goTo(11), list);
		    }
		    break;
                    case 50: /* reduce AFormalListTail */
		    {
			ArrayList list = new50();
			push(goTo(12), list);
		    }
		    break;
                    case 51: /* reduce AFormal */
		    {
			ArrayList list = new51();
			push(goTo(13), list);
		    }
		    break;
                    case 52: /* reduce AAmodmethod1Method */
		    {
			ArrayList list = new52();
			push(goTo(14), list);
		    }
		    break;
                    case 53: /* reduce AAmodmethod2Method */
		    {
			ArrayList list = new53();
			push(goTo(14), list);
		    }
		    break;
                    case 54: /* reduce AAmodmethod3Method */
		    {
			ArrayList list = new54();
			push(goTo(14), list);
		    }
		    break;
                    case 55: /* reduce AAmodmethod4Method */
		    {
			ArrayList list = new55();
			push(goTo(14), list);
		    }
		    break;
                    case 56: /* reduce AAnonmodmethod1Method */
		    {
			ArrayList list = new56();
			push(goTo(14), list);
		    }
		    break;
                    case 57: /* reduce AAnonmodmethod2Method */
		    {
			ArrayList list = new57();
			push(goTo(14), list);
		    }
		    break;
                    case 58: /* reduce AAnonmodmethod3Method */
		    {
			ArrayList list = new58();
			push(goTo(14), list);
		    }
		    break;
                    case 59: /* reduce AAnonmodmethod4Method */
		    {
			ArrayList list = new59();
			push(goTo(14), list);
		    }
		    break;
                    case 60: /* reduce AAabstractmethod1Method */
		    {
			ArrayList list = new60();
			push(goTo(14), list);
		    }
		    break;
                    case 61: /* reduce AAabstractmethod2Method */
		    {
			ArrayList list = new61();
			push(goTo(14), list);
		    }
		    break;
                    case 62: /* reduce AAmainmethod1Method */
		    {
			ArrayList list = new62();
			push(goTo(14), list);
		    }
		    break;
                    case 63: /* reduce AAmainmethod2Method */
		    {
			ArrayList list = new63();
			push(goTo(14), list);
		    }
		    break;
                    case 64: /* reduce AFinalMethodmods */
		    {
			ArrayList list = new64();
			push(goTo(15), list);
		    }
		    break;
                    case 65: /* reduce ASynchronizedMethodmods */
		    {
			ArrayList list = new65();
			push(goTo(15), list);
		    }
		    break;
                    case 66: /* reduce AFirstMainargv */
		    {
			ArrayList list = new66();
			push(goTo(16), list);
		    }
		    break;
                    case 67: /* reduce ASecondMainargv */
		    {
			ArrayList list = new67();
			push(goTo(16), list);
		    }
		    break;
                    case 68: /* reduce AAmodexternmethod1ExternMethod */
		    {
			ArrayList list = new68();
			push(goTo(17), list);
		    }
		    break;
                    case 69: /* reduce AAmodexternmethod2ExternMethod */
		    {
			ArrayList list = new69();
			push(goTo(17), list);
		    }
		    break;
                    case 70: /* reduce AAnonmodexternmethod1ExternMethod */
		    {
			ArrayList list = new70();
			push(goTo(17), list);
		    }
		    break;
                    case 71: /* reduce AAnonmodexternmethod2ExternMethod */
		    {
			ArrayList list = new71();
			push(goTo(17), list);
		    }
		    break;
                    case 72: /* reduce AFinalExternMethodmods */
		    {
			ArrayList list = new72();
			push(goTo(18), list);
		    }
		    break;
                    case 73: /* reduce AAbstractExternMethodmods */
		    {
			ArrayList list = new73();
			push(goTo(18), list);
		    }
		    break;
                    case 74: /* reduce ASynchronizedExternMethodmods */
		    {
			ArrayList list = new74();
			push(goTo(18), list);
		    }
		    break;
                    case 75: /* reduce AVoidReturntype */
		    {
			ArrayList list = new75();
			push(goTo(19), list);
		    }
		    break;
                    case 76: /* reduce ANonvoidReturntype */
		    {
			ArrayList list = new76();
			push(goTo(19), list);
		    }
		    break;
                    case 77: /* reduce ASimpleStm */
		    {
			ArrayList list = new77();
			push(goTo(20), list);
		    }
		    break;
                    case 78: /* reduce ADeclStm */
		    {
			ArrayList list = new78();
			push(goTo(20), list);
		    }
		    break;
                    case 79: /* reduce AIfStm */
		    {
			ArrayList list = new79();
			push(goTo(20), list);
		    }
		    break;
                    case 80: /* reduce AIfelseStm */
		    {
			ArrayList list = new80();
			push(goTo(20), list);
		    }
		    break;
                    case 81: /* reduce AWhileStm */
		    {
			ArrayList list = new81();
			push(goTo(20), list);
		    }
		    break;
                    case 82: /* reduce ASkipSimplestm */
		    {
			ArrayList list = new82();
			push(goTo(21), list);
		    }
		    break;
                    case 83: /* reduce AAblocksimplestm1Simplestm */
		    {
			ArrayList list = new83();
			push(goTo(21), list);
		    }
		    break;
                    case 84: /* reduce AAblocksimplestm2Simplestm */
		    {
			ArrayList list = new84();
			push(goTo(21), list);
		    }
		    break;
                    case 85: /* reduce AExpSimplestm */
		    {
			ArrayList list = new85();
			push(goTo(21), list);
		    }
		    break;
                    case 86: /* reduce AAreturnsimplestm1Simplestm */
		    {
			ArrayList list = new86();
			push(goTo(21), list);
		    }
		    break;
                    case 87: /* reduce AAreturnsimplestm2Simplestm */
		    {
			ArrayList list = new87();
			push(goTo(21), list);
		    }
		    break;
                    case 88: /* reduce ASimpleStmNoShortIf */
		    {
			ArrayList list = new88();
			push(goTo(22), list);
		    }
		    break;
                    case 89: /* reduce ATmpIfelseStmNoShortIf */
		    {
			ArrayList list = new89();
			push(goTo(22), list);
		    }
		    break;
                    case 90: /* reduce ATmpWhileStmNoShortIf */
		    {
			ArrayList list = new90();
			push(goTo(22), list);
		    }
		    break;
                    case 91: /* reduce AAssignStmExp */
		    {
			ArrayList list = new91();
			push(goTo(23), list);
		    }
		    break;
                    case 92: /* reduce ACallStmExp */
		    {
			ArrayList list = new92();
			push(goTo(23), list);
		    }
		    break;
                    case 93: /* reduce ANewStmExp */
		    {
			ArrayList list = new93();
			push(goTo(23), list);
		    }
		    break;
                    case 94: /* reduce AAssignment */
		    {
			ArrayList list = new94();
			push(goTo(24), list);
		    }
		    break;
                    case 95: /* reduce ADefaultExp */
		    {
			ArrayList list = new95();
			push(goTo(25), list);
		    }
		    break;
                    case 96: /* reduce AAssignExp */
		    {
			ArrayList list = new96();
			push(goTo(25), list);
		    }
		    break;
                    case 97: /* reduce ADefaultOrExp */
		    {
			ArrayList list = new97();
			push(goTo(26), list);
		    }
		    break;
                    case 98: /* reduce AOrOrExp */
		    {
			ArrayList list = new98();
			push(goTo(26), list);
		    }
		    break;
                    case 99: /* reduce ADefaultAndExp */
		    {
			ArrayList list = new99();
			push(goTo(27), list);
		    }
		    break;
                    case 100: /* reduce AAndAndExp */
		    {
			ArrayList list = new100();
			push(goTo(27), list);
		    }
		    break;
                    case 101: /* reduce ADefaultEqExp */
		    {
			ArrayList list = new101();
			push(goTo(28), list);
		    }
		    break;
                    case 102: /* reduce AEqEqExp */
		    {
			ArrayList list = new102();
			push(goTo(28), list);
		    }
		    break;
                    case 103: /* reduce ANeqEqExp */
		    {
			ArrayList list = new103();
			push(goTo(28), list);
		    }
		    break;
                    case 104: /* reduce ADefaultRelExp */
		    {
			ArrayList list = new104();
			push(goTo(29), list);
		    }
		    break;
                    case 105: /* reduce ALtRelExp */
		    {
			ArrayList list = new105();
			push(goTo(29), list);
		    }
		    break;
                    case 106: /* reduce AGtRelExp */
		    {
			ArrayList list = new106();
			push(goTo(29), list);
		    }
		    break;
                    case 107: /* reduce ALeqRelExp */
		    {
			ArrayList list = new107();
			push(goTo(29), list);
		    }
		    break;
                    case 108: /* reduce AGeqRelExp */
		    {
			ArrayList list = new108();
			push(goTo(29), list);
		    }
		    break;
                    case 109: /* reduce AInstanceofRelExp */
		    {
			ArrayList list = new109();
			push(goTo(29), list);
		    }
		    break;
                    case 110: /* reduce ADefaultAddExp */
		    {
			ArrayList list = new110();
			push(goTo(30), list);
		    }
		    break;
                    case 111: /* reduce APlusAddExp */
		    {
			ArrayList list = new111();
			push(goTo(30), list);
		    }
		    break;
                    case 112: /* reduce AMinusAddExp */
		    {
			ArrayList list = new112();
			push(goTo(30), list);
		    }
		    break;
                    case 113: /* reduce ADefaultMultExp */
		    {
			ArrayList list = new113();
			push(goTo(31), list);
		    }
		    break;
                    case 114: /* reduce AMultMultExp */
		    {
			ArrayList list = new114();
			push(goTo(31), list);
		    }
		    break;
                    case 115: /* reduce ADivMultExp */
		    {
			ArrayList list = new115();
			push(goTo(31), list);
		    }
		    break;
                    case 116: /* reduce AModMultExp */
		    {
			ArrayList list = new116();
			push(goTo(31), list);
		    }
		    break;
                    case 117: /* reduce ADefaultUnaryExp */
		    {
			ArrayList list = new117();
			push(goTo(32), list);
		    }
		    break;
                    case 118: /* reduce AMinusUnaryExp */
		    {
			ArrayList list = new118();
			push(goTo(32), list);
		    }
		    break;
                    case 119: /* reduce ADefaultUnaryExpNotMinus */
		    {
			ArrayList list = new119();
			push(goTo(33), list);
		    }
		    break;
                    case 120: /* reduce ANotUnaryExpNotMinus */
		    {
			ArrayList list = new120();
			push(goTo(33), list);
		    }
		    break;
                    case 121: /* reduce ACastUnaryExpNotMinus */
		    {
			ArrayList list = new121();
			push(goTo(33), list);
		    }
		    break;
                    case 122: /* reduce ANoncharCastExp */
		    {
			ArrayList list = new122();
			push(goTo(34), list);
		    }
		    break;
                    case 123: /* reduce ACharCastExp */
		    {
			ArrayList list = new123();
			push(goTo(34), list);
		    }
		    break;
                    case 124: /* reduce AIdPostfixExp */
		    {
			ArrayList list = new124();
			push(goTo(35), list);
		    }
		    break;
                    case 125: /* reduce APrimaryPostfixExp */
		    {
			ArrayList list = new125();
			push(goTo(35), list);
		    }
		    break;
                    case 126: /* reduce ALiteralPrimaryExp */
		    {
			ArrayList list = new126();
			push(goTo(36), list);
		    }
		    break;
                    case 127: /* reduce AThisPrimaryExp */
		    {
			ArrayList list = new127();
			push(goTo(36), list);
		    }
		    break;
                    case 128: /* reduce AParenPrimaryExp */
		    {
			ArrayList list = new128();
			push(goTo(36), list);
		    }
		    break;
                    case 129: /* reduce ANewPrimaryExp */
		    {
			ArrayList list = new129();
			push(goTo(36), list);
		    }
		    break;
                    case 130: /* reduce ACallPrimaryExp */
		    {
			ArrayList list = new130();
			push(goTo(36), list);
		    }
		    break;
                    case 131: /* reduce AAclassinstancecreation1Classinstancecreation */
		    {
			ArrayList list = new131();
			push(goTo(37), list);
		    }
		    break;
                    case 132: /* reduce AAclassinstancecreation2Classinstancecreation */
		    {
			ArrayList list = new132();
			push(goTo(37), list);
		    }
		    break;
                    case 133: /* reduce AAmethodinvocation1Methodinvocation */
		    {
			ArrayList list = new133();
			push(goTo(38), list);
		    }
		    break;
                    case 134: /* reduce AAmethodinvocation2Methodinvocation */
		    {
			ArrayList list = new134();
			push(goTo(38), list);
		    }
		    break;
                    case 135: /* reduce ATmpobjectReceiver */
		    {
			ArrayList list = new135();
			push(goTo(39), list);
		    }
		    break;
                    case 136: /* reduce ASuperReceiver */
		    {
			ArrayList list = new136();
			push(goTo(39), list);
		    }
		    break;
                    case 137: /* reduce AAargumentlist1ArgumentList */
		    {
			ArrayList list = new137();
			push(goTo(40), list);
		    }
		    break;
                    case 138: /* reduce AAargumentlist2ArgumentList */
		    {
			ArrayList list = new138();
			push(goTo(40), list);
		    }
		    break;
                    case 139: /* reduce AArgumentListTail */
		    {
			ArrayList list = new139();
			push(goTo(41), list);
		    }
		    break;
                    case 140: /* reduce AIntLiteral */
		    {
			ArrayList list = new140();
			push(goTo(42), list);
		    }
		    break;
                    case 141: /* reduce ATrueLiteral */
		    {
			ArrayList list = new141();
			push(goTo(42), list);
		    }
		    break;
                    case 142: /* reduce AFalseLiteral */
		    {
			ArrayList list = new142();
			push(goTo(42), list);
		    }
		    break;
                    case 143: /* reduce ACharLiteral */
		    {
			ArrayList list = new143();
			push(goTo(42), list);
		    }
		    break;
                    case 144: /* reduce AStringLiteral */
		    {
			ArrayList list = new144();
			push(goTo(42), list);
		    }
		    break;
                    case 145: /* reduce ANullLiteral */
		    {
			ArrayList list = new145();
			push(goTo(42), list);
		    }
		    break;
                    case 146: /* reduce ATerminal$Importpath */
		    {
			ArrayList list = new146();
			push(goTo(43), list);
		    }
		    break;
                    case 147: /* reduce ANonTerminal$Importpath */
		    {
			ArrayList list = new147();
			push(goTo(43), list);
		    }
		    break;
                    case 148: /* reduce ATerminal$ExternClass */
		    {
			ArrayList list = new148();
			push(goTo(44), list);
		    }
		    break;
                    case 149: /* reduce ANonTerminal$ExternClass */
		    {
			ArrayList list = new149();
			push(goTo(44), list);
		    }
		    break;
                    case 150: /* reduce ATerminal$Constructor */
		    {
			ArrayList list = new150();
			push(goTo(45), list);
		    }
		    break;
                    case 151: /* reduce ANonTerminal$Constructor */
		    {
			ArrayList list = new151();
			push(goTo(45), list);
		    }
		    break;
                    case 152: /* reduce ATerminal$Field */
		    {
			ArrayList list = new152();
			push(goTo(46), list);
		    }
		    break;
                    case 153: /* reduce ANonTerminal$Field */
		    {
			ArrayList list = new153();
			push(goTo(46), list);
		    }
		    break;
                    case 154: /* reduce ATerminal$Method */
		    {
			ArrayList list = new154();
			push(goTo(47), list);
		    }
		    break;
                    case 155: /* reduce ANonTerminal$Method */
		    {
			ArrayList list = new155();
			push(goTo(47), list);
		    }
		    break;
                    case 156: /* reduce ATerminal$ExternConstructor */
		    {
			ArrayList list = new156();
			push(goTo(48), list);
		    }
		    break;
                    case 157: /* reduce ANonTerminal$ExternConstructor */
		    {
			ArrayList list = new157();
			push(goTo(48), list);
		    }
		    break;
                    case 158: /* reduce ATerminal$ExternMethod */
		    {
			ArrayList list = new158();
			push(goTo(49), list);
		    }
		    break;
                    case 159: /* reduce ANonTerminal$ExternMethod */
		    {
			ArrayList list = new159();
			push(goTo(49), list);
		    }
		    break;
                    case 160: /* reduce ATerminal$IdentifierListTail */
		    {
			ArrayList list = new160();
			push(goTo(50), list);
		    }
		    break;
                    case 161: /* reduce ANonTerminal$IdentifierListTail */
		    {
			ArrayList list = new161();
			push(goTo(50), list);
		    }
		    break;
                    case 162: /* reduce ATerminal$Stm */
		    {
			ArrayList list = new162();
			push(goTo(51), list);
		    }
		    break;
                    case 163: /* reduce ANonTerminal$Stm */
		    {
			ArrayList list = new163();
			push(goTo(51), list);
		    }
		    break;
                    case 164: /* reduce ATerminal$FormalListTail */
		    {
			ArrayList list = new164();
			push(goTo(52), list);
		    }
		    break;
                    case 165: /* reduce ANonTerminal$FormalListTail */
		    {
			ArrayList list = new165();
			push(goTo(52), list);
		    }
		    break;
                    case 166: /* reduce ATerminal$ArgumentListTail */
		    {
			ArrayList list = new166();
			push(goTo(53), list);
		    }
		    break;
                    case 167: /* reduce ANonTerminal$ArgumentListTail */
		    {
			ArrayList list = new167();
			push(goTo(53), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PClassfile node1 = (PClassfile) ((ArrayList)pop()).get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }



    ArrayList new0() /* reduce AAdefaultclassfile1Classfile */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClassfile pclassfileNode1;
        {
        PClass pclassNode2;
        pclassNode2 = (PClass)nodeArrayList1.get(0);

        pclassfileNode1 = new ADefaultClassfile(pclassNode2);
        }
	nodeList.add(pclassfileNode1);
        return nodeList;
    }



    ArrayList new1() /* reduce AAdefaultclassfile2Classfile */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClassfile pclassfileNode1;
        {
        PClass pclassNode2;
        pclassNode2 = (PClass)nodeArrayList2.get(0);

        pclassfileNode1 = new ADefaultClassfile(pclassNode2);
        }
	nodeList.add(pclassfileNode1);
        return nodeList;
    }



    ArrayList new2() /* reduce AExternClassfile */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClassfile pclassfileNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pclassfileNode1 = new AExternClassfile(listNode3);
        }
	nodeList.add(pclassfileNode1);
        return nodeList;
    }



    ArrayList new3() /* reduce AAclass1Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pclassNode1 = new AClass(null, tidentifierNode3, null, listNode5, listNode7, listNode8);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new4() /* reduce AAclass2Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, null, listNode5, listNode7, listNode8);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new5() /* reduce AAclass3Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        pextensionNode4 = (PExtension)nodeArrayList4.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pclassNode1 = new AClass(null, tidentifierNode3, pextensionNode4, listNode5, listNode7, listNode8);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new6() /* reduce AAclass4Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pextensionNode4 = (PExtension)nodeArrayList5.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, pextensionNode4, listNode5, listNode7, listNode8);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new7() /* reduce AAclass5Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        }

        pclassNode1 = new AClass(null, tidentifierNode3, null, listNode6, listNode8, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new8() /* reduce AAclass6Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, null, listNode6, listNode8, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new9() /* reduce AAclass7Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        pextensionNode4 = (PExtension)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        }

        pclassNode1 = new AClass(null, tidentifierNode3, pextensionNode4, listNode6, listNode8, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new10() /* reduce AAclass8Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pextensionNode4 = (PExtension)nodeArrayList5.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, pextensionNode4, listNode6, listNode8, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new11() /* reduce AAclass9Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pclassNode1 = new AClass(null, tidentifierNode3, null, listNode5, listNode7, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new12() /* reduce AAclass10Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, null, listNode5, listNode7, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new13() /* reduce AAclass11Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        pextensionNode4 = (PExtension)nodeArrayList4.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pclassNode1 = new AClass(null, tidentifierNode3, pextensionNode4, listNode5, listNode7, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new14() /* reduce AAclass12Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pextensionNode4 = (PExtension)nodeArrayList5.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, pextensionNode4, listNode5, listNode7, listNode9);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new15() /* reduce AAclass13Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        TypedLinkedList listNode9 = new TypedLinkedList();
        listNode9 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pclassNode1 = new AClass(null, tidentifierNode3, null, listNode6, listNode8, listNode10);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new16() /* reduce AAclass14Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        TypedLinkedList listNode9 = new TypedLinkedList();
        listNode9 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, null, listNode6, listNode8, listNode10);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new17() /* reduce AAclass15Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        pextensionNode4 = (PExtension)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        TypedLinkedList listNode9 = new TypedLinkedList();
        listNode9 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pclassNode1 = new AClass(null, tidentifierNode3, pextensionNode4, listNode6, listNode8, listNode10);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new18() /* reduce AAclass16Class */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClass pclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        TypedLinkedList listNode10 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pextensionNode4 = (PExtension)nodeArrayList5.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
        TypedLinkedList listNode9 = new TypedLinkedList();
        listNode9 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pclassNode1 = new AClass(pclassmodsNode2, tidentifierNode3, pextensionNode4, listNode6, listNode8, listNode10);
        }
	nodeList.add(pclassNode1);
        return nodeList;
    }



    ArrayList new19() /* reduce AFinalClassmods */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClassmods pclassmodsNode1;
        {
        TFinal tfinalNode2;
        tfinalNode2 = (TFinal)nodeArrayList1.get(0);

        pclassmodsNode1 = new AFinalClassmods(tfinalNode2);
        }
	nodeList.add(pclassmodsNode1);
        return nodeList;
    }



    ArrayList new20() /* reduce AAbstractClassmods */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PClassmods pclassmodsNode1;
        {
        TAbstract tabstractNode2;
        tabstractNode2 = (TAbstract)nodeArrayList1.get(0);

        pclassmodsNode1 = new AAbstractClassmods(tabstractNode2);
        }
	nodeList.add(pclassmodsNode1);
        return nodeList;
    }



    ArrayList new21() /* reduce AAexternclass1ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList6.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pexternclassNode1 = new AExternClass(null, tidentifierNode3, null, tstringconstNode5, listNode7, listNode8);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new22() /* reduce AAexternclass2ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList5.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList7.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pexternclassNode1 = new AExternClass(pclassmodsNode2, tidentifierNode3, null, tstringconstNode5, listNode7, listNode8);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new23() /* reduce AAexternclass3ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pextensionNode4 = (PExtension)nodeArrayList5.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList7.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pexternclassNode1 = new AExternClass(null, tidentifierNode3, pextensionNode4, tstringconstNode5, listNode7, listNode8);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new24() /* reduce AAexternclass4ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList5.get(0);
        pextensionNode4 = (PExtension)nodeArrayList6.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList8.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList10.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        }

        pexternclassNode1 = new AExternClass(pclassmodsNode2, tidentifierNode3, pextensionNode4, tstringconstNode5, listNode7, listNode8);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new25() /* reduce AAexternclass5ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList6.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pexternclassNode1 = new AExternClass(null, tidentifierNode3, null, tstringconstNode5, listNode7, listNode9);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new26() /* reduce AAexternclass6ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        Object nullNode4 = null;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList5.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList7.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pexternclassNode1 = new AExternClass(pclassmodsNode2, tidentifierNode3, null, tstringconstNode5, listNode7, listNode9);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new27() /* reduce AAexternclass7ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        pextensionNode4 = (PExtension)nodeArrayList5.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList7.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList10.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pexternclassNode1 = new AExternClass(null, tidentifierNode3, pextensionNode4, tstringconstNode5, listNode7, listNode9);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new28() /* reduce AAexternclass8ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList12 = (ArrayList) pop();
        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternClass pexternclassNode1;
        {
        PClassmods pclassmodsNode2;
        TIdentifier tidentifierNode3;
        PExtension pextensionNode4;
        TStringconst tstringconstNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        pclassmodsNode2 = (PClassmods)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList5.get(0);
        pextensionNode4 = (PExtension)nodeArrayList6.get(0);
        tstringconstNode5 = (TStringconst)nodeArrayList8.get(0);
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList10.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
        TypedLinkedList listNode8 = new TypedLinkedList();
        listNode8 = (TypedLinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pexternclassNode1 = new AExternClass(pclassmodsNode2, tidentifierNode3, pextensionNode4, tstringconstNode5, listNode7, listNode9);
        }
	nodeList.add(pexternclassNode1);
        return nodeList;
    }



    ArrayList new29() /* reduce AExtension */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExtension pextensionNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);

        pextensionNode1 = new AExtension(tidentifierNode2);
        }
	nodeList.add(pextensionNode1);
        return nodeList;
    }



    ArrayList new30() /* reduce AReferenceType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        ptypeNode1 = new AReferenceType(tidentifierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new31() /* reduce ACharType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        ptypeNode1 = new ACharType(tcharNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new32() /* reduce ABooleanType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new33() /* reduce AIntType */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PType ptypeNode1;
        {
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    ArrayList new34() /* reduce AField */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PField pfieldNode1;
        {
        PType ptypeNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfieldNode1 = new AFirstField(ptypeNode2, listNode4);
        }
	nodeList.add(pfieldNode1);
        return nodeList;
    }



    ArrayList new35() /* reduce AAidentifierlist1IdentifierList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new36() /* reduce AAidentifierlist2IdentifierList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TIdentifier tidentifierNode1;
        TypedLinkedList listNode2 = new TypedLinkedList();
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
        listNode2 = (TypedLinkedList)nodeArrayList2.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode3.add(tidentifierNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new37() /* reduce AIdentifierListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList2.get(0);
	nodeList.add(tidentifierNode1);
        return nodeList;
    }



    ArrayList new38() /* reduce AAconstructor1Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }
        {
        PStm pstmNode4;
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }

        pstmNode4 = new ASuperconsStm(listNode5);
        }
	if(pstmNode4 != null)
	{
	  listNode6.add(pstmNode4);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode3, listNode6);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new39() /* reduce AAconstructor2Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        PStm pstmNode5;
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }

        pstmNode5 = new ASuperconsStm(listNode6);
        }
	if(pstmNode5 != null)
	{
	  listNode7.add(pstmNode5);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode4, listNode7);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new40() /* reduce AAconstructor3Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }
        {
        PStm pstmNode4;
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstmNode4 = new ASuperconsStm(listNode6);
        }
	if(pstmNode4 != null)
	{
	  listNode7.add(pstmNode4);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode3, listNode7);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new41() /* reduce AAconstructor4Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList12 = (ArrayList) pop();
        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        PStm pstmNode5;
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstmNode5 = new ASuperconsStm(listNode7);
        }
	if(pstmNode5 != null)
	{
	  listNode8.add(pstmNode5);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode4, listNode8);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new42() /* reduce AAconstructor5Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }
        {
        PStm pstmNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        {
        }

        pstmNode4 = new ASuperconsStm(listNode5);
        }
        listNode6 = (TypedLinkedList)nodeArrayList10.get(0);
	if(pstmNode4 != null)
	{
	  listNode7.add(pstmNode4);
	}
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode3, listNode7);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new43() /* reduce AAconstructor6Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList12 = (ArrayList) pop();
        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        PStm pstmNode5;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        }

        pstmNode5 = new ASuperconsStm(listNode6);
        }
        listNode7 = (TypedLinkedList)nodeArrayList11.get(0);
	if(pstmNode5 != null)
	{
	  listNode8.add(pstmNode5);
	}
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode4, listNode8);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new44() /* reduce AAconstructor7Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList12 = (ArrayList) pop();
        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }
        {
        PStm pstmNode4;
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pstmNode4 = new ASuperconsStm(listNode6);
        }
        listNode7 = (TypedLinkedList)nodeArrayList11.get(0);
	if(pstmNode4 != null)
	{
	  listNode8.add(pstmNode4);
	}
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode3, listNode8);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new45() /* reduce AAconstructor8Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList13 = (ArrayList) pop();
        ArrayList nodeArrayList12 = (ArrayList) pop();
        ArrayList nodeArrayList11 = (ArrayList) pop();
        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PConstructor pconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode9 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
        PStm pstmNode5;
        TypedLinkedList listNode8 = new TypedLinkedList();
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pstmNode5 = new ASuperconsStm(listNode7);
        }
        listNode8 = (TypedLinkedList)nodeArrayList12.get(0);
	if(pstmNode5 != null)
	{
	  listNode9.add(pstmNode5);
	}
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pconstructorNode1 = new AConstructor(tidentifierNode2, listNode4, listNode9);
        }
	nodeList.add(pconstructorNode1);
        return nodeList;
    }



    ArrayList new46() /* reduce AAexternconstructor1ExternConstructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternConstructor pexternconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }

        pexternconstructorNode1 = new AExternConstructor(tidentifierNode2, listNode3);
        }
	nodeList.add(pexternconstructorNode1);
        return nodeList;
    }



    ArrayList new47() /* reduce AAexternconstructor2ExternConstructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternConstructor pexternconstructorNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexternconstructorNode1 = new AExternConstructor(tidentifierNode2, listNode4);
        }
	nodeList.add(pexternconstructorNode1);
        return nodeList;
    }



    ArrayList new48() /* reduce AAformallist1FormalList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PFormal pformalNode1;
        pformalNode1 = (PFormal)nodeArrayList1.get(0);
	if(pformalNode1 != null)
	{
	  listNode2.add(pformalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new49() /* reduce AAformallist2FormalList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        PFormal pformalNode1;
        TypedLinkedList listNode2 = new TypedLinkedList();
        pformalNode1 = (PFormal)nodeArrayList1.get(0);
        listNode2 = (TypedLinkedList)nodeArrayList2.get(0);
	if(pformalNode1 != null)
	{
	  listNode3.add(pformalNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new50() /* reduce AFormalListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFormal pformalNode1;
        pformalNode1 = (PFormal)nodeArrayList2.get(0);
	nodeList.add(pformalNode1);
        return nodeList;
    }



    ArrayList new51() /* reduce AFormal */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PFormal pformalNode1;
        {
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pformalNode1 = new AFormal(ptypeNode2, tidentifierNode3);
        }
	nodeList.add(pformalNode1);
        return nodeList;
    }



    ArrayList new52() /* reduce AAmodmethod1Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PMethodmods pmethodmodsNode2;
        PReturntype preturntypeNode3;
        TIdentifier tidentifierNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        pmethodmodsNode2 = (PMethodmods)nodeArrayList2.get(0);
        preturntypeNode3 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);
        {
        }
        {
        }

        pmethodNode1 = new AModMethod(pmethodmodsNode2, preturntypeNode3, tidentifierNode4, listNode5, listNode6);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new53() /* reduce AAmodmethod2Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PMethodmods pmethodmodsNode2;
        PReturntype preturntypeNode3;
        TIdentifier tidentifierNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        pmethodmodsNode2 = (PMethodmods)nodeArrayList2.get(0);
        preturntypeNode3 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        }

        pmethodNode1 = new AModMethod(pmethodmodsNode2, preturntypeNode3, tidentifierNode4, listNode6, listNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new54() /* reduce AAmodmethod3Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PMethodmods pmethodmodsNode2;
        PReturntype preturntypeNode3;
        TIdentifier tidentifierNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        pmethodmodsNode2 = (PMethodmods)nodeArrayList2.get(0);
        preturntypeNode3 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);
        {
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pmethodNode1 = new AModMethod(pmethodmodsNode2, preturntypeNode3, tidentifierNode4, listNode5, listNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new55() /* reduce AAmodmethod4Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PMethodmods pmethodmodsNode2;
        PReturntype preturntypeNode3;
        TIdentifier tidentifierNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        TypedLinkedList listNode8 = new TypedLinkedList();
        pmethodmodsNode2 = (PMethodmods)nodeArrayList2.get(0);
        preturntypeNode3 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
        TypedLinkedList listNode7 = new TypedLinkedList();
        listNode7 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        pmethodNode1 = new AModMethod(pmethodmodsNode2, preturntypeNode3, tidentifierNode4, listNode6, listNode8);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new56() /* reduce AAnonmodmethod1Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode5 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        }
        {
        }

        pmethodNode1 = new ANonmodMethod(preturntypeNode2, tidentifierNode3, listNode4, listNode5);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new57() /* reduce AAnonmodmethod2Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        }

        pmethodNode1 = new ANonmodMethod(preturntypeNode2, tidentifierNode3, listNode5, listNode6);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new58() /* reduce AAnonmodmethod3Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        TypedLinkedList listNode6 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        }
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pmethodNode1 = new ANonmodMethod(preturntypeNode2, tidentifierNode3, listNode4, listNode6);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new59() /* reduce AAnonmodmethod4Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        TypedLinkedList listNode7 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
        TypedLinkedList listNode6 = new TypedLinkedList();
        listNode6 = (TypedLinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pmethodNode1 = new ANonmodMethod(preturntypeNode2, tidentifierNode3, listNode5, listNode7);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new60() /* reduce AAabstractmethod1Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        {
        }

        pmethodNode1 = new AAbstractMethod(preturntypeNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new61() /* reduce AAabstractmethod2Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmethodNode1 = new AAbstractMethod(preturntypeNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new62() /* reduce AAmainmethod1Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PMainargv pmainargvNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        pmainargvNode2 = (PMainargv)nodeArrayList6.get(0);
        {
        }

        pmethodNode1 = new AMainMethod(pmainargvNode2, listNode3);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new63() /* reduce AAmainmethod2Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList10 = (ArrayList) pop();
        ArrayList nodeArrayList9 = (ArrayList) pop();
        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethod pmethodNode1;
        {
        PMainargv pmainargvNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        pmainargvNode2 = (PMainargv)nodeArrayList6.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList9.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pmethodNode1 = new AMainMethod(pmainargvNode2, listNode4);
        }
	nodeList.add(pmethodNode1);
        return nodeList;
    }



    ArrayList new64() /* reduce AFinalMethodmods */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethodmods pmethodmodsNode1;
        {
        TFinal tfinalNode2;
        tfinalNode2 = (TFinal)nodeArrayList1.get(0);

        pmethodmodsNode1 = new AFinalMethodmods(tfinalNode2);
        }
	nodeList.add(pmethodmodsNode1);
        return nodeList;
    }



    ArrayList new65() /* reduce ASynchronizedMethodmods */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMethodmods pmethodmodsNode1;
        {
        TSynchronized tsynchronizedNode2;
        tsynchronizedNode2 = (TSynchronized)nodeArrayList1.get(0);

        pmethodmodsNode1 = new ASynchronizedMethodmods(tsynchronizedNode2);
        }
	nodeList.add(pmethodmodsNode1);
        return nodeList;
    }



    ArrayList new66() /* reduce AFirstMainargv */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMainargv pmainargvNode1;
        {
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pmainargvNode1 = new AMainargv(tidentifierNode2, tidentifierNode3);
        }
	nodeList.add(pmainargvNode1);
        return nodeList;
    }



    ArrayList new67() /* reduce ASecondMainargv */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PMainargv pmainargvNode1;
        {
        TIdentifier tidentifierNode2;
        TIdentifier tidentifierNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList4.get(0);

        pmainargvNode1 = new AMainargv(tidentifierNode2, tidentifierNode3);
        }
	nodeList.add(pmainargvNode1);
        return nodeList;
    }



    ArrayList new68() /* reduce AAmodexternmethod1ExternMethod */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternMethod pexternmethodNode1;
        {
        PExternMethodmods pexternmethodmodsNode2;
        PReturntype preturntypeNode3;
        TIdentifier tidentifierNode4;
        TypedLinkedList listNode5 = new TypedLinkedList();
        pexternmethodmodsNode2 = (PExternMethodmods)nodeArrayList2.get(0);
        preturntypeNode3 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);
        {
        }

        pexternmethodNode1 = new AModExternMethod(pexternmethodmodsNode2, preturntypeNode3, tidentifierNode4, listNode5);
        }
	nodeList.add(pexternmethodNode1);
        return nodeList;
    }



    ArrayList new69() /* reduce AAmodexternmethod2ExternMethod */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList8 = (ArrayList) pop();
        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternMethod pexternmethodNode1;
        {
        PExternMethodmods pexternmethodmodsNode2;
        PReturntype preturntypeNode3;
        TIdentifier tidentifierNode4;
        TypedLinkedList listNode6 = new TypedLinkedList();
        pexternmethodmodsNode2 = (PExternMethodmods)nodeArrayList2.get(0);
        preturntypeNode3 = (PReturntype)nodeArrayList3.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList4.get(0);
        {
        TypedLinkedList listNode5 = new TypedLinkedList();
        listNode5 = (TypedLinkedList)nodeArrayList6.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pexternmethodNode1 = new AModExternMethod(pexternmethodmodsNode2, preturntypeNode3, tidentifierNode4, listNode6);
        }
	nodeList.add(pexternmethodNode1);
        return nodeList;
    }



    ArrayList new70() /* reduce AAnonmodexternmethod1ExternMethod */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternMethod pexternmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        }

        pexternmethodNode1 = new ANonmodExternMethod(preturntypeNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pexternmethodNode1);
        return nodeList;
    }



    ArrayList new71() /* reduce AAnonmodexternmethod2ExternMethod */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternMethod pexternmethodNode1;
        {
        PReturntype preturntypeNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        preturntypeNode2 = (PReturntype)nodeArrayList2.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexternmethodNode1 = new ANonmodExternMethod(preturntypeNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pexternmethodNode1);
        return nodeList;
    }



    ArrayList new72() /* reduce AFinalExternMethodmods */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternMethodmods pexternmethodmodsNode1;
        {
        TFinal tfinalNode2;
        tfinalNode2 = (TFinal)nodeArrayList1.get(0);

        pexternmethodmodsNode1 = new AFinalExternMethodmods(tfinalNode2);
        }
	nodeList.add(pexternmethodmodsNode1);
        return nodeList;
    }



    ArrayList new73() /* reduce AAbstractExternMethodmods */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternMethodmods pexternmethodmodsNode1;
        {
        TAbstract tabstractNode2;
        tabstractNode2 = (TAbstract)nodeArrayList1.get(0);

        pexternmethodmodsNode1 = new AAbstractExternMethodmods(tabstractNode2);
        }
	nodeList.add(pexternmethodmodsNode1);
        return nodeList;
    }



    ArrayList new74() /* reduce ASynchronizedExternMethodmods */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExternMethodmods pexternmethodmodsNode1;
        {
        TSynchronized tsynchronizedNode2;
        tsynchronizedNode2 = (TSynchronized)nodeArrayList1.get(0);

        pexternmethodmodsNode1 = new ASynchronizedExternMethodmods(tsynchronizedNode2);
        }
	nodeList.add(pexternmethodmodsNode1);
        return nodeList;
    }



    ArrayList new75() /* reduce AVoidReturntype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PReturntype preturntypeNode1;
        {

        preturntypeNode1 = new AVoidReturntype();
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    ArrayList new76() /* reduce ANonvoidReturntype */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PReturntype preturntypeNode1;
        {
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        preturntypeNode1 = new ANonvoidReturntype(ptypeNode2);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    ArrayList new77() /* reduce ASimpleStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        pstmNode1 = (PStm)nodeArrayList1.get(0);
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new78() /* reduce ADeclStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PType ptypeNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstmNode1 = new ADeclFirstStm(ptypeNode2, listNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new79() /* reduce AIfStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        PStm pstmNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AIfStm(pexpNode2, pstmNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new80() /* reduce AIfelseStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        PStm pstmNode3;
        PStm pstmNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);
        pstmNode4 = (PStm)nodeArrayList7.get(0);

        pstmNode1 = new AIfelseStm(pexpNode2, pstmNode3, pstmNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new81() /* reduce AWhileStm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        PStm pstmNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AWhileStm(pexpNode2, pstmNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new82() /* reduce ASkipSimplestm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {

        pstmNode1 = new ASkipStm();
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new83() /* reduce AAblocksimplestm1Simplestm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        }

        pstmNode1 = new ABlockStm(listNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new84() /* reduce AAblocksimplestm2Simplestm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode2 = new TypedLinkedList();
        listNode2 = (TypedLinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmNode1 = new ABlockStm(listNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new85() /* reduce AExpSimplestm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pstmNode1 = new AExpStm(pexpNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new86() /* reduce AAreturnsimplestm1Simplestm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        Object nullNode2 = null;

        pstmNode1 = new AReturnStm(null);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new87() /* reduce AAreturnsimplestm2Simplestm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pstmNode1 = new AReturnStm(pexpNode2);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new88() /* reduce ASimpleStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        pstmNode1 = (PStm)nodeArrayList1.get(0);
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new89() /* reduce ATmpIfelseStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList7 = (ArrayList) pop();
        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        PStm pstmNode3;
        PStm pstmNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);
        pstmNode4 = (PStm)nodeArrayList7.get(0);

        pstmNode1 = new AIfelseStm(pexpNode2, pstmNode3, pstmNode4);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new90() /* reduce ATmpWhileStmNoShortIf */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PStm pstmNode1;
        {
        PExp pexpNode2;
        PStm pstmNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pstmNode3 = (PStm)nodeArrayList5.get(0);

        pstmNode1 = new AWhileStm(pexpNode2, pstmNode3);
        }
	nodeList.add(pstmNode1);
        return nodeList;
    }



    ArrayList new91() /* reduce AAssignStmExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new92() /* reduce ACallStmExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new93() /* reduce ANewStmExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new94() /* reduce AAssignment */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        TIdentifier tidentifierNode2;
        PExp pexpNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAssignExp(tidentifierNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new95() /* reduce ADefaultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new96() /* reduce AAssignExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new97() /* reduce ADefaultOrExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new98() /* reduce AOrOrExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOrExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new99() /* reduce ADefaultAndExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new100() /* reduce AAndAndExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AAndExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new101() /* reduce ADefaultEqExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new102() /* reduce AEqEqExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new103() /* reduce ANeqEqExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ANeqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new104() /* reduce ADefaultRelExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new105() /* reduce ALtRelExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new106() /* reduce AGtRelExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGtExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new107() /* reduce ALeqRelExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ALeqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new108() /* reduce AGeqRelExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AGeqExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new109() /* reduce AInstanceofRelExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        TIdentifier tidentifierNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        pexpNode1 = new AInstanceofExp(pexpNode2, tidentifierNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new110() /* reduce ADefaultAddExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new111() /* reduce APlusAddExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new APlusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new112() /* reduce AMinusAddExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMinusExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new113() /* reduce ADefaultMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new114() /* reduce AMultMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new115() /* reduce ADivMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new116() /* reduce AModMultExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new117() /* reduce ADefaultUnaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new118() /* reduce AMinusUnaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AUminusExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new119() /* reduce ADefaultUnaryExpNotMinus */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new120() /* reduce ANotUnaryExpNotMinus */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANotExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new121() /* reduce ACastUnaryExpNotMinus */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new122() /* reduce ANoncharCastExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new ATmpcastExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new123() /* reduce ACharCastExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new ACasttocharExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new124() /* reduce AIdPostfixExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpNode1 = new AIdExp(tidentifierNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new125() /* reduce APrimaryPostfixExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new126() /* reduce ALiteralPrimaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new127() /* reduce AThisPrimaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {

        pexpNode1 = new AThisExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new128() /* reduce AParenPrimaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new129() /* reduce ANewPrimaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new130() /* reduce ACallPrimaryExp */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new131() /* reduce AAclassinstancecreation1Classinstancecreation */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode3 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        }

        pexpNode1 = new ANewExp(tidentifierNode2, listNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new132() /* reduce AAclassinstancecreation2Classinstancecreation */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        TIdentifier tidentifierNode2;
        TypedLinkedList listNode4 = new TypedLinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
        TypedLinkedList listNode3 = new TypedLinkedList();
        listNode3 = (TypedLinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new ANewExp(tidentifierNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new133() /* reduce AAmethodinvocation1Methodinvocation */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PReceiver preceiverNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode4 = new TypedLinkedList();
        preceiverNode2 = (PReceiver)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        }

        pexpNode1 = new ACallExp(preceiverNode2, tidentifierNode3, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new134() /* reduce AAmethodinvocation2Methodinvocation */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList6 = (ArrayList) pop();
        ArrayList nodeArrayList5 = (ArrayList) pop();
        ArrayList nodeArrayList4 = (ArrayList) pop();
        ArrayList nodeArrayList3 = (ArrayList) pop();
        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        PReceiver preceiverNode2;
        TIdentifier tidentifierNode3;
        TypedLinkedList listNode5 = new TypedLinkedList();
        preceiverNode2 = (PReceiver)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);
        {
        TypedLinkedList listNode4 = new TypedLinkedList();
        listNode4 = (TypedLinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpNode1 = new ACallExp(preceiverNode2, tidentifierNode3, listNode5);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new135() /* reduce ATmpobjectReceiver */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PReceiver preceiverNode1;
        {
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        preceiverNode1 = new AObjectReceiver(pexpNode2);
        }
	nodeList.add(preceiverNode1);
        return nodeList;
    }



    ArrayList new136() /* reduce ASuperReceiver */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PReceiver preceiverNode1;
        {

        preceiverNode1 = new ASuperReceiver();
        }
	nodeList.add(preceiverNode1);
        return nodeList;
    }



    ArrayList new137() /* reduce AAargumentlist1ArgumentList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new138() /* reduce AAargumentlist2ArgumentList */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        PExp pexpNode1;
        TypedLinkedList listNode2 = new TypedLinkedList();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (TypedLinkedList)nodeArrayList2.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new139() /* reduce AArgumentListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new140() /* reduce AIntLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        TIntconst tintconstNode2;
        tintconstNode2 = (TIntconst)nodeArrayList1.get(0);

        pexpNode1 = new AIntconstExp(tintconstNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new141() /* reduce ATrueLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {

        pexpNode1 = new ATrueExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new142() /* reduce AFalseLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {

        pexpNode1 = new AFalseExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new143() /* reduce ACharLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        TCharconst tcharconstNode2;
        tcharconstNode2 = (TCharconst)nodeArrayList1.get(0);

        pexpNode1 = new ACharconstExp(tcharconstNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new144() /* reduce AStringLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {
        TStringconst tstringconstNode2;
        tstringconstNode2 = (TStringconst)nodeArrayList1.get(0);

        pexpNode1 = new AStringconstExp(tstringconstNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new145() /* reduce ANullLiteral */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        PExp pexpNode1;
        {

        pexpNode1 = new ANullExp();
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    ArrayList new146() /* reduce ATerminal$Importpath */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TImportpath timportpathNode1;
        timportpathNode1 = (TImportpath)nodeArrayList1.get(0);
	if(timportpathNode1 != null)
	{
	  listNode2.add(timportpathNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new147() /* reduce ANonTerminal$Importpath */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TImportpath timportpathNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        timportpathNode2 = (TImportpath)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(timportpathNode2 != null)
	{
	  listNode3.add(timportpathNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new148() /* reduce ATerminal$ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExternClass pexternclassNode1;
        pexternclassNode1 = (PExternClass)nodeArrayList1.get(0);
	if(pexternclassNode1 != null)
	{
	  listNode2.add(pexternclassNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new149() /* reduce ANonTerminal$ExternClass */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExternClass pexternclassNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexternclassNode2 = (PExternClass)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexternclassNode2 != null)
	{
	  listNode3.add(pexternclassNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new150() /* reduce ATerminal$Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PConstructor pconstructorNode1;
        pconstructorNode1 = (PConstructor)nodeArrayList1.get(0);
	if(pconstructorNode1 != null)
	{
	  listNode2.add(pconstructorNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new151() /* reduce ANonTerminal$Constructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PConstructor pconstructorNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pconstructorNode2 = (PConstructor)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstructorNode2 != null)
	{
	  listNode3.add(pconstructorNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new152() /* reduce ATerminal$Field */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PField pfieldNode1;
        pfieldNode1 = (PField)nodeArrayList1.get(0);
	if(pfieldNode1 != null)
	{
	  listNode2.add(pfieldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new153() /* reduce ANonTerminal$Field */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PField pfieldNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pfieldNode2 = (PField)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfieldNode2 != null)
	{
	  listNode3.add(pfieldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new154() /* reduce ATerminal$Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PMethod pmethodNode1;
        pmethodNode1 = (PMethod)nodeArrayList1.get(0);
	if(pmethodNode1 != null)
	{
	  listNode2.add(pmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new155() /* reduce ANonTerminal$Method */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PMethod pmethodNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pmethodNode2 = (PMethod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethodNode2 != null)
	{
	  listNode3.add(pmethodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new156() /* reduce ATerminal$ExternConstructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExternConstructor pexternconstructorNode1;
        pexternconstructorNode1 = (PExternConstructor)nodeArrayList1.get(0);
	if(pexternconstructorNode1 != null)
	{
	  listNode2.add(pexternconstructorNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new157() /* reduce ANonTerminal$ExternConstructor */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExternConstructor pexternconstructorNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexternconstructorNode2 = (PExternConstructor)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexternconstructorNode2 != null)
	{
	  listNode3.add(pexternconstructorNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new158() /* reduce ATerminal$ExternMethod */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExternMethod pexternmethodNode1;
        pexternmethodNode1 = (PExternMethod)nodeArrayList1.get(0);
	if(pexternmethodNode1 != null)
	{
	  listNode2.add(pexternmethodNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new159() /* reduce ANonTerminal$ExternMethod */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExternMethod pexternmethodNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexternmethodNode2 = (PExternMethod)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexternmethodNode2 != null)
	{
	  listNode3.add(pexternmethodNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new160() /* reduce ATerminal$IdentifierListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new161() /* reduce ANonTerminal$IdentifierListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        TIdentifier tidentifierNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tidentifierNode2 != null)
	{
	  listNode3.add(tidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new162() /* reduce ATerminal$Stm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PStm pstmNode1;
        pstmNode1 = (PStm)nodeArrayList1.get(0);
	if(pstmNode1 != null)
	{
	  listNode2.add(pstmNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new163() /* reduce ANonTerminal$Stm */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PStm pstmNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pstmNode2 = (PStm)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmNode2 != null)
	{
	  listNode3.add(pstmNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new164() /* reduce ATerminal$FormalListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PFormal pformalNode1;
        pformalNode1 = (PFormal)nodeArrayList1.get(0);
	if(pformalNode1 != null)
	{
	  listNode2.add(pformalNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new165() /* reduce ANonTerminal$FormalListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PFormal pformalNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pformalNode2 = (PFormal)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pformalNode2 != null)
	{
	  listNode3.add(pformalNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    ArrayList new166() /* reduce ATerminal$ArgumentListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode2 = new TypedLinkedList();
        {
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    ArrayList new167() /* reduce ANonTerminal$ArgumentListTail */
    {
        ArrayList nodeList = new ArrayList();

        ArrayList nodeArrayList2 = (ArrayList) pop();
        ArrayList nodeArrayList1 = (ArrayList) pop();
        TypedLinkedList listNode3 = new TypedLinkedList();
        {
        TypedLinkedList listNode1 = new TypedLinkedList();
        PExp pexpNode2;
        listNode1 = (TypedLinkedList)nodeArrayList1.get(0);
        pexpNode2 = (PExp)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpNode2 != null)
	{
	  listNode3.add(pexpNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {15, SHIFT, 1}, {35, SHIFT, 2}, {82, SHIFT, 3}, },
			{{-1, ERROR, 1}, {35, SHIFT, 9}, },
			{{-1, ERROR, 2}, {0, SHIFT, 10}, {7, SHIFT, 11}, {16, SHIFT, 12}, },
			{{-1, REDUCE, 146}, },
			{{-1, ERROR, 4}, {83, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 148}, },
			{{-1, ERROR, 7}, {35, SHIFT, 2}, {82, SHIFT, 14}, },
			{{-1, REDUCE, 2}, {15, SHIFT, 1}, },
			{{-1, ERROR, 9}, {0, SHIFT, 10}, {7, SHIFT, 17}, {16, SHIFT, 12}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 11}, {81, SHIFT, 19}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 13}, {7, SHIFT, 20}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 149}, },
			{{-1, ERROR, 17}, {81, SHIFT, 21}, },
			{{-1, ERROR, 18}, {7, SHIFT, 22}, },
			{{-1, ERROR, 19}, {14, SHIFT, 23}, {65, SHIFT, 24}, },
			{{-1, ERROR, 20}, {81, SHIFT, 26}, },
			{{-1, ERROR, 21}, {14, SHIFT, 23}, {24, SHIFT, 27}, },
			{{-1, ERROR, 22}, {81, SHIFT, 29}, },
			{{-1, ERROR, 23}, {81, SHIFT, 30}, },
			{{-1, ERROR, 24}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 25}, {65, SHIFT, 37}, },
			{{-1, ERROR, 26}, {14, SHIFT, 23}, {65, SHIFT, 38}, },
			{{-1, ERROR, 27}, {80, SHIFT, 40}, },
			{{-1, ERROR, 28}, {24, SHIFT, 41}, },
			{{-1, ERROR, 29}, {14, SHIFT, 23}, {24, SHIFT, 42}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 31}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {81, SHIFT, 47}, },
			{{-1, ERROR, 32}, {81, SHIFT, 49}, },
			{{-1, REDUCE, 152}, },
			{{-1, REDUCE, 150}, },
			{{-1, ERROR, 35}, {35, SHIFT, 50}, {66, SHIFT, 51}, },
			{{-1, ERROR, 36}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 37}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 38}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 39}, {65, SHIFT, 61}, },
			{{-1, ERROR, 40}, {65, SHIFT, 62}, },
			{{-1, ERROR, 41}, {80, SHIFT, 63}, },
			{{-1, ERROR, 42}, {80, SHIFT, 64}, },
			{{-1, ERROR, 43}, {24, SHIFT, 65}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 48}, {81, SHIFT, 66}, },
			{{-1, ERROR, 49}, {68, SHIFT, 68}, },
			{{-1, ERROR, 50}, {0, SHIFT, 69}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 70}, {26, SHIFT, 46}, {38, SHIFT, 71}, {41, SHIFT, 72}, {47, SHIFT, 73}, {81, SHIFT, 74}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 54}, {35, SHIFT, 78}, {66, SHIFT, 79}, },
			{{-1, REDUCE, 153}, },
			{{-1, ERROR, 56}, {35, SHIFT, 50}, {66, SHIFT, 81}, },
			{{-1, ERROR, 57}, {35, SHIFT, 50}, {66, SHIFT, 83}, },
			{{-1, ERROR, 58}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 59}, {35, SHIFT, 50}, {66, SHIFT, 86}, },
			{{-1, ERROR, 60}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 61}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 62}, {35, SHIFT, 91}, },
			{{-1, ERROR, 63}, {65, SHIFT, 94}, },
			{{-1, ERROR, 64}, {65, SHIFT, 95}, },
			{{-1, ERROR, 65}, {80, SHIFT, 96}, },
			{{-1, REDUCE, 35}, {72, SHIFT, 97}, },
			{{-1, ERROR, 67}, {67, SHIFT, 100}, },
			{{-1, ERROR, 68}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 101}, {81, SHIFT, 47}, },
			{{-1, ERROR, 69}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 71}, {47, SHIFT, 106}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 30}, {68, SHIFT, 68}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 76}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, ERROR, 77}, {81, SHIFT, 108}, },
			{{-1, ERROR, 78}, {0, SHIFT, 69}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 70}, {26, SHIFT, 46}, {38, SHIFT, 71}, {41, SHIFT, 72}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 82}, {35, SHIFT, 78}, {66, SHIFT, 109}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 84}, {35, SHIFT, 78}, {66, SHIFT, 110}, },
			{{-1, ERROR, 85}, {35, SHIFT, 50}, {66, SHIFT, 111}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 87}, {35, SHIFT, 78}, {66, SHIFT, 113}, },
			{{-1, ERROR, 88}, {35, SHIFT, 50}, {66, SHIFT, 114}, },
			{{-1, ERROR, 89}, {35, SHIFT, 50}, {66, SHIFT, 116}, },
			{{-1, ERROR, 90}, {34, SHIFT, 31}, {35, SHIFT, 32}, },
			{{-1, ERROR, 91}, {81, SHIFT, 119}, },
			{{-1, REDUCE, 156}, },
			{{-1, ERROR, 93}, {35, SHIFT, 120}, {66, SHIFT, 121}, },
			{{-1, ERROR, 94}, {35, SHIFT, 91}, },
			{{-1, ERROR, 95}, {35, SHIFT, 91}, },
			{{-1, ERROR, 96}, {65, SHIFT, 127}, },
			{{-1, ERROR, 97}, {81, SHIFT, 128}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 36}, {72, SHIFT, 97}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 101}, {65, SHIFT, 130}, },
			{{-1, ERROR, 102}, {81, SHIFT, 131}, },
			{{-1, ERROR, 103}, {69, SHIFT, 132}, },
			{{-1, REDUCE, 48}, {72, SHIFT, 133}, },
			{{-1, ERROR, 105}, {81, SHIFT, 136}, },
			{{-1, ERROR, 106}, {29, SHIFT, 137}, },
			{{-1, ERROR, 107}, {81, SHIFT, 138}, },
			{{-1, ERROR, 108}, {68, SHIFT, 139}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 112}, {35, SHIFT, 78}, {66, SHIFT, 140}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 115}, {35, SHIFT, 78}, {66, SHIFT, 141}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 117}, {35, SHIFT, 78}, {66, SHIFT, 142}, },
			{{-1, ERROR, 118}, {35, SHIFT, 50}, {66, SHIFT, 143}, },
			{{-1, ERROR, 119}, {68, SHIFT, 145}, },
			{{-1, ERROR, 120}, {0, SHIFT, 146}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 147}, {26, SHIFT, 46}, {41, SHIFT, 148}, {47, SHIFT, 73}, {81, SHIFT, 149}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 158}, },
			{{-1, ERROR, 124}, {35, SHIFT, 152}, {66, SHIFT, 153}, },
			{{-1, ERROR, 125}, {35, SHIFT, 120}, {66, SHIFT, 155}, },
			{{-1, ERROR, 126}, {35, SHIFT, 120}, {66, SHIFT, 157}, },
			{{-1, ERROR, 127}, {35, SHIFT, 91}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 161}, },
			{{-1, ERROR, 130}, {39, SHIFT, 160}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 132}, {65, SHIFT, 161}, },
			{{-1, ERROR, 133}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 49}, {72, SHIFT, 133}, },
			{{-1, ERROR, 136}, {68, SHIFT, 164}, },
			{{-1, ERROR, 137}, {68, SHIFT, 165}, },
			{{-1, ERROR, 138}, {68, SHIFT, 166}, },
			{{-1, ERROR, 139}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 167}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 144}, {35, SHIFT, 78}, {66, SHIFT, 169}, },
			{{-1, ERROR, 145}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 170}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 30}, {68, SHIFT, 145}, },
			{{-1, ERROR, 150}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, ERROR, 151}, {81, SHIFT, 173}, },
			{{-1, ERROR, 152}, {0, SHIFT, 146}, {1, SHIFT, 44}, {6, SHIFT, 45}, {16, SHIFT, 147}, {26, SHIFT, 46}, {41, SHIFT, 148}, {47, SHIFT, 73}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 156}, {35, SHIFT, 152}, {66, SHIFT, 174}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 158}, {35, SHIFT, 152}, {66, SHIFT, 175}, },
			{{-1, ERROR, 159}, {35, SHIFT, 120}, {66, SHIFT, 176}, },
			{{-1, ERROR, 160}, {68, SHIFT, 178}, },
			{{-1, ERROR, 161}, {39, SHIFT, 179}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 165}, },
			{{-1, ERROR, 164}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 180}, {81, SHIFT, 47}, },
			{{-1, ERROR, 165}, {81, SHIFT, 182}, },
			{{-1, ERROR, 166}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 184}, {81, SHIFT, 47}, },
			{{-1, ERROR, 167}, {65, SHIFT, 186}, },
			{{-1, ERROR, 168}, {69, SHIFT, 187}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 170}, {67, SHIFT, 188}, },
			{{-1, ERROR, 171}, {69, SHIFT, 189}, },
			{{-1, ERROR, 172}, {81, SHIFT, 190}, },
			{{-1, ERROR, 173}, {68, SHIFT, 191}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 177}, {35, SHIFT, 152}, {66, SHIFT, 192}, },
			{{-1, ERROR, 178}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 199}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 179}, {68, SHIFT, 225}, },
			{{-1, ERROR, 180}, {67, SHIFT, 226}, },
			{{-1, ERROR, 181}, {69, SHIFT, 227}, },
			{{-1, ERROR, 182}, {70, SHIFT, 228}, {81, SHIFT, 229}, },
			{{-1, ERROR, 183}, {69, SHIFT, 230}, },
			{{-1, ERROR, 184}, {65, SHIFT, 231}, },
			{{-1, ERROR, 185}, {69, SHIFT, 232}, },
			{{-1, ERROR, 186}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 237}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 187}, {65, SHIFT, 250}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 189}, {67, SHIFT, 251}, },
			{{-1, ERROR, 190}, {68, SHIFT, 252}, },
			{{-1, ERROR, 191}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 253}, {81, SHIFT, 47}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 193}, {81, SHIFT, 255}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 127}, },
			{{-1, ERROR, 196}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 197}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 198}, {6, SHIFT, 259}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 199}, {67, SHIFT, 261}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 124}, {50, SHIFT, 262}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 137}, {72, SHIFT, 263}, },
			{{-1, REDUCE, 95}, {59, SHIFT, 266}, },
			{{-1, REDUCE, 97}, {58, SHIFT, 267}, },
			{{-1, REDUCE, 99}, {54, SHIFT, 268}, {57, SHIFT, 269}, },
			{{-1, REDUCE, 101}, {25, SHIFT, 270}, {51, SHIFT, 271}, {52, SHIFT, 272}, {55, SHIFT, 273}, {56, SHIFT, 274}, },
			{{-1, REDUCE, 104}, {60, SHIFT, 275}, {61, SHIFT, 276}, },
			{{-1, REDUCE, 110}, {62, SHIFT, 277}, {63, SHIFT, 278}, {64, SHIFT, 279}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 117}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 119}, {73, REDUCE, 135}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 130}, },
			{{-1, ERROR, 222}, {73, SHIFT, 280}, },
			{{-1, ERROR, 223}, {69, SHIFT, 281}, },
			{{-1, REDUCE, 126}, },
			{{-1, ERROR, 225}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 282}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 227}, {67, SHIFT, 284}, },
			{{-1, ERROR, 228}, {71, SHIFT, 285}, },
			{{-1, ERROR, 229}, {70, SHIFT, 286}, },
			{{-1, ERROR, 230}, {65, SHIFT, 287}, },
			{{-1, ERROR, 231}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 288}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 232}, {65, SHIFT, 290}, },
			{{-1, ERROR, 233}, {68, SHIFT, 291}, },
			{{-1, ERROR, 234}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {67, SHIFT, 292}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 235}, {68, SHIFT, 294}, },
			{{-1, ERROR, 236}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 295}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 239}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 124}, {50, SHIFT, 262}, {81, REDUCE, 30}, },
			{{-1, ERROR, 241}, {81, SHIFT, 66}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 244}, {67, SHIFT, 299}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 93}, {73, REDUCE, 129}, },
			{{-1, REDUCE, 92}, {73, REDUCE, 130}, },
			{{-1, ERROR, 249}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 300}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 250}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 302}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 252}, {1, SHIFT, 44}, {6, SHIFT, 45}, {26, SHIFT, 46}, {69, SHIFT, 304}, {81, SHIFT, 47}, },
			{{-1, ERROR, 253}, {67, SHIFT, 306}, },
			{{-1, ERROR, 254}, {69, SHIFT, 307}, },
			{{-1, ERROR, 255}, {68, SHIFT, 308}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 259}, {69, SHIFT, 309}, },
			{{-1, ERROR, 260}, {69, SHIFT, 310}, },
			{{-1, ERROR, 261}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 311}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 262}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 263}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 138}, {72, SHIFT, 263}, },
			{{-1, ERROR, 266}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 267}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 268}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 269}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 270}, {81, SHIFT, 320}, },
			{{-1, ERROR, 271}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 272}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 273}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 274}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 275}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 276}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 277}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 278}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 279}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, ERROR, 280}, {81, SHIFT, 330}, },
			{{-1, ERROR, 281}, {67, SHIFT, 331}, },
			{{-1, ERROR, 282}, {67, SHIFT, 332}, },
			{{-1, ERROR, 283}, {69, SHIFT, 333}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 285}, {81, SHIFT, 334}, },
			{{-1, ERROR, 286}, {71, SHIFT, 335}, },
			{{-1, ERROR, 287}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 336}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 289}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 338}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 290}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 339}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 291}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 293}, {67, SHIFT, 342}, },
			{{-1, ERROR, 294}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 296}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 344}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 297}, {69, SHIFT, 345}, },
			{{-1, ERROR, 298}, {67, SHIFT, 346}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 303}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 347}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 304}, {67, SHIFT, 348}, },
			{{-1, ERROR, 305}, {69, SHIFT, 349}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 307}, {67, SHIFT, 350}, },
			{{-1, ERROR, 308}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 351}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 309}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, REDUCE, 128}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 256}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 312}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 355}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 167}, },
			{{-1, REDUCE, 98}, {58, SHIFT, 267}, },
			{{-1, REDUCE, 100}, {54, SHIFT, 268}, {57, SHIFT, 269}, },
			{{-1, REDUCE, 102}, {25, SHIFT, 270}, {51, SHIFT, 271}, {52, SHIFT, 272}, {55, SHIFT, 273}, {56, SHIFT, 274}, },
			{{-1, REDUCE, 103}, {25, SHIFT, 270}, {51, SHIFT, 271}, {52, SHIFT, 272}, {55, SHIFT, 273}, {56, SHIFT, 274}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 106}, {60, SHIFT, 275}, {61, SHIFT, 276}, },
			{{-1, REDUCE, 105}, {60, SHIFT, 275}, {61, SHIFT, 276}, },
			{{-1, REDUCE, 107}, {60, SHIFT, 275}, {61, SHIFT, 276}, },
			{{-1, REDUCE, 108}, {60, SHIFT, 275}, {61, SHIFT, 276}, },
			{{-1, REDUCE, 111}, {62, SHIFT, 277}, {63, SHIFT, 278}, {64, SHIFT, 279}, },
			{{-1, REDUCE, 112}, {62, SHIFT, 277}, {63, SHIFT, 278}, {64, SHIFT, 279}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 116}, },
			{{-1, ERROR, 330}, {68, SHIFT, 356}, },
			{{-1, ERROR, 331}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 357}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 332}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 359}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 333}, {67, SHIFT, 361}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 337}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 362}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 340}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 363}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 341}, {69, SHIFT, 364}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 343}, {69, SHIFT, 365}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 349}, {67, SHIFT, 366}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 131}, },
			{{-1, ERROR, 352}, {69, SHIFT, 367}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 356}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {69, SHIFT, 368}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 358}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 370}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 360}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 371}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 361}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 372}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 364}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 374}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 375}, {65, SHIFT, 236}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 365}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 133}, },
			{{-1, ERROR, 369}, {69, SHIFT, 380}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 373}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {66, SHIFT, 381}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 374}, {68, SHIFT, 382}, },
			{{-1, ERROR, 375}, {68, SHIFT, 383}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 77}, {13, REDUCE, 88}, },
			{{-1, ERROR, 378}, {13, SHIFT, 384}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 382}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 383}, {31, SHIFT, 193}, {39, SHIFT, 194}, {42, SHIFT, 195}, {53, SHIFT, 196}, {61, SHIFT, 197}, {68, SHIFT, 198}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 206}, },
			{{-1, ERROR, 384}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 233}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 235}, {65, SHIFT, 236}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 385}, {69, SHIFT, 388}, },
			{{-1, ERROR, 386}, {69, SHIFT, 389}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 388}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 374}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 375}, {65, SHIFT, 236}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 389}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 374}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 375}, {65, SHIFT, 236}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, ERROR, 390}, {13, SHIFT, 392}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 392}, {1, SHIFT, 44}, {6, SHIFT, 45}, {21, SHIFT, 374}, {26, SHIFT, 46}, {31, SHIFT, 193}, {36, SHIFT, 234}, {39, SHIFT, 194}, {42, SHIFT, 195}, {49, SHIFT, 375}, {65, SHIFT, 236}, {67, SHIFT, 238}, {68, SHIFT, 239}, {75, SHIFT, 200}, {76, SHIFT, 201}, {77, SHIFT, 202}, {78, SHIFT, 203}, {79, SHIFT, 204}, {80, SHIFT, 205}, {81, SHIFT, 240}, },
			{{-1, REDUCE, 89}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {7, 15}, },
			{{-1, 13}, {9, 18}, },
			{{-1, 6}, {8, 16}, },
			{{-1, 25}, {21, 28}, {26, 39}, {29, 43}, },
			{{-1, 241}, {31, 48}, {50, 75}, {68, 102}, {69, 75}, {76, 75}, {78, 75}, {120, 75}, {133, 102}, {139, 102}, {145, 102}, {150, 75}, {152, 75}, {164, 102}, {166, 102}, {191, 102}, {252, 102}, },
			{{-1, 33}, {36, 55}, {58, 55}, {60, 55}, {90, 55}, },
			{{-1, 67}, {241, 298}, },
			{{-1, 98}, {99, 129}, },
			{{-1, 34}, {35, 52}, {56, 52}, {57, 52}, {59, 52}, {85, 52}, {88, 52}, {89, 52}, {118, 52}, },
			{{-1, 92}, {93, 122}, {125, 122}, {126, 122}, {159, 122}, },
			{{-1, 103}, {139, 168}, {145, 171}, {164, 181}, {166, 185}, {191, 254}, {252, 305}, },
			{{-1, 134}, {135, 163}, },
			{{-1, 104}, {133, 162}, },
			{{-1, 53}, {54, 80}, {82, 80}, {84, 80}, {87, 80}, {112, 80}, {115, 80}, {117, 80}, {144, 80}, },
			{{-1, 76}, },
			{{-1, 183}, },
			{{-1, 123}, {124, 154}, {156, 154}, {158, 154}, {177, 154}, },
			{{-1, 150}, },
			{{-1, 77}, {69, 105}, {76, 107}, {120, 151}, {150, 172}, {152, 151}, },
			{{-1, 242}, {249, 301}, {289, 301}, {296, 301}, {303, 301}, {312, 301}, {337, 301}, {340, 301}, {358, 301}, {360, 301}, {364, 376}, {365, 379}, {373, 301}, {384, 387}, {388, 376}, {389, 379}, {392, 387}, },
			{{-1, 243}, {364, 377}, {388, 377}, {389, 377}, {392, 377}, },
			{{-1, 378}, {388, 390}, {389, 391}, {392, 393}, },
			{{-1, 244}, },
			{{-1, 245}, {178, 207}, {198, 207}, {225, 207}, {234, 207}, {239, 207}, {262, 207}, {263, 207}, {291, 207}, {294, 207}, {308, 207}, {356, 207}, {382, 207}, {383, 207}, },
			{{-1, 208}, {198, 260}, {234, 293}, {239, 297}, {262, 313}, {263, 314}, {291, 341}, {294, 343}, {382, 385}, {383, 386}, },
			{{-1, 209}, },
			{{-1, 210}, {266, 316}, },
			{{-1, 211}, {267, 317}, },
			{{-1, 212}, {268, 318}, {269, 319}, },
			{{-1, 213}, {271, 321}, {272, 322}, {273, 323}, {274, 324}, },
			{{-1, 214}, {275, 325}, {276, 326}, },
			{{-1, 215}, {196, 257}, {197, 258}, {277, 327}, {278, 328}, {279, 329}, {309, 353}, },
			{{-1, 216}, {310, 354}, },
			{{-1, 217}, },
			{{-1, 218}, {186, 246}, {231, 246}, {236, 246}, {249, 246}, {250, 246}, {261, 246}, {287, 246}, {289, 246}, {290, 246}, {296, 246}, {303, 246}, {312, 246}, {331, 246}, {332, 246}, {337, 246}, {340, 246}, {358, 246}, {360, 246}, {361, 246}, {364, 246}, {365, 246}, {373, 246}, {384, 246}, {388, 246}, {389, 246}, {392, 246}, },
			{{-1, 219}, },
			{{-1, 220}, {186, 247}, {231, 247}, {236, 247}, {249, 247}, {250, 247}, {261, 247}, {287, 247}, {289, 247}, {290, 247}, {296, 247}, {303, 247}, {312, 247}, {331, 247}, {332, 247}, {337, 247}, {340, 247}, {358, 247}, {360, 247}, {361, 247}, {364, 247}, {365, 247}, {373, 247}, {384, 247}, {388, 247}, {389, 247}, {392, 247}, },
			{{-1, 221}, {186, 248}, {231, 248}, {236, 248}, {249, 248}, {250, 248}, {261, 248}, {287, 248}, {289, 248}, {290, 248}, {296, 248}, {303, 248}, {312, 248}, {331, 248}, {332, 248}, {337, 248}, {340, 248}, {358, 248}, {360, 248}, {361, 248}, {364, 248}, {365, 248}, {373, 248}, {384, 248}, {388, 248}, {389, 248}, {392, 248}, },
			{{-1, 222}, },
			{{-1, 223}, {225, 283}, {308, 352}, {356, 369}, },
			{{-1, 264}, {265, 315}, },
			{{-1, 224}, },
			{{-1, 7}, },
			{{-1, 8}, },
			{{-1, 35}, {36, 56}, {37, 57}, {38, 59}, {58, 85}, {60, 88}, {61, 89}, {90, 118}, },
			{{-1, 36}, {37, 58}, {38, 60}, {61, 90}, },
			{{-1, 54}, {56, 82}, {57, 84}, {59, 87}, {85, 112}, {88, 115}, {89, 117}, {118, 144}, },
			{{-1, 93}, {94, 125}, {95, 126}, {127, 159}, },
			{{-1, 124}, {125, 156}, {126, 158}, {159, 177}, },
			{{-1, 99}, },
			{{-1, 249}, {231, 289}, {236, 296}, {250, 303}, {261, 312}, {287, 337}, {290, 340}, {331, 358}, {332, 360}, {361, 373}, },
			{{-1, 135}, },
			{{-1, 265}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'extern', 'public', importpath",
			"expecting: 'public'",
			"expecting: 'abstract', 'class', 'final'",
			"expecting: 'public', importpath",
			"expecting: EOF",
			"expecting: 'extern', EOF",
			"expecting: 'class'",
			"expecting: identifier",
			"expecting: 'extends', '{'",
			"expecting: 'extends', 'in'",
			"expecting: 'protected', 'public'",
			"expecting: '{'",
			"expecting: stringconst",
			"expecting: 'in'",
			"expecting: 'in', '{'",
			"expecting: 'boolean', 'char', 'int', identifier",
			"expecting: 'public', '}'",
			"expecting: '('",
			"expecting: 'abstract', 'boolean', 'char', 'final', 'int', 'static', 'synchronized', 'void', identifier",
			"expecting: ';', ','",
			"expecting: ';'",
			"expecting: 'boolean', 'char', 'int', ')', identifier",
			"expecting: 'boolean', 'char', 'int', 'void', identifier",
			"expecting: 'void'",
			"expecting: '(', identifier",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'main'",
			"expecting: 'abstract', 'boolean', 'char', 'final', 'int', 'synchronized', 'void', identifier",
			"expecting: 'super'",
			"expecting: 'new', 'super', 'this', '!', '-', '(', ')', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: '[', identifier",
			"expecting: 'boolean', 'char', 'if', 'int', 'new', 'return', 'super', 'this', 'while', '{', '}', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: '.'",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', ')', ',', '.'",
			"expecting: 'new', 'super', 'this', '!', '-', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'char', 'new', 'super', 'this', '!', '-', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'instanceof', '=', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', ')', ',', '.'",
			"expecting: ';', ')', ','",
			"expecting: '||', ';', ')', ','",
			"expecting: '&&', '||', ';', ')', ','",
			"expecting: '==', '!=', '&&', '||', ';', ')', ','",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', ';', ')', ','",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', ';', ')', ','",
			"expecting: 'instanceof', '>', '<', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', ')', ','",
			"expecting: ']'",
			"expecting: '['",
			"expecting: 'new', 'super', 'this', '!', '-', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'boolean', 'char', 'else', 'if', 'int', 'new', 'return', 'super', 'this', 'while', '{', '}', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: '=', '.', identifier",
			"expecting: ';', '.'",
			"expecting: 'instanceof', 'new', 'super', 'this', '>', '<', '!', '==', '<=', '>=', '!=', '&&', '||', '+', '-', '*', '/', '%', ';', '(', ')', ',', '.', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'boolean', 'char', 'if', 'int', 'new', 'return', 'super', 'this', 'while', '{', ';', '(', 'null', 'true', 'false', charconst, intconst, stringconst, identifier",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 3, 5, 2, 6, 7, 6, 6, 3, 4, 5, 7, 6, 8, 7, 9, 7, 7, 10, 11, 8, 12, 13, 9, 14, 15, 7, 10, 16, 16, 10, 10, 10, 11, 11, 12, 12, 13, 7, 7, 7, 7, 7, 17, 18, 4, 16, 16, 16, 10, 16, 16, 10, 16, 10, 10, 1, 11, 11, 12, 19, 20, 21, 22, 22, 23, 22, 7, 24, 7, 22, 7, 18, 4, 16, 4, 16, 4, 16, 16, 4, 16, 16, 16, 10, 7, 16, 16, 1, 1, 11, 7, 19, 19, 10, 11, 7, 25, 26, 7, 27, 7, 17, 4, 4, 4, 16, 4, 4, 16, 4, 16, 16, 17, 28, 5, 16, 16, 16, 16, 16, 1, 19, 19, 29, 26, 11, 15, 26, 26, 17, 17, 17, 21, 4, 4, 4, 4, 16, 21, 22, 22, 22, 24, 22, 7, 28, 5, 16, 5, 16, 5, 16, 16, 17, 29, 26, 26, 21, 7, 21, 11, 25, 4, 20, 25, 7, 17, 5, 5, 5, 16, 30, 17, 20, 25, 31, 25, 11, 25, 32, 11, 16, 20, 17, 21, 5, 7, 33, 34, 35, 35, 36, 20, 34, 34, 34, 34, 34, 34, 37, 38, 26, 39, 40, 41, 42, 43, 44, 44, 44, 44, 34, 34, 34, 34, 33, 25, 34, 30, 16, 20, 45, 46, 11, 32, 11, 17, 47, 17, 32, 16, 48, 35, 49, 7, 32, 32, 20, 20, 33, 50, 50, 32, 32, 16, 21, 20, 25, 17, 34, 44, 44, 25, 25, 32, 35, 35, 26, 26, 35, 35, 35, 35, 7, 35, 35, 35, 35, 35, 35, 35, 35, 35, 7, 20, 20, 25, 16, 7, 45, 32, 16, 32, 32, 35, 48, 20, 35, 48, 32, 25, 20, 48, 16, 32, 16, 32, 20, 25, 16, 20, 30, 35, 51, 16, 32, 38, 26, 26, 40, 41, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 44, 17, 32, 32, 20, 25, 25, 16, 32, 16, 16, 32, 25, 48, 25, 48, 33, 32, 16, 16, 20, 16, 34, 25, 44, 44, 16, 30, 16, 32, 16, 32, 32, 16, 16, 52, 52, 16, 34, 34, 25, 16, 16, 16, 32, 17, 17, 32, 48, 53, 32, 34, 16, 35, 35, 52, 25, 25, 32, 52, 52, 53, 53, 52, 53, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            actionTable = new int[length][][];
            for(int i = 0; i < actionTable.length; i++)
            {
                length = s.readInt();
                actionTable[i] = new int[length][3];
                for(int j = 0; j < actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
