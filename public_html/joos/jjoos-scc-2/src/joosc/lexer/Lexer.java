/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.lexer;

import java.io.*;
import java.util.*;
import joosc.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TBlanks(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TEolComment(text, line, pos); }
    Token new2(String text, int line, int pos) { return new TExtComment(text, line, pos); }
    Token new3(int line, int pos) { return new TAbstract(line, pos); }
    Token new4(int line, int pos) { return new TBoolean(line, pos); }
    Token new5(int line, int pos) { return new TBreak(line, pos); }
    Token new6(int line, int pos) { return new TByte(line, pos); }
    Token new7(int line, int pos) { return new TCase(line, pos); }
    Token new8(int line, int pos) { return new TCatch(line, pos); }
    Token new9(int line, int pos) { return new TChar(line, pos); }
    Token new10(int line, int pos) { return new TClass(line, pos); }
    Token new11(int line, int pos) { return new TConst(line, pos); }
    Token new12(int line, int pos) { return new TContinue(line, pos); }
    Token new13(int line, int pos) { return new TDefault(line, pos); }
    Token new14(int line, int pos) { return new TDo(line, pos); }
    Token new15(int line, int pos) { return new TDouble(line, pos); }
    Token new16(int line, int pos) { return new TElse(line, pos); }
    Token new17(int line, int pos) { return new TExtends(line, pos); }
    Token new18(int line, int pos) { return new TExtern(line, pos); }
    Token new19(int line, int pos) { return new TFinal(line, pos); }
    Token new20(int line, int pos) { return new TFinally(line, pos); }
    Token new21(int line, int pos) { return new TFloat(line, pos); }
    Token new22(int line, int pos) { return new TFor(line, pos); }
    Token new23(int line, int pos) { return new TGoto(line, pos); }
    Token new24(int line, int pos) { return new TIf(line, pos); }
    Token new25(int line, int pos) { return new TImplements(line, pos); }
    Token new26(int line, int pos) { return new TImport(line, pos); }
    Token new27(int line, int pos) { return new TIn(line, pos); }
    Token new28(int line, int pos) { return new TInstanceof(line, pos); }
    Token new29(int line, int pos) { return new TInt(line, pos); }
    Token new30(int line, int pos) { return new TInterface(line, pos); }
    Token new31(int line, int pos) { return new TLong(line, pos); }
    Token new32(int line, int pos) { return new TMain(line, pos); }
    Token new33(int line, int pos) { return new TNative(line, pos); }
    Token new34(int line, int pos) { return new TNew(line, pos); }
    Token new35(int line, int pos) { return new TPackage(line, pos); }
    Token new36(int line, int pos) { return new TPrivate(line, pos); }
    Token new37(int line, int pos) { return new TProtected(line, pos); }
    Token new38(int line, int pos) { return new TPublic(line, pos); }
    Token new39(int line, int pos) { return new TReturn(line, pos); }
    Token new40(int line, int pos) { return new TShort(line, pos); }
    Token new41(int line, int pos) { return new TStatic(line, pos); }
    Token new42(int line, int pos) { return new TSuper(line, pos); }
    Token new43(int line, int pos) { return new TSwitch(line, pos); }
    Token new44(int line, int pos) { return new TSynchronized(line, pos); }
    Token new45(int line, int pos) { return new TThis(line, pos); }
    Token new46(int line, int pos) { return new TThrow(line, pos); }
    Token new47(int line, int pos) { return new TThrows(line, pos); }
    Token new48(int line, int pos) { return new TTransient(line, pos); }
    Token new49(int line, int pos) { return new TTry(line, pos); }
    Token new50(int line, int pos) { return new TVoid(line, pos); }
    Token new51(int line, int pos) { return new TVolatile(line, pos); }
    Token new52(int line, int pos) { return new TWhile(line, pos); }
    Token new53(int line, int pos) { return new TAssign(line, pos); }
    Token new54(int line, int pos) { return new TGt(line, pos); }
    Token new55(int line, int pos) { return new TLt(line, pos); }
    Token new56(int line, int pos) { return new TNot(line, pos); }
    Token new57(int line, int pos) { return new TEq(line, pos); }
    Token new58(int line, int pos) { return new TLeq(line, pos); }
    Token new59(int line, int pos) { return new TGeq(line, pos); }
    Token new60(int line, int pos) { return new TNeq(line, pos); }
    Token new61(int line, int pos) { return new TAnd(line, pos); }
    Token new62(int line, int pos) { return new TOr(line, pos); }
    Token new63(int line, int pos) { return new TPlus(line, pos); }
    Token new64(int line, int pos) { return new TMinus(line, pos); }
    Token new65(int line, int pos) { return new TMult(line, pos); }
    Token new66(int line, int pos) { return new TDiv(line, pos); }
    Token new67(int line, int pos) { return new TMod(line, pos); }
    Token new68(int line, int pos) { return new TLBrace(line, pos); }
    Token new69(int line, int pos) { return new TRBrace(line, pos); }
    Token new70(int line, int pos) { return new TSemicolon(line, pos); }
    Token new71(int line, int pos) { return new TLPar(line, pos); }
    Token new72(int line, int pos) { return new TRPar(line, pos); }
    Token new73(int line, int pos) { return new TLBracket(line, pos); }
    Token new74(int line, int pos) { return new TRBracket(line, pos); }
    Token new75(int line, int pos) { return new TComma(line, pos); }
    Token new76(int line, int pos) { return new TDot(line, pos); }
    Token new77(int line, int pos) { return new TInc(line, pos); }
    Token new78(int line, int pos) { return new TNull(line, pos); }
    Token new79(int line, int pos) { return new TTrue(line, pos); }
    Token new80(int line, int pos) { return new TFalse(line, pos); }
    Token new81(String text, int line, int pos) { return new TCharconst(text, line, pos); }
    Token new82(String text, int line, int pos) { return new TIntconst(text, line, pos); }
    Token new83(String text, int line, int pos) { return new TStringconst(text, line, pos); }
    Token new84(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new85(String text, int line, int pos) { return new TImportpath(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {32, 32, 3}, {33, 33, 4}, {34, 34, 5}, {37, 37, 6}, {38, 38, 7}, {39, 39, 8}, {40, 40, 9}, {41, 41, 10}, {42, 42, 11}, {43, 43, 12}, {44, 44, 13}, {45, 45, 14}, {46, 46, 15}, {47, 47, 16}, {48, 48, 17}, {49, 57, 18}, {59, 59, 19}, {60, 60, 20}, {61, 61, 21}, {62, 62, 22}, {65, 90, 23}, {91, 91, 24}, {93, 93, 25}, {95, 95, 26}, {97, 97, 27}, {98, 98, 28}, {99, 99, 29}, {100, 100, 30}, {101, 101, 31}, {102, 102, 32}, {103, 103, 33}, {104, 104, 23}, {105, 105, 34}, {106, 107, 23}, {108, 108, 35}, {109, 109, 36}, {110, 110, 37}, {111, 111, 23}, {112, 112, 38}, {113, 113, 23}, {114, 114, 39}, {115, 115, 40}, {116, 116, 41}, {117, 117, 23}, {118, 118, 42}, {119, 119, 43}, {120, 122, 23}, {123, 123, 44}, {124, 124, 45}, {125, 125, 46}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{61, 61, 47}, },
            {{0, 33, 48}, {34, 34, 49}, {35, 65535, 48}, },
            {},
            {{38, 38, 50}, },
            {{0, 9, 51}, {11, 38, 51}, {40, 91, 51}, {92, 92, 52}, {93, 65535, 51}, },
            {},
            {},
            {},
            {{43, 43, 53}, },
            {},
            {},
            {},
            {{42, 42, 54}, {47, 47, 55}, },
            {},
            {{48, 57, 56}, },
            {},
            {{61, 61, 57}, },
            {{61, 61, 58}, },
            {{61, 61, 59}, },
            {{48, 57, 60}, {65, 90, 61}, {95, 95, 62}, {97, 122, 61}, },
            {},
            {},
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 97, 61}, {98, 98, 63}, {99, 122, 61}, },
            {{48, 95, -25}, {97, 110, 61}, {111, 111, 64}, {112, 113, 61}, {114, 114, 65}, {115, 120, 61}, {121, 121, 66}, {122, 122, 61}, },
            {{48, 95, -25}, {97, 97, 67}, {98, 103, 61}, {104, 104, 68}, {105, 107, 61}, {108, 108, 69}, {109, 110, 61}, {111, 111, 70}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 100, 61}, {101, 101, 71}, {102, 110, 61}, {111, 111, 72}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 107, 61}, {108, 108, 73}, {109, 119, 61}, {120, 120, 74}, {121, 122, 61}, },
            {{48, 95, -25}, {97, 97, 75}, {98, 104, 61}, {105, 105, 76}, {106, 107, 61}, {108, 108, 77}, {109, 110, 61}, {111, 111, 78}, {112, 122, 61}, },
            {{48, 110, -30}, {111, 111, 79}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 101, 61}, {102, 102, 80}, {103, 108, 61}, {109, 109, 81}, {110, 110, 82}, {111, 122, 61}, },
            {{48, 110, -30}, {111, 111, 83}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 97, 84}, {98, 122, 61}, },
            {{48, 95, -25}, {97, 97, 85}, {98, 100, 61}, {101, 101, 86}, {102, 116, 61}, {117, 117, 87}, {118, 122, 61}, },
            {{48, 95, -25}, {97, 97, 88}, {98, 113, 61}, {114, 114, 89}, {115, 116, 61}, {117, 117, 90}, {118, 122, 61}, },
            {{48, 100, -32}, {101, 101, 91}, {102, 122, 61}, },
            {{48, 95, -25}, {97, 103, 61}, {104, 104, 92}, {105, 115, 61}, {116, 116, 93}, {117, 117, 94}, {118, 118, 61}, {119, 119, 95}, {120, 120, 61}, {121, 121, 96}, {122, 122, 61}, },
            {{48, 103, -42}, {104, 104, 97}, {105, 113, 61}, {114, 114, 98}, {115, 122, 61}, },
            {{48, 110, -30}, {111, 111, 99}, {112, 122, 61}, },
            {{48, 103, -42}, {104, 104, 100}, {105, 122, 61}, },
            {},
            {{124, 124, 101}, },
            {},
            {},
            {{0, 65535, -7}, },
            {},
            {},
            {{39, 39, 102}, },
            {{34, 34, 103}, {39, 39, 104}, {48, 55, 105}, {92, 92, 106}, {98, 98, 107}, {102, 102, 108}, {110, 110, 109}, {114, 114, 110}, {116, 116, 111}, },
            {},
            {{0, 41, 112}, {42, 42, 113}, {43, 65535, 112}, },
            {{0, 9, 114}, {10, 10, 115}, {11, 65535, 114}, },
            {{48, 57, 56}, },
            {},
            {},
            {},
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 114, 61}, {115, 115, 116}, {116, 122, 61}, },
            {{48, 110, -30}, {111, 111, 117}, {112, 122, 61}, },
            {{48, 100, -32}, {101, 101, 118}, {102, 122, 61}, },
            {{48, 95, -25}, {97, 115, 61}, {116, 116, 119}, {117, 122, 61}, },
            {{48, 114, -65}, {115, 115, 120}, {116, 116, 121}, {117, 122, 61}, },
            {{48, 95, -25}, {97, 97, 122}, {98, 122, 61}, },
            {{48, 95, -25}, {97, 97, 123}, {98, 122, 61}, },
            {{48, 95, -25}, {97, 109, 61}, {110, 110, 124}, {111, 122, 61}, },
            {{48, 101, -36}, {102, 102, 125}, {103, 122, 61}, },
            {{48, 95, -25}, {97, 116, 61}, {117, 117, 126}, {118, 122, 61}, },
            {{48, 114, -65}, {115, 115, 127}, {116, 122, 61}, },
            {{48, 115, -68}, {116, 116, 128}, {117, 122, 61}, },
            {{48, 107, -33}, {108, 108, 129}, {109, 122, 61}, },
            {{48, 109, -72}, {110, 110, 130}, {111, 122, 61}, },
            {{48, 110, -30}, {111, 111, 131}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 113, 61}, {114, 114, 132}, {115, 122, 61}, },
            {{48, 115, -68}, {116, 116, 133}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 111, 61}, {112, 112, 134}, {113, 122, 61}, },
            {{48, 114, -65}, {115, 115, 135}, {116, 116, 136}, {117, 122, 61}, },
            {{48, 109, -72}, {110, 110, 137}, {111, 122, 61}, },
            {{48, 95, -25}, {97, 104, 61}, {105, 105, 138}, {106, 122, 61}, },
            {{48, 115, -68}, {116, 116, 139}, {117, 122, 61}, },
            {{48, 95, -25}, {97, 118, 61}, {119, 119, 140}, {120, 122, 61}, },
            {{48, 107, -33}, {108, 108, 141}, {109, 122, 61}, },
            {{48, 95, -25}, {97, 98, 61}, {99, 99, 142}, {100, 122, 61}, },
            {{48, 104, -86}, {105, 105, 143}, {106, 110, 61}, {111, 111, 144}, {112, 122, 61}, },
            {{48, 97, -29}, {98, 98, 145}, {99, 122, 61}, },
            {{48, 115, -68}, {116, 116, 146}, {117, 122, 61}, },
            {{48, 110, -30}, {111, 111, 147}, {112, 122, 61}, },
            {{48, 95, -25}, {97, 97, 148}, {98, 122, 61}, },
            {{48, 111, -83}, {112, 112, 149}, {113, 122, 61}, },
            {{48, 104, -86}, {105, 105, 150}, {106, 122, 61}, },
            {{48, 109, -72}, {110, 110, 151}, {111, 122, 61}, },
            {{48, 104, -86}, {105, 105, 152}, {106, 113, 61}, {114, 114, 153}, {115, 122, 61}, },
            {{48, 95, -25}, {97, 97, 154}, {98, 116, 61}, {117, 117, 155}, {118, 120, 61}, {121, 121, 156}, {122, 122, 61}, },
            {{48, 104, -86}, {105, 105, 157}, {106, 107, 61}, {108, 108, 158}, {109, 122, 61}, },
            {{48, 104, -86}, {105, 105, 159}, {106, 122, 61}, },
            {},
            {},
            {{39, 39, 102}, },
            {{39, 39, 102}, },
            {{48, 55, 160}, },
            {{39, 39, 102}, },
            {{39, 39, 102}, },
            {{39, 39, 102}, },
            {{39, 39, 102}, },
            {{39, 39, 102}, },
            {{39, 39, 102}, },
            {{0, 65535, -56}, },
            {{0, 41, 161}, {42, 42, 113}, {43, 46, 161}, {47, 47, 162}, {48, 65535, 161}, },
            {{0, 65535, -57}, },
            {},
            {{48, 115, -68}, {116, 116, 163}, {117, 122, 61}, },
            {{48, 107, -33}, {108, 108, 164}, {109, 122, 61}, },
            {{48, 95, -25}, {97, 97, 165}, {98, 122, 61}, },
            {{48, 100, -32}, {101, 101, 166}, {102, 122, 61}, },
            {{48, 100, -32}, {101, 101, 167}, {102, 122, 61}, },
            {{48, 98, -90}, {99, 99, 168}, {100, 122, 61}, },
            {{48, 113, -80}, {114, 114, 169}, {115, 122, 61}, },
            {{48, 114, -65}, {115, 115, 170}, {116, 122, 61}, },
            {{48, 114, -65}, {115, 115, 171}, {116, 116, 172}, {117, 122, 61}, },
            {{48, 95, -25}, {97, 97, 173}, {98, 122, 61}, },
            {{48, 97, -29}, {98, 98, 174}, {99, 122, 61}, },
            {{48, 100, -32}, {101, 101, 175}, {102, 122, 61}, },
            {{48, 100, -32}, {101, 101, 176}, {102, 122, 61}, },
            {{48, 114, -65}, {115, 115, 177}, {116, 122, 61}, },
            {{48, 95, -25}, {97, 97, 178}, {98, 122, 61}, },
            {{48, 95, -25}, {97, 97, 179}, {98, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 110, -30}, {111, 111, 180}, {112, 122, 61}, },
            {{48, 107, -33}, {108, 108, 181}, {109, 110, 61}, {111, 111, 182}, {112, 122, 61}, },
            {{48, 115, -68}, {116, 116, 183}, {117, 122, 61}, },
            {{48, 100, -32}, {101, 101, 184}, {102, 122, 61}, },
            {{48, 95, -25}, {97, 102, 61}, {103, 103, 185}, {104, 122, 61}, },
            {{48, 109, -72}, {110, 110, 186}, {111, 122, 61}, },
            {{48, 104, -86}, {105, 105, 187}, {106, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 107, -33}, {108, 108, 188}, {109, 122, 61}, },
            {{48, 95, -25}, {97, 106, 61}, {107, 107, 189}, {108, 122, 61}, },
            {{48, 95, -25}, {97, 117, 61}, {118, 118, 190}, {119, 122, 61}, },
            {{48, 115, -68}, {116, 116, 191}, {117, 122, 61}, },
            {{48, 107, -33}, {108, 108, 192}, {109, 122, 61}, },
            {{48, 116, -74}, {117, 117, 193}, {118, 122, 61}, },
            {{48, 113, -80}, {114, 114, 194}, {115, 122, 61}, },
            {{48, 115, -68}, {116, 116, 195}, {117, 122, 61}, },
            {{48, 100, -32}, {101, 101, 196}, {102, 122, 61}, },
            {{48, 115, -68}, {116, 116, 197}, {117, 122, 61}, },
            {{48, 98, -90}, {99, 99, 198}, {100, 122, 61}, },
            {{48, 114, -65}, {115, 115, 199}, {116, 122, 61}, },
            {{48, 110, -30}, {111, 111, 200}, {112, 122, 61}, },
            {{48, 109, -72}, {110, 110, 201}, {111, 122, 61}, },
            {{48, 100, -32}, {101, 101, 202}, {102, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 99, 61}, {100, 100, 203}, {101, 122, 61}, },
            {{48, 95, -25}, {97, 97, 204}, {98, 122, 61}, },
            {{48, 107, -33}, {108, 108, 205}, {109, 122, 61}, },
            {{48, 55, 206}, },
            {{0, 41, 207}, {42, 42, 208}, {43, 65535, 207}, },
            {},
            {{48, 113, -80}, {114, 114, 209}, {115, 122, 61}, },
            {{48, 100, -32}, {101, 101, 210}, {102, 122, 61}, },
            {{48, 106, -144}, {107, 107, 211}, {108, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 103, -42}, {104, 104, 212}, {105, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 114, -65}, {115, 115, 213}, {116, 122, 61}, },
            {{48, 115, -68}, {116, 116, 214}, {117, 122, 61}, },
            {{48, 104, -86}, {105, 105, 215}, {106, 122, 61}, },
            {{48, 116, -74}, {117, 117, 216}, {118, 122, 61}, },
            {{48, 107, -33}, {108, 108, 217}, {109, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 109, -72}, {110, 110, 218}, {111, 113, 61}, {114, 114, 219}, {115, 122, 61}, },
            {{48, 100, -32}, {101, 101, 220}, {102, 122, 61}, },
            {{48, 107, -33}, {108, 108, 221}, {109, 122, 61}, },
            {{48, 115, -68}, {116, 116, 222}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 223}, {102, 122, 61}, },
            {{48, 113, -80}, {114, 114, 224}, {115, 122, 61}, },
            {{48, 95, -25}, {97, 97, 225}, {98, 122, 61}, },
            {{48, 113, -80}, {114, 114, 226}, {115, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 117, -145}, {118, 118, 227}, {119, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 97, 228}, {98, 122, 61}, },
            {{48, 95, -25}, {97, 97, 229}, {98, 122, 61}, },
            {{48, 100, -32}, {101, 101, 230}, {102, 122, 61}, },
            {{48, 104, -86}, {105, 105, 231}, {106, 122, 61}, },
            {{48, 113, -80}, {114, 114, 232}, {115, 122, 61}, },
            {{48, 115, -68}, {116, 116, 233}, {117, 122, 61}, },
            {{48, 104, -86}, {105, 105, 234}, {106, 122, 61}, },
            {{48, 113, -80}, {114, 114, 235}, {115, 122, 61}, },
            {{48, 98, -90}, {99, 99, 236}, {100, 122, 61}, },
            {{48, 103, -42}, {104, 104, 237}, {105, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 118, -88}, {119, 119, 238}, {120, 122, 61}, },
            {{48, 114, -65}, {115, 115, 239}, {116, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 115, -68}, {116, 116, 240}, {117, 122, 61}, },
            {{48, 100, -32}, {101, 101, 241}, {102, 122, 61}, },
            {{39, 39, 102}, },
            {{0, 65535, -163}, },
            {{0, 41, 161}, {42, 42, 208}, {43, 65535, -115}, },
            {{48, 95, -25}, {97, 97, 242}, {98, 122, 61}, },
            {{48, 95, -25}, {97, 97, 243}, {98, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 109, -72}, {110, 110, 244}, {111, 122, 61}, },
            {{48, 107, -33}, {108, 108, 245}, {109, 122, 61}, },
            {{48, 100, -32}, {101, 101, 246}, {102, 122, 61}, },
            {{48, 99, -159}, {100, 100, 247}, {101, 122, 61}, },
            {{48, 109, -72}, {110, 110, 248}, {111, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 107, -33}, {108, 108, 249}, {109, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 108, 61}, {109, 109, 250}, {110, 122, 61}, },
            {{48, 115, -68}, {116, 116, 251}, {117, 122, 61}, },
            {{48, 109, -72}, {110, 110, 252}, {111, 122, 61}, },
            {{48, 101, -36}, {102, 102, 253}, {103, 122, 61}, },
            {{48, 100, -32}, {101, 101, 254}, {102, 122, 61}, },
            {{48, 102, -139}, {103, 103, 255}, {104, 122, 61}, },
            {{48, 115, -68}, {116, 116, 256}, {117, 122, 61}, },
            {{48, 98, -90}, {99, 99, 257}, {100, 122, 61}, },
            {{48, 98, -90}, {99, 99, 258}, {100, 122, 61}, },
            {{48, 109, -72}, {110, 110, 259}, {111, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 98, -90}, {99, 99, 260}, {100, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 103, -42}, {104, 104, 261}, {105, 122, 61}, },
            {{48, 113, -80}, {114, 114, 262}, {115, 122, 61}, },
            {{48, 114, -65}, {115, 115, 263}, {116, 122, 61}, },
            {{48, 104, -86}, {105, 105, 264}, {106, 122, 61}, },
            {{48, 104, -86}, {105, 105, 265}, {106, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 98, -90}, {99, 99, 266}, {100, 122, 61}, },
            {{48, 109, -72}, {110, 110, 267}, {111, 122, 61}, },
            {{48, 116, -74}, {117, 117, 268}, {118, 122, 61}, },
            {{48, 115, -68}, {116, 116, 269}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 114, -65}, {115, 115, 270}, {116, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 120, 61}, {121, 121, 271}, {122, 122, 61}, },
            {{48, 100, -32}, {101, 101, 272}, {102, 122, 61}, },
            {{32, 32, 273}, {48, 122, -25}, },
            {{48, 98, -90}, {99, 99, 274}, {100, 122, 61}, },
            {{48, 95, -25}, {97, 97, 275}, {98, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 276}, {102, 122, 61}, },
            {{48, 100, -32}, {101, 101, 277}, {102, 122, 61}, },
            {{48, 115, -68}, {116, 116, 278}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 110, -30}, {111, 111, 279}, {112, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 280}, {102, 122, 61}, },
            {{48, 107, -33}, {108, 108, 281}, {109, 122, 61}, },
            {{48, 115, -68}, {116, 116, 282}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 283}, {102, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 109, -72}, {110, 110, 284}, {111, 122, 61}, },
            {{42, 42, 285}, {65, 90, 286}, {95, 95, 287}, {97, 122, 286}, },
            {{48, 100, -32}, {101, 101, 288}, {102, 122, 61}, },
            {{48, 98, -90}, {99, 99, 289}, {100, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 290}, {102, 122, 61}, },
            {{48, 109, -72}, {110, 110, 291}, {111, 122, 61}, },
            {{48, 109, -72}, {110, 110, 292}, {111, 122, 61}, },
            {{48, 100, -32}, {101, 101, 293}, {102, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 115, -68}, {116, 116, 294}, {117, 122, 61}, },
            {{59, 59, 295}, },
            {{46, 46, 296}, {48, 57, 297}, {59, 59, 295}, {65, 90, 298}, {95, 95, 299}, {97, 122, 298}, },
            {{46, 122, -288}, },
            {{48, 110, -30}, {111, 111, 300}, {112, 122, 61}, },
            {{48, 100, -32}, {101, 101, 301}, {102, 122, 61}, },
            {{48, 99, -159}, {100, 100, 302}, {101, 122, 61}, },
            {{48, 104, -86}, {105, 105, 303}, {106, 122, 61}, },
            {{48, 115, -68}, {116, 116, 304}, {117, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 114, -65}, {115, 115, 305}, {116, 122, 61}, },
            {},
            {{42, 122, -275}, },
            {{46, 122, -288}, },
            {{46, 122, -288}, },
            {{46, 122, -288}, },
            {{48, 101, -36}, {102, 102, 306}, {103, 122, 61}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 95, -25}, {97, 121, 61}, {122, 122, 307}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 122, -25}, },
            {{48, 100, -32}, {101, 101, 308}, {102, 122, 61}, },
            {{48, 99, -159}, {100, 100, 309}, {101, 122, 61}, },
            {{48, 122, -25}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 56, -1, 67, -1, -1, 71, 72, 65, 63, 75, 64, 76, 66, 82, 82, 70, 55, 53, 54, 84, 73, 74, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 68, -1, 69, 60, -1, 83, 61, -1, -1, 77, -1, -1, 82, 58, 57, 59, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 14, 84, 84, 84, 84, 84, 84, 84, 24, 84, 27, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 62, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 22, 84, 84, 84, 29, 84, 84, 84, 34, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 49, 84, 84, 84, -1, -1, 2, 84, 84, 84, 6, 7, 84, 9, 84, 84, 84, 84, 84, 16, 84, 84, 84, 84, 23, 84, 84, 84, 84, 31, 32, 84, 78, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 45, 84, 84, 79, 50, 84, 84, -1, -1, -1, 84, 84, 5, 8, 10, 11, 84, 84, 84, 84, 84, 80, 19, 21, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 84, 42, 84, 84, 46, 84, 84, 52, 84, 84, 84, 84, 15, 84, 18, 84, 84, 26, 84, 84, 33, 84, 84, 84, 38, 39, 41, 43, 84, 47, 84, 84, 84, 4, 84, 13, 17, 20, 84, -1, 84, 84, 35, 36, 84, 84, 84, 84, 3, 12, 84, -1, -1, -1, 84, 84, 84, 84, 84, 51, 84, 85, -1, -1, -1, -1, 84, 30, 37, 84, 48, 25, 28, 84, 84, 44, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
