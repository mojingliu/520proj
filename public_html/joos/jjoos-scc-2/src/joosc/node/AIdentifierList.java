/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class AIdentifierList extends PIdentifierList
{
    private final LinkedList _identifier_ = new TypedLinkedList(new Identifier_Cast());

    public AIdentifierList()
    {
    }

    public AIdentifierList(
        List _identifier_)
    {
        {
            this._identifier_.clear();
            this._identifier_.addAll(_identifier_);
        }

    }

    public AIdentifierList(
        XTIdentifier _identifier_)
    {
        if(_identifier_ != null)
        {
            while(_identifier_ instanceof X1TIdentifier)
            {
                this._identifier_.addFirst(((X1TIdentifier) _identifier_).getTIdentifier());
                _identifier_ = ((X1TIdentifier) _identifier_).getXTIdentifier();
            }
            this._identifier_.addFirst(((X2TIdentifier) _identifier_).getTIdentifier());
        }

    }
    public Object clone()
    {
        return new AIdentifierList(
            cloneList(_identifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIdentifierList(this);
    }

    public LinkedList getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(List list)
    {
        _identifier_.clear();
        _identifier_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_identifier_);
    }

    void removeChild(Node child)
    {
        if(_identifier_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _identifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Identifier_Cast implements Cast
    {
        public Object cast(Object o)
        {
            TIdentifier node = (TIdentifier) o;

            if((node.parent() != null) &&
                (node.parent() != AIdentifierList.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AIdentifierList.this))
            {
                node.parent(AIdentifierList.this);
            }

            return node;
        }
    }
}
