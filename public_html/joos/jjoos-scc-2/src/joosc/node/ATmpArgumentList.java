/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class ATmpArgumentList extends PArgumentList
{
    private PExp _exp_;
    private final LinkedList _argumentListTail_ = new TypedLinkedList(new ArgumentListTail_Cast());

    public ATmpArgumentList()
    {
    }

    public ATmpArgumentList(
        PExp _exp_,
        List _argumentListTail_)
    {
        setExp(_exp_);

        {
            this._argumentListTail_.clear();
            this._argumentListTail_.addAll(_argumentListTail_);
        }

    }

    public ATmpArgumentList(
        PExp _exp_,
        XPArgumentListTail _argumentListTail_)
    {
        setExp(_exp_);

        if(_argumentListTail_ != null)
        {
            while(_argumentListTail_ instanceof X1PArgumentListTail)
            {
                this._argumentListTail_.addFirst(((X1PArgumentListTail) _argumentListTail_).getPArgumentListTail());
                _argumentListTail_ = ((X1PArgumentListTail) _argumentListTail_).getXPArgumentListTail();
            }
            this._argumentListTail_.addFirst(((X2PArgumentListTail) _argumentListTail_).getPArgumentListTail());
        }

    }
    public Object clone()
    {
        return new ATmpArgumentList(
            (PExp) cloneNode(_exp_),
            cloneList(_argumentListTail_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATmpArgumentList(this);
    }

    public PExp getExp()
    {
        return _exp_;
    }

    public void setExp(PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp_ = node;
    }

    public LinkedList getArgumentListTail()
    {
        return _argumentListTail_;
    }

    public void setArgumentListTail(List list)
    {
        _argumentListTail_.clear();
        _argumentListTail_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_exp_)
            + toString(_argumentListTail_);
    }

    void removeChild(Node child)
    {
        if(_exp_ == child)
        {
            _exp_ = null;
            return;
        }

        if(_argumentListTail_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        for(ListIterator i = _argumentListTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class ArgumentListTail_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PArgumentListTail node = (PArgumentListTail) o;

            if((node.parent() != null) &&
                (node.parent() != ATmpArgumentList.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ATmpArgumentList.this))
            {
                node.parent(ATmpArgumentList.this);
            }

            return node;
        }
    }
}
