/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class AFormalList extends PFormalList
{
    private final LinkedList _formal_ = new TypedLinkedList(new Formal_Cast());

    public AFormalList()
    {
    }

    public AFormalList(
        List _formal_)
    {
        {
            this._formal_.clear();
            this._formal_.addAll(_formal_);
        }

    }

    public AFormalList(
        XPFormal _formal_)
    {
        if(_formal_ != null)
        {
            while(_formal_ instanceof X1PFormal)
            {
                this._formal_.addFirst(((X1PFormal) _formal_).getPFormal());
                _formal_ = ((X1PFormal) _formal_).getXPFormal();
            }
            this._formal_.addFirst(((X2PFormal) _formal_).getPFormal());
        }

    }
    public Object clone()
    {
        return new AFormalList(
            cloneList(_formal_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFormalList(this);
    }

    public LinkedList getFormal()
    {
        return _formal_;
    }

    public void setFormal(List list)
    {
        _formal_.clear();
        _formal_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_formal_);
    }

    void removeChild(Node child)
    {
        if(_formal_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _formal_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class Formal_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PFormal node = (PFormal) o;

            if((node.parent() != null) &&
                (node.parent() != AFormalList.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AFormalList.this))
            {
                node.parent(AFormalList.this);
            }

            return node;
        }
    }
}
