/* This file was generated by SableCC (http://www.sablecc.org/). */

package joosc.node;

import java.util.*;
import joosc.analysis.*;

public final class AInstanceofExp extends PExp
{
    private PExp _exp_;
    private TInstanceof _instanceof_;
    private TIdentifier _identifier_;

    public AInstanceofExp()
    {
    }

    public AInstanceofExp(
        PExp _exp_,
        TInstanceof _instanceof_,
        TIdentifier _identifier_)
    {
        setExp(_exp_);

        setInstanceof(_instanceof_);

        setIdentifier(_identifier_);

    }
    public Object clone()
    {
        return new AInstanceofExp(
            (PExp) cloneNode(_exp_),
            (TInstanceof) cloneNode(_instanceof_),
            (TIdentifier) cloneNode(_identifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstanceofExp(this);
    }

    public PExp getExp()
    {
        return _exp_;
    }

    public void setExp(PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _exp_ = node;
    }

    public TInstanceof getInstanceof()
    {
        return _instanceof_;
    }

    public void setInstanceof(TInstanceof node)
    {
        if(_instanceof_ != null)
        {
            _instanceof_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _instanceof_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_exp_)
            + toString(_instanceof_)
            + toString(_identifier_);
    }

    void removeChild(Node child)
    {
        if(_exp_ == child)
        {
            _exp_ = null;
            return;
        }

        if(_instanceof_ == child)
        {
            _instanceof_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(_instanceof_ == oldChild)
        {
            setInstanceof((TInstanceof) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

    }
}
