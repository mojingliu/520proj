/* all sorts of useful functions */
/* some more helper functions for arrays*/

   string array_getString(tuple Array a,int n){
      tuple IBS ibs;
      ibs = array_get(a,n);
      return ibs.s;
   }

   int    array_getInt(tuple Array a,int n){
      tuple IBS ibs;
      ibs = array_get(a,n);
      return ibs.i;
   }

   bool   array_getBool(tuple Array a,int n){
      tuple IBS ibs;
      ibs = array_get(a,n);
      return ibs.b;
   }

    tuple Array array_setInt(tuple Array a, int n, int new) {
      tuple IBS ibs;
      ibs = array_get(a,n);
      ibs.i = new;
      return array_set(a,n,ibs);
    }
    tuple Array array_setBool(tuple Array a, int n, bool new) {
      tuple IBS ibs;
      ibs = array_get(a,n);
      ibs.b = new;
      return array_set(a,n,ibs);
    }
    tuple Array array_setString(tuple Array a, int n, string new) {
      tuple IBS ibs;
      ibs = array_get(a,n);
      ibs.s = new;
      return array_set(a,n,ibs);  
    }




   string genMessage(string uname, string body){
      string m;
      m = "<div class=\"msg\"><div class=\"uname\">";
      m = m + uname + "</div><div class=\"msgbody\">";
      m = m + body + "</div></div>";

      return m;
   }


   string genTopic(string topic){
      string m;
      m = "<div class=\"topiclistelement\">";
      m = m+ "<input type=\"radio\" name=\"choice\" value=\"";
      m = m + topic + "\" > "+topic+"</div>";

      return m;
   }


   /* functions for showing pages */
   string getTopicList(){
      string t;
      int i;
      t = "";
      i = 0;
      while(i<topicCount){
         tuple IBS ibs;
         ibs = (array_get(topics,i));
         t = t + genTopic(ibs.s);
         i = i+1;
      }
      return t;
   }


   /* given topic name, returns index in messages of last message, or -1 if not found */
   int findTopic(string topic){
      int i;
      i = 0;
      //loop through list of topics
      while((i<topicCount)&&(array_getString(topics,i)!=topic)){
        i = i+1;
      }
      //topic at i, or not found
      if (i == topicCount) return -1;
      //get index of last message
      return array_getInt(topics,i); //get index of last message
   }

   /* returns the topiclist generated by the function */
   string getTopic(string topic){
      string t;
      int i;
      t = "";
      //find topic
      i = findTopic(topic);
      //topic at i, or not found
      if (i == -1) return genMessage("","Topic "+topic+" not found!");
      //build message list
      while (i != -1){
        t = genMessage(array_getString(usernames,i),array_getString(messages,i)) + t;
        i = array_getInt(messages,i);
      }
      return t;
   }


   /* functions for manipulating the forum - returns true on success*/
   /* if a topic already exists, add a prime at the end ? or just error it*/
   tuple Success newTopic(tuple New new){
     int i;
     //check whether array is full
     if (messageCount == arraySize){
       return tuple 
         {success = false, 
          errorMessage = "Internet is full, thanks to wig! <p> Please try again in another 15 years."};
     }
     //check whether topic exists
     i = findTopic(new.topic);
     if (i != -1){
       tuple Success ok;
       ok.success = false;
       ok.errorMessage = "Error when creating topic: topic "+new.topic+" exists.";
       return ok;
     }
     //add topic
     topics = array_setString(topics,topicCount,new.topic); //set topic name
     topics = array_setInt(topics,topicCount,messageCount); //pointer to last message
     messages = array_setString(messages,messageCount,new.message); //set message
     messages = array_setInt(messages,messageCount,-1); //set first mesage (pointer to -1)
     usernames = array_setString(usernames,messageCount,new.username); //set username
     usernames = array_setInt(usernames,messageCount,topicCount); //set pointer to topic
     messageCount = messageCount+1;
     topicCount = topicCount+1;
     return tuple{success = true, errorMessage = ""};
   }

   tuple Success newMessage(string topic, tuple New new){
      int i;
      int topicIndex;
      arraySize = array_size();
      i = 0;
      //check whether array is full
      if (messageCount == arraySize) return 
        tuple{success = false, 
              errorMessage = "Internet is full, thanks to wig! <p> Please try again in another 15 years."};
      //find topic
      i = findTopic(topic);
      //if topic not found, error
      if (i == -1){
          tuple Success ok; 
          ok = tuple{success = false,errorMessage = ""};
          ok.errorMessage = "Error when creating messae: topic "+topic+" not found";
          return ok;
      }
      //insert new message
      messages = array_setString(messages,messageCount,new.message);
      messages = array_setInt(messages,messageCount,i); //point to previous last message
      usernames = array_setString(usernames,messageCount,new.username);
      topicIndex = array_getInt(usernames,i);
      usernames = array_setInt(usernames,messageCount,topicIndex);
      topics = array_setInt(topics,topicIndex,messageCount); //have topic point to new last message
      messageCount = messageCount+1;
      return tuple{success = true, errorMessage = ""};
   }